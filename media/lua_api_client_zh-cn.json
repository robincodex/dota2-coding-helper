{
    "CDOTAGameManager": [{
        "desc": "Get the hero unit ",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetHeroDataByName_Script"
    }, {
        "desc": "Get the hero ID given the hero name.",
        "func": "( string_1 )",
        "return": "int",
        "name": "GetHeroIDByName"
    }, {
        "desc": "Get the hero name given a hero ID.",
        "func": "( int_1 )",
        "return": "string",
        "name": "GetHeroNameByID"
    }, {
        "desc": "Get the hero name given a unit name.",
        "func": "( string_1 )",
        "return": "string",
        "name": "GetHeroNameForUnitName"
    }, {
        "desc": "Get the hero unit name given the hero ID.",
        "func": "( int_1 )",
        "return": "string",
        "name": "GetHeroUnitNameByID"
    }],
    "C_BaseEntity": [{
        "desc": "",
        "func": "()",
        "return": "Vector",
        "name": "GetAbsOrigin"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetTeamNumber"
    }, {
        "desc": "Set a think function on this entity.",
        "func": "( string pszContextName, handle hThinkFunc, float flInterval )",
        "return": "void",
        "name": "SetContextThink"
    }],
    "Convars": [{
        "desc": "GetBool(name):将指定的控制台变量（convar）作为boolean返回.",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetBool"
    }, {
        "desc": "GetCommandClient():返回输入该控制台指令的玩家",
        "func": "()",
        "return": "handle",
        "name": "GetCommandClient"
    }, {
        "desc": "GetDOTACommandClient():返回输入该控制台智力的DOTA玩家",
        "func": "()",
        "return": "handle",
        "name": "GetDOTACommandClient"
    }, {
        "desc": "GetFloat(name):将指定的控制台变量（convar）作为float返回.不存在时返回nil",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetFloat"
    }, {
        "desc": "GetInt(name):将指定的控制台变量（convar）作为int返回.不存在时返回nil",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetInt"
    }, {
        "desc": "GetStr(name):将指定的控制台变量（convar）作为string返回.不存在时返回nil",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetStr"
    }, {
        "desc": "RegisterCommand(name,fn,helpString,flags):注册一个控制台指令.",
        "func": "( string_1, handle_2, string_3, int_4 )",
        "return": "void",
        "name": "RegisterCommand"
    }, {
        "desc": "RegisterConvar(name,defaultValue,helpString,flags):注册一个新的控制台变量.",
        "func": "( string_1, string_2, string_3, int_4 )",
        "return": "void",
        "name": "RegisterConvar"
    }, {
        "desc": "SetBool(name,val):将指定控制台变量（convar）设置为指定bool.",
        "func": "( string_1, bool_2 )",
        "return": "void",
        "name": "SetBool"
    }, {
        "desc": "SetFloat(name,val):将指定控制台变量（convar）设置为指定float.",
        "func": "( string_1, float_2 )",
        "return": "void",
        "name": "SetFloat"
    }, {
        "desc": "SetInt(name,val):将指定控制台变量（convar）设置为指定int.",
        "func": "( string_1, int_2 )",
        "return": "void",
        "name": "SetInt"
    }, {
        "desc": "SetStr(name,val):将指定控制台变量（convar）设置为指定string.",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "SetStr"
    }],
    "C_DOTA_Ability_Lua": [{
        "desc": "Determine whether an issued command with no target is valid.",
        "func": "()",
        "return": "int",
        "name": "CastFilterResult"
    }, {
        "desc": "(Vector vLocation) Determine whether an issued command on a location is valid.",
        "func": "( Vector vLocation )",
        "return": "int",
        "name": "CastFilterResultLocation"
    }, {
        "desc": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
        "func": "( handle hTarget )",
        "return": "int",
        "name": "CastFilterResultTarget"
    }, {
        "desc": "Controls the size of the AOE casting cursor.",
        "func": "()",
        "return": "float",
        "name": "GetAOERadius"
    }, {
        "desc": "Allows code overriding of the ability texture shown in the HUD.",
        "func": "()",
        "return": "string",
        "name": "GetAbilityTextureName"
    }, {
        "desc": "Return cast behavior type of this ability.",
        "func": "()",
        "return": "int",
        "name": "GetBehavior"
    }, {
        "desc": "Return cast point of this ability.",
        "func": "()",
        "return": "float",
        "name": "GetCastPoint"
    }, {
        "desc": "Return cast range of this ability.",
        "func": "( Vector vLocation, handle hTarget )",
        "return": "int",
        "name": "GetCastRange"
    }, {
        "desc": "Return the channel time of this ability.",
        "func": "()",
        "return": "float",
        "name": "GetChannelTime"
    }, {
        "desc": "Return mana cost at the given level per second while channeling (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetChannelledManaCostPerSecond"
    }, {
        "desc": "Return cooldown of this ability.",
        "func": "( int iLevel )",
        "return": "float",
        "name": "GetCooldown"
    }, {
        "desc": "Return the error string of a failed command with no target.",
        "func": "()",
        "return": "string",
        "name": "GetCustomCastError"
    }, {
        "desc": "(Vector vLocation) Return the error string of a failed command on a location.",
        "func": "( Vector vLocation )",
        "return": "string",
        "name": "GetCustomCastErrorLocation"
    }, {
        "desc": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
        "func": "( handle hTarget )",
        "return": "string",
        "name": "GetCustomCastErrorTarget"
    }, {
        "desc": "Return gold cost at the given level (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetGoldCost"
    }, {
        "desc": "Return mana cost at the given level (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetManaCost"
    }],
    "CDOTA_Modifier_Lua_Horizontal_Motion": [{
        "desc": "当运动被打断时进行回调。",
        "func": "()",
        "return": "void",
        "name": "OnHorizontalMotionInterrupted"
    }, {
        "desc": "根据给定的间隔对NPC施加水平运动",
        "func": "( handle me, float dt )",
        "return": "void",
        "name": "UpdateHorizontalMotion"
    }],
    "Globals": [{
        "desc": "返回两个偏航角度之差",
        "func": "( float_1, float_2 )",
        "return": "float",
        "name": "AngleDiff"
    }, {
        "desc": "在服务器日志文件上增加一个string",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "AppendToLogFile"
    }, {
        "desc": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
        "func": "( Vector_1, float_2 )",
        "return": "Quaternion",
        "name": "AxisAngleToQuaternion"
    }, {
        "desc": "计算实体的OBB上最接近的两个点。",
        "func": "( handle_1, Vector_2 )",
        "return": "Vector",
        "name": "CalcClosestPointOnEntityOBB"
    }, {
        "desc": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
        "func": "( handle_1, handle_2 )",
        "return": "float",
        "name": "CalcDistanceBetweenEntityOBB"
    }, {
        "desc": "",
        "func": "( Vector_1, Vector_2, Vector_3 )",
        "return": "float",
        "name": "CalcDistanceToLineSegment2D"
    }, {
        "desc": "为特定的实体创建所有输入/输出事件",
        "func": "( ehandle_1 )",
        "return": "void",
        "name": "CancelEntityIOEvents"
    }, {
        "desc": "传递table-输入：实体，效果",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "CreateEffect"
    }, {
        "desc": "生成一个HTTP请求。",
        "func": "( string_1, string_2 )",
        "return": "handle",
        "name": "CreateHTTPRequest"
    }, {
        "desc": "Create an HTTP request.",
        "func": "( string_1, string_2 )",
        "return": "handle",
        "name": "CreateHTTPRequestScriptVM"
    }, {
        "desc": "(vector,vector) cross product between two vectors",
        "func": "( Vector_1, Vector_2 )",
        "return": "Vector",
        "name": "CrossVectors"
    }, {
        "desc": "在debugger（调试模式）中停止运行",
        "func": "()",
        "return": "void",
        "name": "DebugBreak"
    }, {
        "desc": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
        "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
        "return": "void",
        "name": "DebugDrawBox"
    }, {
        "desc": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
        "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
        "return": "void",
        "name": "DebugDrawBoxDirection"
    }, {
        "desc": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
        "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
        "return": "void",
        "name": "DebugDrawCircle"
    }, {
        "desc": "尝试清理所有debugoverlay信息",
        "func": "()",
        "return": "void",
        "name": "DebugDrawClear"
    }, {
        "desc": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
        "func": "( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
        "return": "void",
        "name": "DebugDrawLine"
    }, {
        "desc": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
        "func": "( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
        "return": "void",
        "name": "DebugDrawLine_vCol"
    }, {
        "desc": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
        "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
        "return": "void",
        "name": "DebugDrawScreenTextLine"
    }, {
        "desc": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
        "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
        "return": "void",
        "name": "DebugDrawSphere"
    }, {
        "desc": "显示3d文字(origin,text,bViewCheck,duration)",
        "func": "( Vector_1, string_2, bool_3, float_4 )",
        "return": "void",
        "name": "DebugDrawText"
    }, {
        "desc": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
        "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
        "return": "void",
        "name": "DebugScreenTextPretty"
    }, {
        "desc": "运行一个内部脚本",
        "func": "( string_1, handle_2 )",
        "return": "bool",
        "name": "DoIncludeScript"
    }, {
        "desc": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
        "func": "( bool_1, string_2 )",
        "return": "void",
        "name": "DoScriptAssert"
    }, {
        "desc": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
        "func": "( string_1 )",
        "return": "string",
        "name": "DoUniqueString"
    }, {
        "desc": "在一个实体上播放给定名称的音效",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "EmitSoundOn"
    }, {
        "desc": "为指定玩家播放给定名称的音效",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "EmitSoundOnClient"
    }, {
        "desc": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
        "func": "( int_1 )",
        "return": "handle",
        "name": "EntIndexToHScript"
    }, {
        "desc": "滑的曲线，接近0时减少较慢",
        "func": "( float_1, float_2, float_3 )",
        "return": "float",
        "name": "ExponentialDecay"
    }, {
        "desc": "触发实体的动作输入w/no数据",
        "func": "( ehandle_1, string_2 )",
        "return": "void",
        "name": "FireEntityIOInputNameOnly"
    }, {
        "desc": "用给定字符串（由你分配内存）触发实体的动作输入",
        "func": "( ehandle_1, string_2, string_3 )",
        "return": "void",
        "name": "FireEntityIOInputString"
    }, {
        "desc": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
        "func": "( ehandle_1, string_2, Vector_3 )",
        "return": "void",
        "name": "FireEntityIOInputVec"
    }, {
        "desc": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "FireGameEvent"
    }, {
        "desc": "触发一个游戏事件但不广播给客户端",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "FireGameEventLocal"
    }, {
        "desc": "获取上一帧在服务器上花费的时间",
        "func": "()",
        "return": "float",
        "name": "FrameTime"
    }, {
        "desc": "返回引擎当然的帧数",
        "func": "()",
        "return": "int",
        "name": "GetFrameCount"
    }, {
        "desc": "在广播服务器获取本地玩家",
        "func": "()",
        "return": "handle",
        "name": "GetListenServerHost"
    }, {
        "desc": "Get the local player ID.",
        "func": "()",
        "return": "int",
        "name": "GetLocalPlayerID"
    }, {
        "desc": "Get the local player team.",
        "func": "()",
        "return": "int",
        "name": "GetLocalPlayerTeam"
    }, {
        "desc": "获取地图的名字",
        "func": "()",
        "return": "string",
        "name": "GetMapName"
    }, {
        "desc": "获取输出事件的最大延迟",
        "func": "( ehandle_1, string_2 )",
        "return": "float",
        "name": "GetMaxOutputDelay"
    }, {
        "desc": "获取VPHYS或普通物体的角速度",
        "func": "( handle_1 )",
        "return": "Vector",
        "name": "GetPhysAngularVelocity"
    }, {
        "desc": "获取VPHYS或普通物体的速度",
        "func": "( handle_1 )",
        "return": "Vector",
        "name": "GetPhysVelocity"
    }, {
        "desc": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "InitLogFile"
    }, {
        "desc": "Returnstrueifthisisluarunningfromtheclient.dll.",
        "func": "()",
        "return": "bool",
        "name": "IsClient"
    }, {
        "desc": "如果服务器开放返回true",
        "func": "()",
        "return": "bool",
        "name": "IsDedicatedServer"
    }, {
        "desc": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
        "func": "()",
        "return": "bool",
        "name": "IsInToolsMode"
    }, {
        "desc": "如果实体有效并被标记为删除返回true",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "IsMarkedForDeletion"
    }, {
        "desc": "当Lua代码是从Server.dll中被运行的时候，返回True。",
        "func": "()",
        "return": "bool",
        "name": "IsServer"
    }, {
        "desc": "检查给定hScript是否为有效实体",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "IsValidEntity"
    }, {
        "desc": "(vector,vector,float) lerp between two vectors by a float factor returning new vector",
        "func": "( Vector_1, Vector_2, float_3 )",
        "return": "Vector",
        "name": "LerpVectors"
    }, {
        "desc": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
        "func": "( string_1, string_2, int_3 )",
        "return": "void",
        "name": "LinkLuaModifier"
    }, {
        "desc": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
        "func": "( string_1, handle_2, handle_3 )",
        "return": "int",
        "name": "ListenToGameEvent"
    }, {
        "desc": "用给定的关键字文件创建table",
        "func": "( string_1 )",
        "return": "table",
        "name": "LoadKeyValues"
    }, {
        "desc": "用给定的关键字string创建table",
        "func": "( string_1 )",
        "return": "table",
        "name": "LoadKeyValuesFromString"
    }, {
        "desc": "Get the current local time",
        "func": "()",
        "return": "table",
        "name": "LocalTime"
    }, {
        "desc": "检查给定的hScript是否是有效实体（？）",
        "func": "( string_1 )",
        "return": "int",
        "name": "MakeStringToken"
    }, {
        "desc": "输出信息",
        "func": "( string_1 )",
        "return": "void",
        "name": "Msg"
    }, {
        "desc": "通过索引获取玩家的脚本实例",
        "func": "( int_1 )",
        "return": "handle",
        "name": "PlayerInstanceFromIndex"
    }, {
        "desc": "用关键字从table中预缓存一个实体",
        "func": "( string_1, handle_2, handle_3 )",
        "return": "void",
        "name": "PrecacheEntityFromTable"
    }, {
        "desc": "预缓存一个实体关键字列表",
        "func": "( handle_1, handle_2 )",
        "return": "void",
        "name": "PrecacheEntityListFromTable"
    }, {
        "desc": "Printaconsolemessagewithalinkedconsolecommand",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "PrintLinkedConsoleMessage"
    }, {
        "desc": "获取范围内随机float",
        "func": "( float_1, float_2 )",
        "return": "float",
        "name": "RandomFloat"
    }, {
        "desc": "获取范围内随机int",
        "func": "( int_1, int_2 )",
        "return": "int",
        "name": "RandomInt"
    }, {
        "desc": "为一个脚本基础的生成单位过滤器创建一个C代理",
        "func": "( string_1 )",
        "return": "void",
        "name": "RegisterSpawnGroupFilterProxy"
    }, {
        "desc": "重载MotD文件",
        "func": "()",
        "return": "void",
        "name": "ReloadMOTD"
    }, {
        "desc": "为一个脚本基础的生成单位过滤器删除一个C代理",
        "func": "( string_1 )",
        "return": "void",
        "name": "RemoveSpawnGroupFilterProxy"
    }, {
        "desc": "旋转一个QAngle，用另一个QAngle",
        "func": "( QAngle_1, QAngle_2 )",
        "return": "QAngle",
        "name": "RotateOrientation"
    }, {
        "desc": "Rotate a Vector around a point.",
        "func": "( Vector_1, QAngle_2, Vector_3 )",
        "return": "Vector",
        "name": "RotatePosition"
    }, {
        "desc": "围绕给定vector轴线旋转一个四元数",
        "func": "( Quaternion_1, Vector_2, float_3 )",
        "return": "Quaternion",
        "name": "RotateQuaternionByAxisAngle"
    }, {
        "desc": "两个QAngle间的delta值",
        "func": "( QAngle_1, QAngle_2 )",
        "return": "QAngle",
        "name": "RotationDelta"
    }, {
        "desc": "converts delta QAngle to an angular velocity Vector",
        "func": "( QAngle_1, QAngle_2 )",
        "return": "Vector",
        "name": "RotationDeltaAsAngularVelocity"
    }, {
        "desc": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
        "func": "( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
        "return": "void",
        "name": "ScreenShake"
    }, {
        "desc": "给控制台发送string作为客户端命令",
        "func": "( string_1 )",
        "return": "void",
        "name": "SendToConsole"
    }, {
        "desc": "为所有玩家设置opvar值",
        "func": "( string_1, string_2, string_3, float_4 )",
        "return": "void",
        "name": "SetOpvarFloatAll"
    }, {
        "desc": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
        "func": "( string_1, string_2, string_3, float_4, handle_5 )",
        "return": "void",
        "name": "SetOpvarFloatPlayer"
    }, {
        "desc": "Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
        "func": "( handle_1, Vector_2 )",
        "return": "void",
        "name": "SetPhysAngularVelocity"
    }, {
        "desc": "设置当前任务名",
        "func": "( string_1 )",
        "return": "void",
        "name": "SetQuestName"
    }, {
        "desc": "设置当前任务阶段",
        "func": "( int_1 )",
        "return": "void",
        "name": "SetQuestPhase"
    }, {
        "desc": "为ehandle设置rendering（渲染）开/关",
        "func": "( ehandle_1, bool_2 )",
        "return": "void",
        "name": "SetRenderingEnabled"
    }, {
        "desc": "从table同步生成一个实体",
        "func": "( string_1, handle_2 )",
        "return": "handle",
        "name": "SpawnEntityFromTableSynchronous"
    }, {
        "desc": "从一系列生成表中分级生成一个实体组",
        "func": "( handle_1, bool_2, handle_3 )",
        "return": "bool",
        "name": "SpawnEntityGroupFromTable"
    }, {
        "desc": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
        "func": "( handle_1, handle_2 )",
        "return": "int",
        "name": "SpawnEntityListFromTableAsynchronous"
    }, {
        "desc": "从一个生成表列表同步生成一个实体组.",
        "func": "( handle_1 )",
        "return": "handle",
        "name": "SpawnEntityListFromTableSynchronous"
    }, {
        "desc": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
        "func": "( Quaternion_1, Quaternion_2, float_3 )",
        "return": "Quaternion",
        "name": "SplineQuaternions"
    }, {
        "desc": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
        "func": "( Vector_1, Vector_2, float_3 )",
        "return": "Vector",
        "name": "SplineVectors"
    }, {
        "desc": "开始音效事件",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "StartSoundEvent"
    }, {
        "desc": "在某个位置开始音效事件。",
        "func": "( string_1, Vector_2 )",
        "return": "void",
        "name": "StartSoundEventFromPosition"
    }, {
        "desc": "通过可靠的传递，在某个位置开始音效事件。",
        "func": "( string_1, Vector_2 )",
        "return": "void",
        "name": "StartSoundEventFromPositionReliable"
    }, {
        "desc": "通过随意的传递，在某个位置开始音效事件。",
        "func": "( string_1, Vector_2 )",
        "return": "void",
        "name": "StartSoundEventFromPositionUnreliable"
    }, {
        "desc": "通过可靠的传递，开始音效事件。",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "StartSoundEventReliable"
    }, {
        "desc": "通过随意的传递，开始音效事件。",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "StartSoundEventUnreliable"
    }, {
        "desc": "(hEntity,szEffectName)",
        "func": "( handle_1, string_2 )",
        "return": "void",
        "name": "StopEffect"
    }, {
        "desc": "停止listen在给定内容内的所有游戏事件",
        "func": "( handle_1 )",
        "return": "void",
        "name": "StopListeningToAllGameEvents"
    }, {
        "desc": "停止listen特定的游戏事件",
        "func": "( int_1 )",
        "return": "bool",
        "name": "StopListeningToGameEvent"
    }, {
        "desc": "停止音效事件",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "StopSoundEvent"
    }, {
        "desc": "停止实体上的命名音效",
        "func": "( string_1, handle_2 )",
        "return": "void",
        "name": "StopSoundOn"
    }, {
        "desc": "获取当前服务器时间",
        "func": "()",
        "return": "float",
        "name": "Time"
    }, {
        "desc": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "TraceCollideable"
    }, {
        "desc": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "TraceHull"
    }, {
        "desc": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "TraceLine"
    }, {
        "desc": "删除给定实体",
        "func": "( handle_1 )",
        "return": "void",
        "name": "UTIL_Remove"
    }, {
        "desc": "立即删除给定实体",
        "func": "( handle_1 )",
        "return": "void",
        "name": "UTIL_RemoveImmediate"
    }, {
        "desc": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
        "func": "( handle_1, int_2, int_3, int_4, int_5 )",
        "return": "int",
        "name": "UnitFilter"
    }, {
        "desc": "通过名称去除生成组",
        "func": "( string_1 )",
        "return": "void",
        "name": "UnloadSpawnGroup"
    }, {
        "desc": "通过handle去除生成组",
        "func": "( int_1 )",
        "return": "void",
        "name": "UnloadSpawnGroupByHandle"
    }, {
        "desc": "为Vector获取Qangle（没有滚动）",
        "func": "( Vector_1 )",
        "return": "QAngle",
        "name": "VectorToAngles"
    }, {
        "desc": "输出警告",
        "func": "( string_1 )",
        "return": "void",
        "name": "Warning"
    }, {
        "desc": "获取给定cvar的值，返回float.",
        "func": "( string_1 )",
        "return": "float",
        "name": "cvar_getf"
    }, {
        "desc": "设置给定cvar的值,传递float.",
        "func": "( string_1, float_2 )",
        "return": "bool",
        "name": "cvar_setf"
    }, {
        "desc": "给决定数据库增加一个规则",
        "func": "( handle_1 )",
        "return": "bool",
        "name": "rr_AddDecisionRule"
    }, {
        "desc": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
        "func": "( handle_1, handle_2 )",
        "return": "bool",
        "name": "rr_CommitAIResponse"
    }, {
        "desc": "获取所有提供的表达者目标的table，格式为{name:handle,name:handle}.",
        "func": "()",
        "return": "handle",
        "name": "rr_GetResponseTargets"
    }, {
        "desc": "参数:(hEnt,hQuery,hResult)//静态:对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)",
        "func": "( handle_1, handle_2, handle_3 )",
        "return": "bool",
        "name": "rr_QueryBestResponse"
    }],
    "CDOTA_Modifier_Lua_Motion_Both": [{
        "desc": "当水平运动被打断时进行回调。",
        "func": "()",
        "return": "void",
        "name": "OnHorizontalMotionInterrupted"
    }, {
        "desc": "当竖直运动被打断时进行回调。",
        "func": "()",
        "return": "void",
        "name": "OnVerticalMotionInterrupted"
    }, {
        "desc": "根据给定的间隔对NPC施加水平运动。",
        "func": "( handle me, float dt )",
        "return": "void",
        "name": "UpdateHorizontalMotion"
    }, {
        "desc": "根据给定的间隔对NPC施加竖直运动。",
        "func": "( handle me, float dt )",
        "return": "void",
        "name": "UpdateVerticalMotion"
    }],
    "C_DOTABaseAbility": [{
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetBehavior"
    }, {
        "desc": "",
        "func": "()",
        "return": "handle",
        "name": "GetCaster"
    }, {
        "desc": "Return the level of the ability",
        "func": "()",
        "return": "int",
        "name": "GetLevel"
    }, {
        "desc": "Gets a value from this ability's special value block for its current level.",
        "func": "( string szName )",
        "return": "table",
        "name": "GetSpecialValueFor"
    }, {
        "desc": "Whether or not this ability is toggled.",
        "func": "()",
        "return": "bool",
        "name": "GetToggleState"
    }, {
        "desc": "Whether or not this ability is an item.",
        "func": "()",
        "return": "bool",
        "name": "IsItem"
    }],
    "C_DOTA_Modifier_Lua": [{
        "desc": "True/false if this modifier is active on illusions.",
        "func": "()",
        "return": "bool",
        "name": "AllowIllusionDuplicate"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "CanParentBeAutoAttacked"
    }, {
        "desc": "True/false if this buff is removed when the duration expires.",
        "func": "()",
        "return": "bool",
        "name": "DestroyOnExpire"
    }, {
        "desc": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
        "func": "()",
        "return": "int",
        "name": "GetAttributes"
    }, {
        "desc": "Returns aura stickiness",
        "func": "()",
        "return": "float",
        "name": "GetAuraDuration"
    }, {
        "desc": "Return true/false if this entity should receive the aura under specific conditions",
        "func": "( handle hEntity )",
        "return": "bool",
        "name": "GetAuraEntityReject"
    }, {
        "desc": "Return the range around the parent this aura tries to apply its buff.",
        "func": "()",
        "return": "int",
        "name": "GetAuraRadius"
    }, {
        "desc": "Return the unit flags this aura respects when placing buffs.",
        "func": "()",
        "return": "int",
        "name": "GetAuraSearchFlags"
    }, {
        "desc": "Return the teams this aura applies its buff to.",
        "func": "()",
        "return": "int",
        "name": "GetAuraSearchTeam"
    }, {
        "desc": "Return the unit classifications this aura applies its buff to.",
        "func": "()",
        "return": "int",
        "name": "GetAuraSearchType"
    }, {
        "desc": "Return the attach type of the particle system from GetEffectName.",
        "func": "()",
        "return": "int",
        "name": "GetEffectAttachType"
    }, {
        "desc": "Return the name of the particle system that is created while this modifier is active.",
        "func": "()",
        "return": "string",
        "name": "GetEffectName"
    }, {
        "desc": "Return the name of the hero effect particle system that is created while this modifier is active.",
        "func": "()",
        "return": "string",
        "name": "GetHeroEffectName"
    }, {
        "desc": "The name of the secondary modifier that will be applied by this modifier (if it is an aura).",
        "func": "()",
        "return": "string",
        "name": "GetModifierAura"
    }, {
        "desc": "Return the priority order this modifier will be applied over others.",
        "func": "()",
        "return": "int",
        "name": "GetPriority"
    }, {
        "desc": "Return the name of the status effect particle system that is created while this modifier is active.",
        "func": "()",
        "return": "string",
        "name": "GetStatusEffectName"
    }, {
        "desc": "Return the name of the buff icon to be shown for this modifier.",
        "func": "()",
        "return": "string",
        "name": "GetTexture"
    }, {
        "desc": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
        "func": "()",
        "return": "int",
        "name": "HeroEffectPriority"
    }, {
        "desc": "True/false if this modifier is an aura.",
        "func": "()",
        "return": "bool",
        "name": "IsAura"
    }, {
        "desc": "True/false if this aura provides buffs when the parent is dead.",
        "func": "()",
        "return": "bool",
        "name": "IsAuraActiveOnDeath"
    }, {
        "desc": "True/false if this modifier should be displayed as a debuff.",
        "func": "()",
        "return": "bool",
        "name": "IsDebuff"
    }, {
        "desc": "True/false if this modifier should be displayed on the buff bar.",
        "func": "()",
        "return": "bool",
        "name": "IsHidden"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsPermanent"
    }, {
        "desc": "True/false if this modifier can be purged.",
        "func": "()",
        "return": "bool",
        "name": "IsPurgable"
    }, {
        "desc": "True/false if this modifier can be purged by strong dispels.",
        "func": "()",
        "return": "bool",
        "name": "IsPurgeException"
    }, {
        "desc": "True/false if this modifier is considered a stun for purge reasons.",
        "func": "()",
        "return": "bool",
        "name": "IsStunDebuff"
    }, {
        "desc": "Runs when the modifier is created.",
        "func": "( handle table )",
        "return": "void",
        "name": "OnCreated"
    }, {
        "desc": "Runs when the modifier is destroyed (after unit loses modifier).",
        "func": "()",
        "return": "void",
        "name": "OnDestroy"
    }, {
        "desc": "Runs when the think interval occurs.",
        "func": "()",
        "return": "void",
        "name": "OnIntervalThink"
    }, {
        "desc": "Runs when the modifier is refreshed.",
        "func": "( handle table )",
        "return": "void",
        "name": "OnRefresh"
    }, {
        "desc": "Runs when the modifier is destroyed (before unit loses modifier).",
        "func": "()",
        "return": "void",
        "name": "OnRemoved"
    }, {
        "desc": "Runs when stack count changes (param is old count).",
        "func": "( int iStackCount )",
        "return": "void",
        "name": "OnStackCountChanged"
    }, {
        "desc": "True/false if this modifier is removed when the parent dies.",
        "func": "()",
        "return": "bool",
        "name": "RemoveOnDeath"
    }, {
        "desc": "Apply the overhead offset to the attached effect.",
        "func": "()",
        "return": "bool",
        "name": "ShouldUseOverheadOffset"
    }, {
        "desc": "Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
        "func": "()",
        "return": "int",
        "name": "StatusEffectPriority"
    }],
    "GlobalSys": [{
        "desc": "CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
        "func": "( string_1 )",
        "return": "table",
        "name": "CommandLineCheck"
    }, {
        "desc": "CommandLineFloat(name) : returns the command line param as a float.",
        "func": "( string_1, float_2 )",
        "return": "table",
        "name": "CommandLineFloat"
    }, {
        "desc": "CommandLineInt(name) : returns the command line param as an int.",
        "func": "( string_1, int_2 )",
        "return": "table",
        "name": "CommandLineInt"
    }, {
        "desc": "CommandLineStr(name) : returns the command line param as a string.",
        "func": "( string_1, string_2 )",
        "return": "table",
        "name": "CommandLineStr"
    }],
    "CScriptPrecacheContext": [{
        "desc": "预缓存指定资源",
        "func": "( string_1 )",
        "return": "void",
        "name": "AddResource"
    }, {
        "desc": "读取一个键值（spawnkey）",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetValue"
    }],
    "C_BaseModelEntity": [{
        "desc": "GetRenderAlpha(): Get the alpha modulation of this entity.",
        "func": "()",
        "return": "int",
        "name": "GetRenderAlpha"
    }],
    "C_DOTA_BaseNPC": [{
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetAbilityCount"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetAttackSpeed"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetAttacksPerSecond"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetBaseAttackTime"
    }, {
        "desc": "Returns base magical armor value.",
        "func": "()",
        "return": "float",
        "name": "GetBaseMagicalResistanceValue"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetBaseMoveSpeed"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetCastRangeBonus"
    }, {
        "desc": "Returns the size of the collision padding around the hull.",
        "func": "()",
        "return": "float",
        "name": "GetCollisionPadding"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetCooldownReduction"
    }, {
        "desc": "Gets the current vision range.",
        "func": "()",
        "return": "int",
        "name": "GetCurrentVisionRange"
    }, {
        "desc": "Returns the vision range after modifiers.",
        "func": "()",
        "return": "int",
        "name": "GetDayTimeVisionRange"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetHasteFactor"
    }, {
        "desc": "Get the current health percent of the unit.",
        "func": "()",
        "return": "int",
        "name": "GetHealthPercent"
    }, {
        "desc": "Get the collision hull radius of this NPC.",
        "func": "()",
        "return": "float",
        "name": "GetHullRadius"
    }, {
        "desc": "Returns speed after all modifiers.",
        "func": "()",
        "return": "float",
        "name": "GetIdealSpeed"
    }, {
        "desc": "Returns speed after all modifiers, but excluding those that reduce speed.",
        "func": "()",
        "return": "float",
        "name": "GetIdealSpeedNoSlows"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetIncreasedAttackSpeed"
    }, {
        "desc": "Returns the level of this unit.",
        "func": "()",
        "return": "int",
        "name": "GetLevel"
    }, {
        "desc": "Returns current magical armor value.",
        "func": "()",
        "return": "float",
        "name": "GetMagicalArmorValue"
    }, {
        "desc": "Get the mana on this unit.",
        "func": "()",
        "return": "float",
        "name": "GetMana"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetManaRegen"
    }, {
        "desc": "Get the maximum mana of this unit.",
        "func": "()",
        "return": "float",
        "name": "GetMaxMana"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetModelRadius"
    }, {
        "desc": "Gets the stack count of a given modifier.",
        "func": "( string pszScriptName, handle hCaster )",
        "return": "int",
        "name": "GetModifierStackCount"
    }, {
        "desc": "",
        "func": "( float flBaseSpeed, bool bReturnUnslowed )",
        "return": "float",
        "name": "GetMoveSpeedModifier"
    }, {
        "desc": "Returns the vision range after modifiers.",
        "func": "()",
        "return": "int",
        "name": "GetNightTimeVisionRange"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetOpposingTeamNumber"
    }, {
        "desc": "Get the collision hull radius (including padding) of this NPC.",
        "func": "()",
        "return": "float",
        "name": "GetPaddedCollisionRadius"
    }, {
        "desc": "Returns base physical armor value.",
        "func": "()",
        "return": "float",
        "name": "GetPhysicalArmorBaseValue"
    }, {
        "desc": "Returns current physical armor value.",
        "func": "( bool bIgnoreBase )",
        "return": "float",
        "name": "GetPhysicalArmorValue"
    }, {
        "desc": "Get the owner player ID for this unit.",
        "func": "()",
        "return": "int",
        "name": "GetPlayerOwnerID"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetSecondsPerAttack"
    }, {
        "desc": "Get how much gold has been spent on ability upgrades.",
        "func": "()",
        "return": "int",
        "name": "GetTotalPurchasedUpgradeGoldCost"
    }, {
        "desc": "",
        "func": "()",
        "return": "string",
        "name": "GetUnitLabel"
    }, {
        "desc": "Get the name of this unit.",
        "func": "()",
        "return": "string",
        "name": "GetUnitName"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasAttackCapability"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasFlyMovementCapability"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasFlyingVision"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasGroundMovementCapability"
    }, {
        "desc": "See whether this unit has an item by name.",
        "func": "( string pItemName )",
        "return": "bool",
        "name": "HasItemInInventory"
    }, {
        "desc": "Sees if this unit has a given modifier.",
        "func": "( string pszScriptName )",
        "return": "bool",
        "name": "HasModifier"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasMovementCapability"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "HasScepter"
    }, {
        "desc": "Is this unit an Ancient?",
        "func": "()",
        "return": "bool",
        "name": "IsAncient"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsAttackImmune"
    }, {
        "desc": "Is this unit a Barracks?",
        "func": "()",
        "return": "bool",
        "name": "IsBarracks"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsBlind"
    }, {
        "desc": "Is this unit a boss?",
        "func": "()",
        "return": "bool",
        "name": "IsBoss"
    }, {
        "desc": "Is this unit a building?",
        "func": "()",
        "return": "bool",
        "name": "IsBuilding"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsCommandRestricted"
    }, {
        "desc": "Is this unit a considered a hero for targeting purposes?",
        "func": "()",
        "return": "bool",
        "name": "IsConsideredHero"
    }, {
        "desc": "Is this unit controlled by any non-bot player?",
        "func": "()",
        "return": "bool",
        "name": "IsControllableByAnyPlayer"
    }, {
        "desc": "Is this unit a courier?",
        "func": "()",
        "return": "bool",
        "name": "IsCourier"
    }, {
        "desc": "Is this a Creature type NPC?",
        "func": "()",
        "return": "bool",
        "name": "IsCreature"
    }, {
        "desc": "Is this unit a creep?",
        "func": "()",
        "return": "bool",
        "name": "IsCreep"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsDisarmed"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsDominated"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsEvadeDisabled"
    }, {
        "desc": "Is this unit an Ancient?",
        "func": "()",
        "return": "bool",
        "name": "IsFort"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsFrozen"
    }, {
        "desc": "Is this a hero or hero illusion?",
        "func": "()",
        "return": "bool",
        "name": "IsHero"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsHexed"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsIllusion"
    }, {
        "desc": "Does this unit have an inventory.",
        "func": "()",
        "return": "bool",
        "name": "IsInventoryEnabled"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsInvisible"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsInvulnerable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsLowAttackPriority"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsMagicImmune"
    }, {
        "desc": "Is this unit moving?",
        "func": "()",
        "return": "bool",
        "name": "IsMoving"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsMuted"
    }, {
        "desc": "Is this a neutral?",
        "func": "()",
        "return": "bool",
        "name": "IsNeutralUnitType"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsNightmared"
    }, {
        "desc": "Is this unit a ward-type unit?",
        "func": "()",
        "return": "bool",
        "name": "IsOther"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsOutOfGame"
    }, {
        "desc": "Is this unit owned by any non-bot player?",
        "func": "()",
        "return": "bool",
        "name": "IsOwnedByAnyPlayer"
    }, {
        "desc": "Is this a phantom unit?",
        "func": "()",
        "return": "bool",
        "name": "IsPhantom"
    }, {
        "desc": "Is this unit a ranged attacker?",
        "func": "()",
        "return": "bool",
        "name": "IsRangedAttacker"
    }, {
        "desc": "Is this a real hero?",
        "func": "()",
        "return": "bool",
        "name": "IsRealHero"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsRooted"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsSilenced"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsSpeciallyDeniable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsStunned"
    }, {
        "desc": "Is this unit summoned?",
        "func": "()",
        "return": "bool",
        "name": "IsSummoned"
    }, {
        "desc": "Is this a tower?",
        "func": "()",
        "return": "bool",
        "name": "IsTower"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsUnselectable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsUntargetable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NoHealthBar"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NoTeamMoveTo"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NoTeamSelect"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NoUnitCollision"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NotOnMinimap"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "NotOnMinimapForEnemies"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "PassivesDisabled"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "ProvidesVision"
    }, {
        "desc": "Gets this unit's attack range after all modifiers.",
        "func": "()",
        "return": "float",
        "name": "Script_GetAttackRange"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "Script_IsDeniable"
    }, {
        "desc": "Can the unit respawn?",
        "func": "()",
        "return": "bool",
        "name": "UnitCanRespawn"
    }],
    "CBodyComponent": [{
        "desc": "在指定的世界位置施加一个物理推动",
        "func": "( Vector_1, Vector_2 )",
        "return": "void",
        "name": "AddImpulseAtPosition"
    }, {
        "desc": "为物理物件增加一个线速度或角速度",
        "func": "( Vector_1, Vector_2 )",
        "return": "void",
        "name": "AddVelocity"
    }, {
        "desc": "从其父项（parent）中分离",
        "func": "()",
        "return": "void",
        "name": "DetachFromParent"
    }, {
        "desc": "返回激活的序列（sequence）",
        "func": "()",
        "return": "<unknown>",
        "name": "GetSequence"
    }, {
        "desc": "是否依附父项（parent）",
        "func": "()",
        "return": "bool",
        "name": "IsAttachedToParent"
    }, {
        "desc": "输入名字返回序列（sequence）ID",
        "func": "( string_1 )",
        "return": "<unknown>",
        "name": "LookupSequence"
    }, {
        "desc": "按秒数返回指定序列（sequence）的持续时间",
        "func": "( string_1 )",
        "return": "float",
        "name": "SequenceDuration"
    }, {
        "desc": "",
        "func": "( Vector_1 )",
        "return": "void",
        "name": "SetAngularVelocity"
    }, {
        "desc": "输入动画名称播放动作，需要模型拥有该动画",
        "func": "( string_1 )",
        "return": "void",
        "name": "SetAnimation"
    }, {
        "desc": "",
        "func": "( utlstringtoken_1 )",
        "return": "void",
        "name": "SetMaterialGroup"
    }, {
        "desc": "",
        "func": "( Vector_1 )",
        "return": "void",
        "name": "SetVelocity"
    }],
    "C_PointWorldText": [{
        "desc": "Set the message on this entity.",
        "func": "( string pMessage )",
        "return": "void",
        "name": "SetMessage"
    }],
    "CScriptKeyValues": [{
        "desc": "读取一个键值（spawnkey）",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetValue"
    }],
    "C_BaseCombatCharacter": [],
    "Constants": [{
        "desc": "Get the hero unit ",
        "func": "( string_1 )",
        "return": "table",
        "name": "GetHeroDataByName_Script"
    }, {
        "desc": "Get the hero ID given the hero name.",
        "func": "( string_1 )",
        "return": "int",
        "name": "GetHeroIDByName"
    }, {
        "desc": "Get the hero name given a hero ID.",
        "func": "( int_1 )",
        "return": "string",
        "name": "GetHeroNameByID"
    }, {
        "desc": "Get the hero name given a unit name.",
        "func": "( string_1 )",
        "return": "string",
        "name": "GetHeroNameForUnitName"
    }, {
        "desc": "Get the hero unit name given the hero ID.",
        "func": "( int_1 )",
        "return": "string",
        "name": "GetHeroUnitNameByID"
    }],
    "C_DOTA_Item_Lua": [{
        "desc": "Determine whether an issued command with no target is valid.",
        "func": "()",
        "return": "int",
        "name": "CastFilterResult"
    }, {
        "desc": "(Vector vLocation) Determine whether an issued command on a location is valid.",
        "func": "( Vector vLocation )",
        "return": "int",
        "name": "CastFilterResultLocation"
    }, {
        "desc": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
        "func": "( handle hTarget )",
        "return": "int",
        "name": "CastFilterResultTarget"
    }, {
        "desc": "Controls the size of the AOE casting cursor.",
        "func": "()",
        "return": "float",
        "name": "GetAOERadius"
    }, {
        "desc": "Allows code overriding of the item texture shown in the HUD.",
        "func": "()",
        "return": "string",
        "name": "GetAbilityTextureName"
    }, {
        "desc": "Return cast behavior type of this ability.",
        "func": "()",
        "return": "int",
        "name": "GetBehavior"
    }, {
        "desc": "Return cast range of this ability.",
        "func": "( Vector vLocation, handle hTarget )",
        "return": "int",
        "name": "GetCastRange"
    }, {
        "desc": "Return the channel time of this ability.",
        "func": "()",
        "return": "float",
        "name": "GetChannelTime"
    }, {
        "desc": "Return mana cost at the given level per second while channeling (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetChannelledManaCostPerSecond"
    }, {
        "desc": "Return cooldown of this ability.",
        "func": "( int iLevel )",
        "return": "float",
        "name": "GetCooldown"
    }, {
        "desc": "Return the error string of a failed command with no target.",
        "func": "()",
        "return": "string",
        "name": "GetCustomCastError"
    }, {
        "desc": "(Vector vLocation) Return the error string of a failed command on a location.",
        "func": "( Vector vLocation )",
        "return": "string",
        "name": "GetCustomCastErrorLocation"
    }, {
        "desc": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
        "func": "( handle hTarget )",
        "return": "string",
        "name": "GetCustomCastErrorTarget"
    }, {
        "desc": "Return gold cost at the given level (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetGoldCost"
    }, {
        "desc": "Return mana cost at the given level (-1 is current).",
        "func": "( int iLevel )",
        "return": "int",
        "name": "GetManaCost"
    }, {
        "desc": "Returns whether this item is muted or not.",
        "func": "()",
        "return": "bool",
        "name": "IsMuted"
    }],
    "CDOTA_Buff": [{
        "desc": "增加粒子。",
        "func": "( int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect )",
        "return": "void",
        "name": "AddParticle"
    }, {
        "desc": "将Mordifier的叠加层数-1",
        "func": "()",
        "return": "void",
        "name": "DecrementStackCount"
    }, {
        "desc": "运行所有相关的移除函数来移除这个Mordifier。",
        "func": "()",
        "return": "void",
        "name": "Destroy"
    }, {
        "desc": "运行所有相关的刷新函数，使Mordifier恢复到初始",
        "func": "()",
        "return": "void",
        "name": "ForceRefresh"
    }, {
        "desc": "获取产生这个Mordifier的技能。",
        "func": "()",
        "return": "handle",
        "name": "GetAbility"
    }, {
        "desc": "Returns aura stickiness (default 0.5)",
        "func": "()",
        "return": "float",
        "name": "GetAuraDuration"
    }, {
        "desc": "",
        "func": "()",
        "return": "handle",
        "name": "GetAuraOwner"
    }, {
        "desc": "获取产生这个Mordifier的单位。",
        "func": "()",
        "return": "handle",
        "name": "GetCaster"
    }, {
        "desc": "获取这个Mordifier所属的类。",
        "func": "()",
        "return": "string",
        "name": "GetClass"
    }, {
        "desc": "获取这个Mordifier的创建时间。",
        "func": "()",
        "return": "float",
        "name": "GetCreationTime"
    }, {
        "desc": "获取这个Mordifier的终止时间。",
        "func": "()",
        "return": "float",
        "name": "GetDieTime"
    }, {
        "desc": "获取这个Mordifier的持续时间。",
        "func": "()",
        "return": "float",
        "name": "GetDuration"
    }, {
        "desc": "获取这个Mordifier的消失时间。",
        "func": "()",
        "return": "float",
        "name": "GetElapsedTime"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetLastAppliedTime"
    }, {
        "desc": "获取这个Mordifier的名称。",
        "func": "()",
        "return": "string",
        "name": "GetName"
    }, {
        "desc": "获取这个Mordifier所继承的单位。",
        "func": "()",
        "return": "handle",
        "name": "GetParent"
    }, {
        "desc": "获取这个Mordifier的剩余时间。",
        "func": "()",
        "return": "float",
        "name": "GetRemainingTime"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetSerialNumber"
    }, {
        "desc": "获取这个Mordifier的叠加层数。",
        "func": "()",
        "return": "int",
        "name": "GetStackCount"
    }, {
        "desc": "",
        "func": "( int iFunction )",
        "return": "bool",
        "name": "HasFunction"
    }, {
        "desc": "使Mordifier的叠加层数+1。",
        "func": "()",
        "return": "void",
        "name": "IncrementStackCount"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsDebuff"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsHexDebuff"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsStunDebuff"
    }, {
        "desc": "设置持续时间。",
        "func": "( float flDuration, bool bInformClient )",
        "return": "void",
        "name": "SetDuration"
    }, {
        "desc": "设置叠加层数。",
        "func": "( int iCount )",
        "return": "void",
        "name": "SetStackCount"
    }, {
        "desc": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。",
        "func": "( float flInterval )",
        "return": "void",
        "name": "StartIntervalThink"
    }],
    "CNativeOutputs": [{
        "desc": "增加一个输出",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "AddOutput"
    }, {
        "desc": "初始化输出",
        "func": "( int_1 )",
        "return": "void",
        "name": "Init"
    }],
    "CEntities": [{
        "desc": "在实体数组或表中开始一个迭代程序",
        "func": "()",
        "return": "handle",
        "name": "First"
    }, {
        "desc": "从指定列表中的实体开始迭代",
        "func": "( handle_1 )",
        "return": "handle",
        "name": "Next"
    }],
    "CEntityInstance": [{
        "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "ConnectOutput"
    }, {
        "desc": "",
        "func": "()",
        "return": "void",
        "name": "Destroy"
    }, {
        "desc": "从这个实体的I/O事件移除已连接的脚本方法",
        "func": "( string_1, string_2 )",
        "return": "void",
        "name": "DisconnectOutput"
    }, {
        "desc": "从传入实体的I/O事件移除已连接的脚本方法",
        "func": "( string_1, string_2, handle_3 )",
        "return": "void",
        "name": "DisconnectRedirectedOutput"
    }, {
        "desc": "触发实体的输出",
        "func": "( string_1, handle_2, handle_3, table_4, float_5 )",
        "return": "void",
        "name": "FireOutput"
    }, {
        "desc": "",
        "func": "()",
        "return": "string",
        "name": "GetClassname"
    }, {
        "desc": "如果没有定义的话获得实体名字的帮助",
        "func": "()",
        "return": "string",
        "name": "GetDebugName"
    }, {
        "desc": "获得这个实体的EHANDLE",
        "func": "()",
        "return": "ehandle",
        "name": "GetEntityHandle"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetEntityIndex"
    }, {
        "desc": "获得整型属性",
        "func": "( string_1 )",
        "return": "int",
        "name": "GetIntAttr"
    }, {
        "desc": "",
        "func": "()",
        "return": "string",
        "name": "GetName"
    }, {
        "desc": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
        "func": "()",
        "return": "handle",
        "name": "GetOrCreatePrivateScriptScope"
    }, {
        "desc": "恢复实体相关的公用脚本数据,必要时会创建",
        "func": "()",
        "return": "handle",
        "name": "GetOrCreatePublicScriptScope"
    }, {
        "desc": "恢复实体相关的每个实例私有的脚本数据",
        "func": "()",
        "return": "handle",
        "name": "GetPrivateScriptScope"
    }, {
        "desc": "恢复实体相关的公用脚本数据",
        "func": "()",
        "return": "handle",
        "name": "GetPublicScriptScope"
    }, {
        "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
        "func": "( string_1, string_2, handle_3 )",
        "return": "void",
        "name": "RedirectOutput"
    }, {
        "desc": "删除这个实体",
        "func": "()",
        "return": "void",
        "name": "RemoveSelf"
    }, {
        "desc": "设置整型属性",
        "func": "( string_1, int_2 )",
        "return": "void",
        "name": "SetIntAttr"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "entindex"
    }],
    "C_DOTA_BaseNPC_Hero": [{
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetAgility"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetIntellect"
    }, {
        "desc": "",
        "func": "()",
        "return": "float",
        "name": "GetStrength"
    }],
    "CScriptParticleManager": [{
        "desc": "创建一个新的粒子特效",
        "func": "( string_1, int_2, handle_3 )",
        "return": "int",
        "name": "CreateParticle"
    }, {
        "desc": "创建一个只对指定玩家播放的粒子特效",
        "func": "( string_1, int_2, handle_3, handle_4 )",
        "return": "int",
        "name": "CreateParticleForPlayer"
    }, {
        "desc": "创建一个仅为某方队伍播放的粒子特效。",
        "func": "( string_1, int_2, handle_3, int_4 )",
        "return": "int",
        "name": "CreateParticleForTeam"
    }, {
        "desc": "清除粒子。",
        "func": "( int_1, bool_2 )",
        "return": "void",
        "name": "DestroyParticle"
    }, {
        "desc": "",
        "func": "( string_1, handle_2 )",
        "return": "string",
        "name": "GetParticleReplacement"
    }, {
        "desc": "施放指定粒子特效索引号",
        "func": "( int_1 )",
        "return": "void",
        "name": "ReleaseParticleIndex"
    }, {
        "desc": "",
        "func": "( int_1 )",
        "return": "void",
        "name": "SetParticleAlwaysSimulate"
    }, {
        "desc": "设置控制粒子特效的控制点数据",
        "func": "( int_1, int_2, Vector_3 )",
        "return": "void",
        "name": "SetParticleControl"
    }, {
        "desc": "",
        "func": "( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
        "return": "void",
        "name": "SetParticleControlEnt"
    }, {
        "desc": "(int iIndex, int iPoint, Vector vecPosition)",
        "func": "( int_1, int_2, Vector_3 )",
        "return": "void",
        "name": "SetParticleControlFallback"
    }, {
        "desc": "设置粒子的前进运动",
        "func": "( int_1, int_2, Vector_3 )",
        "return": "void",
        "name": "SetParticleControlForward"
    }, {
        "desc": "设置粒子的三向运动。",
        "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
        "return": "void",
        "name": "SetParticleControlOrientation"
    }, {
        "desc": "(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
        "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
        "return": "void",
        "name": "SetParticleControlOrientationFLU"
    }, {
        "desc": "int nfxindex, int nPoint, int nPoint2, float flRadius",
        "func": "( int_1, int_2, int_3, float_4 )",
        "return": "void",
        "name": "SetParticleFoWProperties"
    }, {
        "desc": "int nfxindex, bool bCheckFoW",
        "func": "( int_1, bool_2 )",
        "return": "bool",
        "name": "SetParticleShouldCheckFoW"
    }],
    "CDOTA_Modifier_Lua_Vertical_Motion": [{
        "desc": "当竖直运动被打断时进行回调",
        "func": "()",
        "return": "void",
        "name": "OnVerticalMotionInterrupted"
    }, {
        "desc": "根据给定的间隔对NPC施加竖直运动。",
        "func": "( handle me, float dt )",
        "return": "void",
        "name": "UpdateVerticalMotion"
    }],
    "C_DOTA_Item": [{
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetCurrentCharges"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetInitialCharges"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetItemSlot"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetSecondaryCharges"
    }, {
        "desc": "",
        "func": "()",
        "return": "int",
        "name": "GetShareability"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsAlertableItem"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsCastOnPickup"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsDisassemblable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsDroppable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsInBackpack"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsItem"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsKillable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsMuted"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsPermanent"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsPurchasable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsRecipe"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsRecipeGenerated"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsSellable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "IsStackable"
    }, {
        "desc": "",
        "func": "()",
        "return": "bool",
        "name": "RequiresCharges"
    }],
    "C_BaseFlex": [],
    "C_BaseAnimating": [],
    "CInfoWorldLayer": [{
        "desc": "Hides this layer",
        "func": "()",
        "return": "void",
        "name": "HideWorldLayer"
    }, {
        "desc": "Shows this layer",
        "func": "()",
        "return": "void",
        "name": "ShowWorldLayer"
    }],
    "CEntityScriptFramework": [],
    "CPhysicsComponent": [{
        "name": "ExpensiveInstantRayCast",
        "desc": "进行一个立即（即阻挡）的光线投射，稍后会有handle/queue版本，并不计划实际使用这个！"
    }, {
        "name": "SetTextReplaceString",
        "desc": "设置该子任务的文本取代字符串"
    }, {
        "name": "SetTextReplaceValue",
        "desc": "设置子任务数值"
    }, {
        "name": "GetSubquestByName",
        "desc": "用任务名称找到该任务的子任务"
    }, {
        "name": "RemoveSubquest",
        "desc": "从该任务移除一个子任务"
    }, {
        "name": "SetTextReplaceString",
        "desc": "设置该子任务的文本取代字符串"
    }, {
        "name": "SetTextReplaceValue",
        "desc": "设置子任务数值"
    }, {
        "name": "ClearModifyGoldFilter",
        "desc": "清除脚本过滤器--控制英雄金钱机制的"
    }, {
        "name": "ClearRuneSpawnFilter",
        "desc": "清除脚本过滤器--控制神符刷新的"
    }, {
        "name": "ClearTrackingProjectileFilter",
        "desc": "清除脚本过滤器--控制追踪投射物的"
    }, {
        "name": "ClientLoadGridNav",
        "desc": "通知客户端需要载入网格信息，可用于允许客户端确定允许建筑的区域等"
    }, {
        "name": "GetAlwaysShowPlayerNames",
        "desc": ""
    }, {
        "name": "GetAlwaysShowPlayerInventory",
        "desc": "返回是否不论任何单位被选中，始终在HUD上显示英雄的物品库存"
    }, {
        "name": "GetAnnouncerDisabled",
        "desc": "返回游戏内播音员是否被禁用"
    }, {
        "name": "GetCameraDistanceOverride",
        "desc": "返回是否设置摄像机距离Dota内的默认值为1134"
    }, {
        "name": "GetCustomBuybackCooldownEnabled",
        "desc": "返回是否允许自定义的买活CD"
    }, {
        "name": "GetCustomBuybackCostEnabled",
        "desc": "返回是否允许自定义的买活金钱"
    }, {
        "name": "GetCustomHeroMaxLevel",
        "desc": "返回是否允许改变英雄的最高等级（默认25）"
    }, {
        "name": "GetFixedRespawnTime",
        "desc": "返回是否返回固定的复活时间"
    }, {
        "name": "GetFogOfWarDisabled",
        "desc": "返回是否关闭/开启战争迷雾"
    }, {
        "name": "GetGoldSoundDisabled",
        "desc": "返回是否开启/关闭获得金钱时的音效"
    }, {
        "name": "GetMaximumAttackSpeed",
        "desc": "获取单位的最大攻击速度"
    }, {
        "name": "GetMinimumAttackSpeed",
        "desc": "获取单位的最小攻击速度"
    }, {
        "name": "GetRecommendedItemsDisabled",
        "desc": "返回是否开启/关闭推荐出装在商店中的显示"
    }, {
        "name": "GetStashPurchasingDisabled",
        "desc": "返回是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
    }, {
        "name": "GetStickyItemDisabled",
        "desc": "返回是否隐藏快速购买处的物品"
    }, {
        "name": "GetTopBarTeamValuesOverride",
        "desc": "返回是否覆盖游戏界面顶部的队伍比分"
    }, {
        "name": "GetTopBarTeamValuesVisible",
        "desc": "返回是否关闭/开启游戏界面顶部的队伍比分"
    }, {
        "name": "GetTowerBackdoorProtectionEnabled",
        "desc": "返回是否启用/禁用偷塔保护"
    }, {
        "name": "GetUseCustomHeroLevels",
        "desc": "返回自定义经验机制是否被使用"
    }, {
        "name": "IsBuybackEnabled",
        "desc": "返回是否启用/禁用买活"
    }, {
        "name": "SetAbilityTuningValueFilter",
        "desc": "设置一个过滤器，用来控制技能所用到的调整值(修改数据table并返回True来使用新值，,返回False来使用旧值)"
    }, {
        "name": "SetAlwaysShowPlayerNames",
        "desc": ""
    }, {
        "name": "SetAlwaysShowPlayerInventory",
        "desc": "不论任何单位被选中，始终在HUD上显示英雄的物品库存"
    }, {
        "name": "SetAnnouncerDisabled",
        "desc": "禁用播音员"
    }, {
        "name": "SetBotsAlwaysPushWithHuman",
        "desc": "设置Bot玩家是否总是跟从人类玩家进行推进"
    }, {
        "name": "SetBotsInLateGame",
        "desc": "Setifbotsshouldenabletheirlategamebehavior."
    }, {
        "name": "SetBotsMaxPushTier",
        "desc": "设置Bot玩家将推进到哪一级别的防御塔（-1代表不推进）"
    }, {
        "name": "SetBotThinkingEnabled",
        "desc": "允许/禁止机器人思考，需要与DotaPvP高度相似的三路线地图、商店等"
    }, {
        "name": "SetBountyRunePickupFilter",
        "desc": "设置一个过滤器，用来控制触发赏金符时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetBuybackEnabled",
        "desc": "完全允许/禁止买活"
    }, {
        "name": "SetCameraDistanceOverride",
        "desc": "设置默认的镜头距离Dota默认为1134"
    }, {
        "name": "SetCustomBuybackCooldownEnabled",
        "desc": "开启该选项来允许自定义买活冷却时间"
    }, {
        "name": "SetCustomBuybackCostEnabled",
        "desc": "开启该选项来允许自定义买活花费"
    }, {
        "name": "SetCustomGameForceHero",
        "desc": "强制单人游戏英雄的选择"
    }, {
        "name": "SetCustomHeroMaxLevel",
        "desc": "定义最大英雄等级（默认为25）"
    }, {
        "name": "SetCustomXPRequiredToReachNextLevel",
        "desc": "定义英雄经验值表(table)"
    }, {
        "name": "SetDamageFilter",
        "desc": "设置一个过滤器，用来控制单位受到伤害时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetExecuteOrderFilter",
        "desc": "设置一个过滤器，用来控制单位捡起物品时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetFixedRespawnTime",
        "desc": "Setsthedotarespawntime.-1fordefaultbehavior"
    }, {
        "name": "SetFogOfWarDisabled",
        "desc": "开关战争迷雾"
    }, {
        "name": "SetFountainConstantManaRegen",
        "desc": "设定泉水给予的固定魔法的恢复速率(默认为-1)"
    }, {
        "name": "SetFountainPercentageHealthRegen",
        "desc": "设定泉水给予的的百分比生命恢复速率(默认为-1)"
    }, {
        "name": "SetFountainPercentageManaRegen",
        "desc": "设定泉水给予的百分比魔法恢复速率(默认为-1)"
    }, {
        "name": "SetGoldSoundDisabled",
        "desc": "是否禁止获取金钱时的声音提示"
    }, {
        "name": "SetHUDVisible",
        "desc": "设置HUD元素是否可见"
    }, {
        "name": "SetItemAddedToInventoryFilter",
        "desc": "设置一个过滤器，用来控制物品被放入物品栏时的行为。"
    }, {
        "name": "SetLoseGoldOnDeath",
        "desc": "设置禁用死亡时损失金钱"
    }, {
        "name": "SetMaximumAttackSpeed",
        "desc": "设置单位的最大攻击速度"
    }, {
        "name": "SetMinimumAttackSpeed",
        "desc": "设置单位的最小攻击速度"
    }, {
        "name": "SetModifierGainedFilter",
        "desc": "设置一个过滤器，用来控制Modifier的获得,返回Flase来删除Modifier"
    }, {
        "name": "SetModifyExperienceFilter",
        "desc": "设置一个过滤器，用来控制英雄经验值被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetModifyGoldFilter",
        "desc": "设置一个过滤器，用来控制英雄的金钱被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetOverrideSelectionEntity",
        "desc": "覆盖默认选择实体，替代所有玩家的英雄"
    }, {
        "name": "SetRecommendedItemsDisabled",
        "desc": "是否禁止显示商店中的推荐购买物品"
    }, {
        "name": "SetRemoveIllusionsOnDeath",
        "desc": "使幻象死亡时立即消失，而不是延迟数秒"
    }, {
        "name": "SetRuneEnabled",
        "desc": "设定某种神符是否启用"
    }, {
        "name": "SetRuneSpawnFilter",
        "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetStashPurchasingDisabled",
        "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
    }, {
        "name": "SetStickyItemDisabled",
        "desc": "隐藏快速购买处的物品"
    }, {
        "name": "SetTopBarTeamValue",
        "desc": "设置顶端的队伍数值"
    }, {
        "name": "SetTopBarTeamValuesOverride",
        "desc": "是否覆盖顶端的队伍数值"
    }, {
        "name": "SetTopBarTeamValuesVisible",
        "desc": "开关顶端的队伍数值"
    }, {
        "name": "SetTowerBackdoorProtectionEnabled",
        "desc": "开关偷塔保护"
    }, {
        "name": "SetTrackingProjectileFilter",
        "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetUnseenFogOfWarEnabled",
        "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖"
    }, {
        "name": "SetUseCustomHeroLevels",
        "desc": "开关自定义英雄英雄经验表，该表必须提前被定义"
    }, {
        "name": "SetBaseAgility",
        "desc": "设置基础敏捷"
    }, {
        "name": "SetBaseIntellect",
        "desc": "设置基础智力"
    }, {
        "name": "SetBaseStrength",
        "desc": "设置基础力量"
    }, {
        "name": "SetBotDifficulty",
        "desc": "设置人机对战的难度。"
    }, {
        "name": "SetBuybackCooldownTime",
        "desc": "设置买活冷却时间"
    }, {
        "name": "SetBuyBackDisabledByReapersScythe",
        "desc": "设置是否被死神镰刀禁止买活"
    }, {
        "name": "SetBuybackGoldLimitTime",
        "desc": "设置买活后金钱惩罚时间"
    }, {
        "name": "SetCustomDeathXP",
        "desc": "GameRulesbooleanmustbesetforthistowork!}}"
    }, {
        "name": "SetGold",
        "desc": "设置英雄拥有者的金钱"
    }, {
        "name": "SetPlayerID",
        "desc": ""
    }, {
        "name": "SetPrimaryAttribute",
        "desc": "设置英雄的主属性值。"
    }, {
        "name": "SetRespawnPosition",
        "desc": ""
    }, {
        "name": "SetRespawnsDisabled",
        "desc": "禁止英雄复活。"
    }, {
        "name": "SetTimeUntilRespawn",
        "desc": ""
    }, {
        "name": "ShouldDoFlyHeightVisual",
        "desc": ""
    }, {
        "name": "SpendGold",
        "desc": "参数:int金钱,int原因"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }, {
        "name": "UpgradeAbility",
        "desc": "升级指定技能，需要英雄拥有该技能和技能点"
    }, {
        "name": "WillReincarnate",
        "desc": ""
    }, {
        "name": "GetOpposingTeamNumber",
        "desc": ""
    }, {
        "name": "GetPaddedCollisionRadius",
        "desc": "获取单位碰撞体积半径。"
    }, {
        "name": "GetPercentageBasedManaRegen",
        "desc": "获取基础魔力恢复值百分比。"
    }, {
        "name": "GetPhysicalArmorBaseValue",
        "desc": "返回基础护甲值。"
    }, {
        "name": "GetPhysicalArmorValue",
        "desc": "返回当前的护甲值。"
    }, {
        "name": "GetPlayerOwner",
        "desc": "获取拥有此单位的玩家实体。"
    }, {
        "name": "GetPlayerOwnerID",
        "desc": "获取拥有此单位的玩家ID。"
    }, {
        "name": "GetProjectileSpeed",
        "desc": ""
    }, {
        "name": "GetRangeToUnit",
        "desc": ""
    }, {
        "name": "GetSecondsPerAttack",
        "desc": ""
    }, {
        "name": "GetStatsBasedManaRegen",
        "desc": "获取因智慧而增加的魔法恢复值。"
    }, {
        "name": "GetTeamNumber",
        "desc": "获取该单位所属的队伍ID。"
    }, {
        "name": "GetTotalPurchasedUpgradeGoldCost",
        "desc": "获取用在升级的金钱。"
    }, {
        "name": "GetUnitLabel",
        "desc": ""
    }, {
        "name": "GetUnitName",
        "desc": "获取单位名称。"
    }, {
        "name": "GiveMana",
        "desc": "给予此单位指定的魔法值。(Giffmemana!)"
    }, {
        "name": "HasAbility",
        "desc": "以技能名称搜寻该单位是否拥有此技能。"
    }, {
        "name": "HasAttackCapability",
        "desc": ""
    }, {
        "name": "HasFlyingVision",
        "desc": ""
    }, {
        "name": "HasFlyMovementCapability",
        "desc": ""
    }, {
        "name": "HasGroundMovementCapability",
        "desc": ""
    }, {
        "name": "HasInventory",
        "desc": ""
    }, {
        "name": "HasItemInInventory",
        "desc": "以物品名称搜寻该单位是否拥有此物品。"
    }, {
        "name": "HasModifier",
        "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
    }, {
        "name": "HasMovementCapability",
        "desc": ""
    }, {
        "name": "HasScepter",
        "desc": ""
    }, {
        "name": "Heal",
        "desc": "治疗该单位。"
    }, {
        "name": "Hold",
        "desc": "命令单位在原地待命。"
    }, {
        "name": "Interrupt",
        "desc": ""
    }, {
        "name": "InterruptChannel",
        "desc": ""
    }, {
        "name": "InterruptMotionControllers",
        "desc": "Parameterbooleandeterminesfindingclearspace."
    }, {
        "name": "IsAlive",
        "desc": "此单位是否还活着?"
    }, {
        "name": "IsAncient",
        "desc": "该生物是否为远古野怪?"
    }, {
        "name": "IsAttackImmune",
        "desc": ""
    }, {
        "name": "IsAttacking",
        "desc": ""
    }, {
        "name": "IsAttackingEntity",
        "desc": ""
    }, {
        "name": "IsBlind",
        "desc": ""
    }, {
        "name": "IsBlockDisabled",
        "desc": ""
    }, {
        "name": "IsCommandRestricted",
        "desc": ""
    }, {
        "name": "IsControllableByAnyPlayer",
        "desc": "该单位是否为非Bot玩家所控制?"
    }, {
        "name": "IsCreature",
        "desc": "此单位是否为怪物类型单位?"
    }, {
        "name": "IsDeniable",
        "desc": ""
    }, {
        "name": "IsDisarmed",
        "desc": ""
    }, {
        "name": "IsDominated",
        "desc": ""
    }, {
        "name": "IsEvadeDisabled",
        "desc": ""
    }, {
        "name": "IsFrozen",
        "desc": ""
    }, {
        "name": "IsHardDisarmed",
        "desc": ""
    }, {
        "name": "IsHero",
        "desc": "此单位是否为英雄或英雄幻象?"
    }, {
        "name": "IsHexed",
        "desc": ""
    }, {
        "name": "IsIdle",
        "desc": "该生物是否处于闲置状态?"
    }, {
        "name": "IsIllusion",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsInvisible",
        "desc": ""
    }, {
        "name": "IsInvulnerable",
        "desc": ""
    }, {
        "name": "IsLowAttackPriority",
        "desc": ""
    }, {
        "name": "IsMagicImmune",
        "desc": "该单位是否魔法免疫?"
    }, {
        "name": "IsMechanical",
        "desc": "该单位是否为机械单位?"
    }, {
        "name": "IsMovementImpaired",
        "desc": ""
    }, {
        "name": "IsMuted",
        "desc": ""
    }, {
        "name": "IsNeutralUnitType",
        "desc": "该单位是否为野怪?"
    }, {
        "name": "IsNightmared",
        "desc": ""
    }, {
        "name": "IsOpposingTeam",
        "desc": ""
    }, {
        "name": "IsOutOfGame",
        "desc": ""
    }, {
        "name": "IsOwnedByAnyPlayer",
        "desc": "该单位是否为非Bot之玩家所有?"
    }, {
        "name": "IsPhantom",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsPhantomBlocker",
        "desc": ""
    }, {
        "name": "IsPhased",
        "desc": "是否在相位状态?"
    }, {
        "name": "IsPositionInRange",
        "desc": "是否在某点的范围内"
    }, {
        "name": "IsRangedAttacker",
        "desc": "该单位攻击类型是否为远程攻击?"
    }, {
        "name": "IsRealHero",
        "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
    }, {
        "name": "IsRooted",
        "desc": ""
    }, {
        "name": "IsSilenced",
        "desc": "该单位是否被沉默?"
    }, {
        "name": "IsSoftDisarmed",
        "desc": ""
    }, {
        "name": "IsSpeciallyDeniable",
        "desc": ""
    }, {
        "name": "IsStunned",
        "desc": "该单位是否被晕眩了?"
    }, {
        "name": "IsSummoned",
        "desc": "此单位是否为召唤物?"
    }, {
        "name": "IsTower",
        "desc": "此单位是否为塔?"
    }, {
        "name": "IsUnableToMiss",
        "desc": ""
    }, {
        "name": "IsUnselectable",
        "desc": ""
    }, {
        "name": "Kill",
        "desc": "杀死一个单位，参数为使用的技能与攻击者。"
    }, {
        "name": "MakeIllusion",
        "desc": ""
    }, {
        "name": "MakePhantomBlocker",
        "desc": ""
    }, {
        "name": "MakeVisibleDueToAttack",
        "desc": ""
    }, {
        "name": "MakeVisibleToTeam",
        "desc": ""
    }, {
        "name": "ManageModelChanges",
        "desc": ""
    }, {
        "name": "ModifyHealth",
        "desc": "设置血量为所指定的值"
    }, {
        "name": "MoveToNPC",
        "desc": "移动至指定的单位。"
    }, {
        "name": "MoveToNPCToGiveItem",
        "desc": "将身上的物品丢给指定的单位。"
    }, {
        "name": "MoveToPosition",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToPositionAggressive",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToTargetToAttack",
        "desc": "移动至指定的单位，并且发动攻击。"
    }, {
        "name": "NoHealthBar",
        "desc": ""
    }, {
        "name": "NoTeamMoveTo",
        "desc": ""
    }, {
        "name": "NoTeamSelect",
        "desc": ""
    }, {
        "name": "NotifyWearablesOfModelChange",
        "desc": "通知模型的可穿戴性发生了改变。"
    }, {
        "name": "NotOnMinimap",
        "desc": ""
    }, {
        "name": "NotOnMinimapForEnemies",
        "desc": ""
    }, {
        "name": "NoUnitCollision",
        "desc": ""
    }, {
        "name": "PassivesDisabled",
        "desc": ""
    }, {
        "name": "PerformAttack",
        "desc": "对一单位执行攻击。"
    }, {
        "name": "PickupDroppedItem",
        "desc": "捡起掉落的物品。"
    }, {
        "name": "PickupRune",
        "desc": "捡起神符。"
    }, {
        "name": "ProvidesVision",
        "desc": ""
    }, {
        "name": "Purge",
        "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
    }, {
        "name": "ReduceMana",
        "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
    }, {
        "name": "RemoveAbility",
        "desc": "以技能名称移除该单位相应的技能。"
    }, {
        "name": "RemoveGesture",
        "desc": "移除某个动作。"
    }, {
        "name": "RemoveHorizontalMotionController",
        "desc": "移除水平方向上的运动控制器。"
    }, {
        "name": "RemoveItem",
        "desc": "将该单位库存中的过期物品移除。"
    }, {
        "name": "RemoveModifierByName",
        "desc": "以名称移除修改器。"
    }, {
        "name": "RemoveModifierByNameAndCaster",
        "desc": "以施法者与修改器名称移除修改器。"
    }, {
        "name": "RemoveNoDraw",
        "desc": "Removethenodrawflag."
    }, {
        "name": "RemoveVerticalMotionController",
        "desc": "移除垂直方向上的运动控制器。"
    }, {
        "name": "RespawnUnit",
        "desc": "复活该单位。"
    }, {
        "name": "TakeItem",
        "desc": "隐藏物品"
    }, {
        "name": "SellItem",
        "desc": "卖出该单位的物品。"
    }, {
        "name": "SetAbilityByIndex",
        "desc": "改变技能Index"
    }, {
        "name": "SetAcquisitionRange",
        "desc": "Setsacquisitionrange"
    }, {
        "name": "SetAdditionalBattleMusicWeight",
        "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
    }, {
        "name": "SetAggroTarget",
        "desc": "将这个单位的仇恨目标设为某个单位。"
    }, {
        "name": "SetAttackCapability",
        "desc": ""
    }, {
        "name": "SetAttacking",
        "desc": ""
    }, {
        "name": "SetBaseAttackTime",
        "desc": ""
    }, {
        "name": "SetBaseDamageMax",
        "desc": "设置基础最大攻击力。"
    }, {
        "name": "SetBaseDamageMin",
        "desc": "设置基础最小攻击力。"
    }, {
        "name": "SetBaseHealthRegen",
        "desc": ""
    }, {
        "name": "SetBaseMagicalResistanceValue",
        "desc": "设置基础魔法抗性值。"
    }, {
        "name": "SetBaseManaRegen",
        "desc": "设置基础魔力恢复值。"
    }, {
        "name": "SetBaseMaxHealth",
        "desc": "设置基础最大血量。"
    }, {
        "name": "SetBaseMoveSpeed",
        "desc": "设置基础跑速。"
    }, {
        "name": "SetCanSellItems",
        "desc": "设置这个单位是否能出售物品。"
    }, {
        "name": "SetControllableByPlayer",
        "desc": "以玩家ID设置该单位的控制权。"
    }, {
        "name": "SetCursorCastTarget",
        "desc": ""
    }, {
        "name": "SetCursorPosition",
        "desc": ""
    }, {
        "name": "SetCursorTargetingNothing",
        "desc": ""
    }, {
        "name": "SetDayTimeVisionRange",
        "desc": "设置基础的视间视野距离。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetForceAttackTarget",
        "desc": ""
    }, {
        "name": "SetHasInventory",
        "desc": ""
    }, {
        "name": "SetHullRadius",
        "desc": "设置该单位的碰撞半径。"
    }, {
        "name": "SetIdleAcquire",
        "desc": ""
    }, {
        "name": "SetInitialGoalEntity",
        "desc": "设置该单位的初始路径点。"
    }, {
        "name": "SetMana",
        "desc": "设置该单位的魔力值。"
    }, {
        "name": "SetMaximumGoldBounty",
        "desc": "设置该单位的最高赏金。"
    }, {
        "name": "SetMinimumGoldBounty",
        "desc": "设置该单位的最低赏金。"
    }, {
        "name": "SetModifierStackCount",
        "desc": "Setsthestackcountofagivenmodifier."
    }, {
        "name": "SetMoveCapability",
        "desc": ""
    }, {
        "name": "SetMustReachEachGoalEntity",
        "desc": "设置该单位是否要走访每个路径点。"
    }, {
        "name": "SetNeverMoveToClearSpace",
        "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
    }, {
        "name": "SetNightTimeVisionRange",
        "desc": "设置基础夜间视野距离。"
    }, {
        "name": "SetOrigin",
        "desc": "设置单位位置。"
    }, {
        "name": "SetOriginalModel",
        "desc": "设置单位原模型。"
    }, {
        "name": "SetPhysicalArmorBaseValue",
        "desc": "设置基础护甲值。"
    }, {
        "name": "SetRangedProjectileName",
        "desc": ""
    }, {
        "name": "SetRenderAlpha",
        "desc": ""
    }, {
        "name": "SetStolenScepter",
        "desc": ""
    }, {
        "name": "SetUnitName",
        "desc": ""
    }, {
        "name": "ShouldIdleAcquire",
        "desc": ""
    }, {
        "name": "SpendMana",
        "desc": "消耗魔力，可以用在技能消耗或使用物品。"
    }, {
        "name": "StartGesture",
        "desc": "向单位添加给定的动作。"
    }, {
        "name": "StartGestureWithPlaybackRate",
        "desc": "向单位添加给定的动作，带有自定义的动作速度。"
    }, {
        "name": "Stop",
        "desc": "使该单位暂停当前动作。"
    }, {
        "name": "SwapAbilities",
        "desc": "交换两个技能的字段，并设置其是否生效。"
    }, {
        "name": "SwapItems",
        "desc": "交换两个物品的位置。"
    }, {
        "name": "TimeUntilNextAttack",
        "desc": ""
    }, {
        "name": "TriggerModifierDodge",
        "desc": ""
    }, {
        "name": "TriggerSpellAbsorb",
        "desc": "判断传递的技能是否会触发该单位的技能吸收"
    }, {
        "name": "TriggerSpellReflect",
        "desc": "触发类似于清莲宝珠一样的效果。"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }],
    "CToneMapControllerComponent": [{
        "name": "GetBloomScale",
        "desc": "获取该光泽贴图控制器（tonemapcontroller）的泛光缩放（bloomscale)"
    }, {
        "name": "GetMaxExposure",
        "desc": "获取该光泽贴图控制器（tonemapcontroller）的最大曝光（maxexposure）"
    }, {
        "name": "GetMinExposure",
        "desc": "获取该光泽贴图控制器（tonemapcontroller）的最小曝光（minexposure）"
    }, {
        "name": "SetBloomScale",
        "desc": "设置该光泽贴图控制器（tonemapcontroller）的泛光缩放（bloomscale)"
    }, {
        "name": "SetMaxExposure",
        "desc": "设置该光泽贴图控制器（tonemapcontroller）的最大曝光（maxexposure）"
    }, {
        "name": "SetMinExposure",
        "desc": "设置该光泽贴图控制器（tonemapcontroller）的最小曝光（minexposure）"
    }, {
        "name": "GetCustomGameDifficulty",
        "desc": "返回自定义游戏难度。"
    }, {
        "name": "GetCustomGameDifficulty",
        "desc": "返回自定义游戏难度。"
    }, {
        "name": "GetDifficulty",
        "desc": "返回游戏难度"
    }, {
        "name": "GetDOTATime",
        "desc": "返回Dota游戏内的时间。（是否包含赛前时间或负时间）。"
    }, {
        "name": "GetDroppedItem",
        "desc": "获得第X个掉落物品"
    }, {
        "name": "GetGameModeEntity",
        "desc": "设置游戏模式实体"
    }, {
        "name": "GetGameSessionConfigValue",
        "desc": "从会话配置中获取字符串(地图选项)。"
    }, {
        "name": "GetGameTime",
        "desc": "返回游戏开始后经过的秒数，暂停时间不计算在内"
    }, {
        "name": "GetMatchSignoutComplete",
        "desc": "是否已经接受包含回报信息的弹窗"
    }, {
        "name": "GetNianFightStartTime",
        "desc": "获得年兽大战开始时间"
    }, {
        "name": "GetNianTotalDamageTaken",
        "desc": "芳晓活动，获得年兽受到的总伤害"
    }, {
        "name": "GetPlayerCustomGameAccountRecord",
        "desc": "Getstheplayer'scustomgameaccountrecord,asitlookedatthestartofthissession"
    }, {
        "name": "GetTimeOfDay",
        "desc": "获取一天中的时间（游戏时间）"
    }, {
        "name": "IsDaytime",
        "desc": "是否是白天"
    }, {
        "name": "IsGamePaused",
        "desc": "返回游戏是否被暂停了。"
    }, {
        "name": "IsCheatMode",
        "desc": "检测房间是否被设置为允许作弊或sv_cheats1."
    }, {
        "name": "LockCustomGameSetupTeamAssignment",
        "desc": "锁定(true)或解锁(false)队伍分配.。如果队伍分配被锁定，玩家将不再能修改队伍。"
    }, {
        "name": "MakeTeamLose",
        "desc": "使指定队伍失败"
    }, {
        "name": "NumDroppedItems",
        "desc": "返回当前掉落在地面的物品数量"
    }, {
        "name": "PlayerHasCustomGameHostPrivileges",
        "desc": "返回玩家是否具有主机特权(洗牌等)。"
    }, {
        "name": "Playtesting_UpdateAddOnKeyValues",
        "desc": "从磁盘数据中更新自定义英雄、单位、技能的键值"
    }, {
        "name": "ResetDefeated",
        "desc": "遗迹摧毁后重新开始"
    }, {
        "name": "ResetToHeroSelection",
        "desc": "重新开始时选择英雄"
    }, {
        "name": "SendCustomMessage",
        "desc": "在左侧文本框显示一行文本，通常用来提示死亡、反补队友、买活等信息。使用严格HTML格式(>;br<;,>;u<;,>;font<;)"
    }, {
        "name": "SendCustomMessageToTeam",
        "desc": "代表一个玩家向某个队伍发送信息。"
    }, {
        "name": "SetCreepMinimapIconScale",
        "desc": "在小地图上缩放中立生物图标"
    }, {
        "name": "SetCustomGameAccountRecordSaveFunction",
        "desc": "向句柄设置一个回调来保存玩家的账户信息。(回调传递了玩家的ID，并应该返回一个简单的table)。"
    }, {
        "name": "SetCustomGameDifficulty",
        "desc": "设置自定义游戏模式难度等级"
    }, {
        "name": "SetCustomGameEndDelay",
        "desc": "设置游戏完全结束前的等待时间。"
    }, {
        "name": "SetCustomGameSetupAutoLaunchDelay",
        "desc": "设置自动开始前的等待时间。"
    }, {
        "name": "SetCustomGameSetupRemainingTime",
        "desc": "设置游戏的设置时间，0=立即开始-1=等待直到设置完毕。"
    }, {
        "name": "SetCustomGameSetupTimeout",
        "desc": "设置设置(赛前)阶段的超时。0=立即开始,-1=永远(直到FinishCustomGameSetup被调用)"
    }, {
        "name": "SetCustomGameTeamMaxPlayers",
        "desc": "在设置阶段，设置某方队伍是否还能被选择加入"
    }, {
        "name": "SetCustomVictoryMessage",
        "desc": "设置胜利信息。"
    }, {
        "name": "SetCustomVictoryMessageDuration",
        "desc": "设置自订胜利信息将会持续多长时间。"
    }, {
        "name": "SetFirstBloodActive",
        "desc": "设置第一滴血是否已经产生"
    }, {
        "name": "SetGameWinner",
        "desc": "使指定队伍胜利"
    }, {
        "name": "SetGoldPerTick",
        "desc": "设置每个时间间隔获得的金币"
    }, {
        "name": "SetGoldTickTime",
        "desc": "设置获得金币的时间周期"
    }, {
        "name": "SetHeroMinimapIconScale",
        "desc": "设置小地图英雄图标尺寸"
    }, {
        "name": "SetHeroRespawnEnabled",
        "desc": "设置是否使用默认英雄复活规则"
    }, {
        "name": "SetHeroSelectionTime",
        "desc": "设置选择英雄的时间"
    }, {
        "name": "SetHideKillMessageHeaders",
        "desc": "设置是否隐藏击杀提示。"
    }, {
        "name": "SetNianFightStartTime",
        "desc": "设置年兽大战开始时间"
    }, {
        "name": "SetOverlayHealthBarUnit",
        "desc": "在前端蒙版生命条上显示单位生命值"
    }, {
        "name": "SetPostGameTime",
        "desc": "设置在结束游戏后服务器与玩家断线前的时间"
    }, {
        "name": "SetPreGameTime",
        "desc": "设置选择英雄与开始游戏之间的时间"
    }, {
        "name": "SetRuneMinimapIconScale",
        "desc": "缩放小地图神符图标"
    }, {
        "name": "SetRuneSpawnTime",
        "desc": "设置神符刷新时间"
    }, {
        "name": "SetSafeToLeave",
        "desc": "标记游戏可安全离开"
    }, {
        "name": "SetSameHeroSelectionEnabled",
        "desc": "允许选择重复英雄"
    }, {
        "name": "SetStartingGold",
        "desc": "设置初始金钱。"
    }, {
        "name": "SetTimeOfDay",
        "desc": "设置一天中的时间（游戏时间）"
    }, {
        "name": "SetTreeRegrowTime",
        "desc": "设置树重新生长的时间（秒）"
    }, {
        "name": "SetUseBaseGoldBountyOnHeroes",
        "desc": "英雄将使用基础NPC规则来决定赏金，而不是DOTA指定规则"
    }, {
        "name": "SetUseCustomHeroXPValues",
        "desc": "允许英雄提供指定数目的经验值（必须先设置）"
    }, {
        "name": "SetUseUniversalShopMode",
        "desc": "为真时，所有物品当处于任意商店范围内时都能购买到，包括秘密商店物品"
    }, {
        "name": "State_Get",
        "desc": "获取当前游戏规则状态"
    }, {
        "name": "SetRecommendedItemsDisabled",
        "desc": "是否禁止显示商店中的推荐购买物品"
    }, {
        "name": "SetRemoveIllusionsOnDeath",
        "desc": "使幻象死亡时立即消失，而不是延迟数秒"
    }, {
        "name": "SetRuneEnabled",
        "desc": "设定某种神符是否启用"
    }, {
        "name": "SetRuneSpawnFilter",
        "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetStashPurchasingDisabled",
        "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品"
    }, {
        "name": "SetStickyItemDisabled",
        "desc": "隐藏快速购买处的物品"
    }, {
        "name": "SetTopBarTeamValue",
        "desc": "设置顶端的队伍数值"
    }, {
        "name": "SetTopBarTeamValuesOverride",
        "desc": "是否覆盖顶端的队伍数值"
    }, {
        "name": "SetTopBarTeamValuesVisible",
        "desc": "开关顶端的队伍数值"
    }, {
        "name": "SetTowerBackdoorProtectionEnabled",
        "desc": "开关偷塔保护"
    }, {
        "name": "SetTrackingProjectileFilter",
        "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)"
    }, {
        "name": "SetUnseenFogOfWarEnabled",
        "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖"
    }, {
        "name": "SetUseCustomHeroLevels",
        "desc": "开关自定义英雄英雄经验表，该表必须提前被定义"
    }, {
        "name": "SetBaseAgility",
        "desc": "设置基础敏捷"
    }, {
        "name": "SetBaseIntellect",
        "desc": "设置基础智力"
    }, {
        "name": "SetBaseStrength",
        "desc": "设置基础力量"
    }, {
        "name": "SetBotDifficulty",
        "desc": "设置人机对战的难度。"
    }, {
        "name": "SetBuybackCooldownTime",
        "desc": "设置买活冷却时间"
    }, {
        "name": "SetBuyBackDisabledByReapersScythe",
        "desc": "设置是否被死神镰刀禁止买活"
    }, {
        "name": "SetBuybackGoldLimitTime",
        "desc": "设置买活后金钱惩罚时间"
    }, {
        "name": "SetCustomDeathXP",
        "desc": "GameRulesbooleanmustbesetforthistowork!}}"
    }, {
        "name": "SetGold",
        "desc": "设置英雄拥有者的金钱"
    }, {
        "name": "SetPlayerID",
        "desc": ""
    }, {
        "name": "SetPrimaryAttribute",
        "desc": "设置英雄的主属性值。"
    }, {
        "name": "SetRespawnPosition",
        "desc": ""
    }, {
        "name": "SetRespawnsDisabled",
        "desc": "禁止英雄复活。"
    }, {
        "name": "SetTimeUntilRespawn",
        "desc": ""
    }, {
        "name": "ShouldDoFlyHeightVisual",
        "desc": ""
    }, {
        "name": "SpendGold",
        "desc": "参数:int金钱,int原因"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }, {
        "name": "UpgradeAbility",
        "desc": "升级指定技能，需要英雄拥有该技能和技能点"
    }, {
        "name": "WillReincarnate",
        "desc": ""
    }, {
        "name": "GetOpposingTeamNumber",
        "desc": ""
    }, {
        "name": "GetPaddedCollisionRadius",
        "desc": "获取单位碰撞体积半径。"
    }, {
        "name": "GetPercentageBasedManaRegen",
        "desc": "获取基础魔力恢复值百分比。"
    }, {
        "name": "GetPhysicalArmorBaseValue",
        "desc": "返回基础护甲值。"
    }, {
        "name": "GetPhysicalArmorValue",
        "desc": "返回当前的护甲值。"
    }, {
        "name": "GetPlayerOwner",
        "desc": "获取拥有此单位的玩家实体。"
    }, {
        "name": "GetPlayerOwnerID",
        "desc": "获取拥有此单位的玩家ID。"
    }, {
        "name": "GetProjectileSpeed",
        "desc": ""
    }, {
        "name": "GetRangeToUnit",
        "desc": ""
    }, {
        "name": "GetSecondsPerAttack",
        "desc": ""
    }, {
        "name": "GetStatsBasedManaRegen",
        "desc": "获取因智慧而增加的魔法恢复值。"
    }, {
        "name": "GetTeamNumber",
        "desc": "获取该单位所属的队伍ID。"
    }, {
        "name": "GetTotalPurchasedUpgradeGoldCost",
        "desc": "获取用在升级的金钱。"
    }, {
        "name": "GetUnitLabel",
        "desc": ""
    }, {
        "name": "GetUnitName",
        "desc": "获取单位名称。"
    }, {
        "name": "GiveMana",
        "desc": "给予此单位指定的魔法值。(Giffmemana!)"
    }, {
        "name": "HasAbility",
        "desc": "以技能名称搜寻该单位是否拥有此技能。"
    }, {
        "name": "HasAttackCapability",
        "desc": ""
    }, {
        "name": "HasFlyingVision",
        "desc": ""
    }, {
        "name": "HasFlyMovementCapability",
        "desc": ""
    }, {
        "name": "HasGroundMovementCapability",
        "desc": ""
    }, {
        "name": "HasInventory",
        "desc": ""
    }, {
        "name": "HasItemInInventory",
        "desc": "以物品名称搜寻该单位是否拥有此物品。"
    }, {
        "name": "HasModifier",
        "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
    }, {
        "name": "HasMovementCapability",
        "desc": ""
    }, {
        "name": "HasScepter",
        "desc": ""
    }, {
        "name": "Heal",
        "desc": "治疗该单位。"
    }, {
        "name": "Hold",
        "desc": "命令单位在原地待命。"
    }, {
        "name": "Interrupt",
        "desc": ""
    }, {
        "name": "InterruptChannel",
        "desc": ""
    }, {
        "name": "InterruptMotionControllers",
        "desc": "Parameterbooleandeterminesfindingclearspace."
    }, {
        "name": "IsAlive",
        "desc": "此单位是否还活着?"
    }, {
        "name": "IsAncient",
        "desc": "该生物是否为远古野怪?"
    }, {
        "name": "IsAttackImmune",
        "desc": ""
    }, {
        "name": "IsAttacking",
        "desc": ""
    }, {
        "name": "IsAttackingEntity",
        "desc": ""
    }, {
        "name": "IsBlind",
        "desc": ""
    }, {
        "name": "IsBlockDisabled",
        "desc": ""
    }, {
        "name": "IsCommandRestricted",
        "desc": ""
    }, {
        "name": "IsControllableByAnyPlayer",
        "desc": "该单位是否为非Bot玩家所控制?"
    }, {
        "name": "IsCreature",
        "desc": "此单位是否为怪物类型单位?"
    }, {
        "name": "IsDeniable",
        "desc": ""
    }, {
        "name": "IsDisarmed",
        "desc": ""
    }, {
        "name": "IsDominated",
        "desc": ""
    }, {
        "name": "IsEvadeDisabled",
        "desc": ""
    }, {
        "name": "IsFrozen",
        "desc": ""
    }, {
        "name": "IsHardDisarmed",
        "desc": ""
    }, {
        "name": "IsHero",
        "desc": "此单位是否为英雄或英雄幻象?"
    }, {
        "name": "IsHexed",
        "desc": ""
    }, {
        "name": "IsIdle",
        "desc": "该生物是否处于闲置状态?"
    }, {
        "name": "IsIllusion",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsInvisible",
        "desc": ""
    }, {
        "name": "IsInvulnerable",
        "desc": ""
    }, {
        "name": "IsLowAttackPriority",
        "desc": ""
    }, {
        "name": "IsMagicImmune",
        "desc": "该单位是否魔法免疫?"
    }, {
        "name": "IsMechanical",
        "desc": "该单位是否为机械单位?"
    }, {
        "name": "IsMovementImpaired",
        "desc": ""
    }, {
        "name": "IsMuted",
        "desc": ""
    }, {
        "name": "IsNeutralUnitType",
        "desc": "该单位是否为野怪?"
    }, {
        "name": "IsNightmared",
        "desc": ""
    }, {
        "name": "IsOpposingTeam",
        "desc": ""
    }, {
        "name": "IsOutOfGame",
        "desc": ""
    }, {
        "name": "IsOwnedByAnyPlayer",
        "desc": "该单位是否为非Bot之玩家所有?"
    }, {
        "name": "IsPhantom",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsPhantomBlocker",
        "desc": ""
    }, {
        "name": "IsPhased",
        "desc": "是否在相位状态?"
    }, {
        "name": "IsPositionInRange",
        "desc": "是否在某点的范围内"
    }, {
        "name": "IsRangedAttacker",
        "desc": "该单位攻击类型是否为远程攻击?"
    }, {
        "name": "IsRealHero",
        "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
    }, {
        "name": "IsRooted",
        "desc": ""
    }, {
        "name": "IsSilenced",
        "desc": "该单位是否被沉默?"
    }, {
        "name": "IsSoftDisarmed",
        "desc": ""
    }, {
        "name": "IsSpeciallyDeniable",
        "desc": ""
    }, {
        "name": "IsStunned",
        "desc": "该单位是否被晕眩了?"
    }, {
        "name": "IsSummoned",
        "desc": "此单位是否为召唤物?"
    }, {
        "name": "IsTower",
        "desc": "此单位是否为塔?"
    }, {
        "name": "IsUnableToMiss",
        "desc": ""
    }, {
        "name": "IsUnselectable",
        "desc": ""
    }, {
        "name": "Kill",
        "desc": "杀死一个单位，参数为使用的技能与攻击者。"
    }, {
        "name": "MakeIllusion",
        "desc": ""
    }, {
        "name": "MakePhantomBlocker",
        "desc": ""
    }, {
        "name": "MakeVisibleDueToAttack",
        "desc": ""
    }, {
        "name": "MakeVisibleToTeam",
        "desc": ""
    }, {
        "name": "ManageModelChanges",
        "desc": ""
    }, {
        "name": "ModifyHealth",
        "desc": "设置血量为所指定的值"
    }, {
        "name": "MoveToNPC",
        "desc": "移动至指定的单位。"
    }, {
        "name": "MoveToNPCToGiveItem",
        "desc": "将身上的物品丢给指定的单位。"
    }, {
        "name": "MoveToPosition",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToPositionAggressive",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToTargetToAttack",
        "desc": "移动至指定的单位，并且发动攻击。"
    }, {
        "name": "NoHealthBar",
        "desc": ""
    }, {
        "name": "NoTeamMoveTo",
        "desc": ""
    }, {
        "name": "NoTeamSelect",
        "desc": ""
    }, {
        "name": "NotifyWearablesOfModelChange",
        "desc": "通知模型的可穿戴性发生了改变。"
    }, {
        "name": "NotOnMinimap",
        "desc": ""
    }, {
        "name": "NotOnMinimapForEnemies",
        "desc": ""
    }, {
        "name": "NoUnitCollision",
        "desc": ""
    }, {
        "name": "PassivesDisabled",
        "desc": ""
    }, {
        "name": "PerformAttack",
        "desc": "对一单位执行攻击。"
    }, {
        "name": "PickupDroppedItem",
        "desc": "捡起掉落的物品。"
    }, {
        "name": "PickupRune",
        "desc": "捡起神符。"
    }, {
        "name": "ProvidesVision",
        "desc": ""
    }, {
        "name": "Purge",
        "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
    }, {
        "name": "ReduceMana",
        "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
    }, {
        "name": "RemoveAbility",
        "desc": "以技能名称移除该单位相应的技能。"
    }, {
        "name": "RemoveGesture",
        "desc": "移除某个动作。"
    }, {
        "name": "RemoveHorizontalMotionController",
        "desc": "移除水平方向上的运动控制器。"
    }, {
        "name": "RemoveItem",
        "desc": "将该单位库存中的过期物品移除。"
    }, {
        "name": "RemoveModifierByName",
        "desc": "以名称移除修改器。"
    }, {
        "name": "RemoveModifierByNameAndCaster",
        "desc": "以施法者与修改器名称移除修改器。"
    }, {
        "name": "RemoveNoDraw",
        "desc": "Removethenodrawflag."
    }, {
        "name": "RemoveVerticalMotionController",
        "desc": "移除垂直方向上的运动控制器。"
    }, {
        "name": "RespawnUnit",
        "desc": "复活该单位。"
    }, {
        "name": "TakeItem",
        "desc": "隐藏物品"
    }, {
        "name": "SellItem",
        "desc": "卖出该单位的物品。"
    }, {
        "name": "SetAbilityByIndex",
        "desc": "改变技能Index"
    }, {
        "name": "SetAcquisitionRange",
        "desc": "Setsacquisitionrange"
    }, {
        "name": "SetAdditionalBattleMusicWeight",
        "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
    }, {
        "name": "SetAggroTarget",
        "desc": "将这个单位的仇恨目标设为某个单位。"
    }, {
        "name": "SetAttackCapability",
        "desc": ""
    }, {
        "name": "SetAttacking",
        "desc": ""
    }, {
        "name": "SetBaseAttackTime",
        "desc": ""
    }, {
        "name": "SetBaseDamageMax",
        "desc": "设置基础最大攻击力。"
    }, {
        "name": "SetBaseDamageMin",
        "desc": "设置基础最小攻击力。"
    }, {
        "name": "SetBaseHealthRegen",
        "desc": ""
    }, {
        "name": "SetBaseMagicalResistanceValue",
        "desc": "设置基础魔法抗性值。"
    }, {
        "name": "SetBaseManaRegen",
        "desc": "设置基础魔力恢复值。"
    }, {
        "name": "SetBaseMaxHealth",
        "desc": "设置基础最大血量。"
    }, {
        "name": "SetBaseMoveSpeed",
        "desc": "设置基础跑速。"
    }, {
        "name": "SetCanSellItems",
        "desc": "设置这个单位是否能出售物品。"
    }, {
        "name": "SetControllableByPlayer",
        "desc": "以玩家ID设置该单位的控制权。"
    }, {
        "name": "SetCursorCastTarget",
        "desc": ""
    }, {
        "name": "SetCursorPosition",
        "desc": ""
    }, {
        "name": "SetCursorTargetingNothing",
        "desc": ""
    }, {
        "name": "SetDayTimeVisionRange",
        "desc": "设置基础的视间视野距离。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetForceAttackTarget",
        "desc": ""
    }, {
        "name": "SetHasInventory",
        "desc": ""
    }, {
        "name": "SetHullRadius",
        "desc": "设置该单位的碰撞半径。"
    }, {
        "name": "SetIdleAcquire",
        "desc": ""
    }, {
        "name": "SetInitialGoalEntity",
        "desc": "设置该单位的初始路径点。"
    }, {
        "name": "SetMana",
        "desc": "设置该单位的魔力值。"
    }, {
        "name": "SetMaximumGoldBounty",
        "desc": "设置该单位的最高赏金。"
    }, {
        "name": "SetMinimumGoldBounty",
        "desc": "设置该单位的最低赏金。"
    }, {
        "name": "SetModifierStackCount",
        "desc": "Setsthestackcountofagivenmodifier."
    }, {
        "name": "SetMoveCapability",
        "desc": ""
    }, {
        "name": "SetMustReachEachGoalEntity",
        "desc": "设置该单位是否要走访每个路径点。"
    }, {
        "name": "SetNeverMoveToClearSpace",
        "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
    }, {
        "name": "SetNightTimeVisionRange",
        "desc": "设置基础夜间视野距离。"
    }, {
        "name": "SetOrigin",
        "desc": "设置单位位置。"
    }, {
        "name": "SetOriginalModel",
        "desc": "设置单位原模型。"
    }, {
        "name": "SetPhysicalArmorBaseValue",
        "desc": "设置基础护甲值。"
    }, {
        "name": "SetRangedProjectileName",
        "desc": ""
    }, {
        "name": "SetRenderAlpha",
        "desc": ""
    }, {
        "name": "SetStolenScepter",
        "desc": ""
    }, {
        "name": "SetUnitName",
        "desc": ""
    }, {
        "name": "ShouldIdleAcquire",
        "desc": ""
    }, {
        "name": "SpendMana",
        "desc": "消耗魔力，可以用在技能消耗或使用物品。"
    }, {
        "name": "StartGesture",
        "desc": "向单位添加给定的动作。"
    }, {
        "name": "StartGestureWithPlaybackRate",
        "desc": "向单位添加给定的动作，带有自定义的动作速度。"
    }, {
        "name": "Stop",
        "desc": "使该单位暂停当前动作。"
    }, {
        "name": "SwapAbilities",
        "desc": "交换两个技能的字段，并设置其是否生效。"
    }, {
        "name": "SwapItems",
        "desc": "交换两个物品的位置。"
    }, {
        "name": "TimeUntilNextAttack",
        "desc": ""
    }, {
        "name": "TriggerModifierDodge",
        "desc": ""
    }, {
        "name": "TriggerSpellAbsorb",
        "desc": "判断传递的技能是否会触发该单位的技能吸收"
    }, {
        "name": "TriggerSpellReflect",
        "desc": "触发类似于清莲宝珠一样的效果。"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }],
    "CRPG_Unit": [{
        "name": "ActionState",
        "desc": "返回该单位的ActionState物体"
    }, {
        "name": "ClearMovementTarget",
        "desc": "清除移动目标实体或点"
    }, {
        "name": "FindSensedEnemies",
        "desc": "返回该单位视野锥或感应球体内所有敌方单位列表"
    }, {
        "name": "GetMaxSpeed",
        "desc": "返回最大移动速度"
    }, {
        "name": "GetMaxStamina",
        "desc": "返回最大耐力值"
    }, {
        "name": "GetMovementTargetEntity",
        "desc": "返回移动目标实体，如果已经设置移动目标实体"
    }, {
        "name": "GetSensingSphereRange",
        "desc": "返回单位的360度感应球体范围"
    }, {
        "name": "GetSightConeAngle",
        "desc": "返回单位视野锥的夹角"
    }, {
        "name": "GetSightConeRange",
        "desc": "返回单位视野锥的范围"
    }, {
        "name": "GetStamina",
        "desc": "返回当前耐力值"
    }, {
        "name": "GetTurnRate",
        "desc": "返回单位转身速度，单位为度每秒"
    }, {
        "name": "GetUnitName",
        "desc": "返回单位名字"
    }, {
        "name": "GrantItem",
        "desc": "授予单位物品"
    }, {
        "name": "IsBlocking",
        "desc": "单位是否正在格挡（不确定）"
    }, {
        "name": "IsFacing",
        "desc": "参数为（Vector目标点，float允许角度差）如果单位朝向目标角度低于角度差则返还true"
    }, {
        "name": "SetBlocking",
        "desc": "设置单位格挡状态（不确定）"
    }, {
        "name": "SetMaxSpeed",
        "desc": "设置单位最大速度"
    }, {
        "name": "SetMovementTargetEntity",
        "desc": "参数为（目标实体，跟随范围）单位向目标实体移动直到抵达指定范围内"
    }, {
        "name": "SetMovementTargetPosition",
        "desc": "参数为（目标点，跟随范围）单位向目标点移动直到抵达指定范围内"
    }, {
        "name": "SetSensingSphereRange",
        "desc": "设置单位的360度感应球体范围"
    }, {
        "name": "SetSightConeAngle",
        "desc": "设置单位的视野锥夹角"
    }, {
        "name": "SetSightConeRange",
        "desc": "设置单位的视野锥范围"
    }, {
        "name": "SetTurnRate",
        "desc": "设置单位转向速率（度每秒）"
    }, {
        "name": "GetDeathGoldCost",
        "desc": "返回死亡损失金钱"
    }, {
        "name": "GetDeaths",
        "desc": "返回死亡次数"
    }, {
        "name": "GetDenies",
        "desc": "返回反补次数"
    }, {
        "name": "GetGold",
        "desc": "返回该英雄拥有者所有的金钱数量"
    }, {
        "name": "GetGoldBounty",
        "desc": ""
    }, {
        "name": "GetHealthRegen",
        "desc": "返回每秒生命回复，英雄生命回复受到属性影响"
    }, {
        "name": "GetIncreasedAttackSpeed",
        "desc": "返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响"
    }, {
        "name": "GetIntellect",
        "desc": "返回智力值"
    }, {
        "name": "GetIntellectGain",
        "desc": "返回智力成长"
    }, {
        "name": "GetKills",
        "desc": "返回击杀数，数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "GetLastHits",
        "desc": "返回正补数，数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "GetManaRegen",
        "desc": "返回每秒魔法回复，英雄魔法回复受到属性影响"
    }, {
        "name": "GetMostRecentDamageTime",
        "desc": "返回最近一次伤害时间"
    }, {
        "name": "GetMultipleKillCount",
        "desc": "返回多杀计数"
    }, {
        "name": "GetNumAttackers",
        "desc": ""
    }, {
        "name": "GetNumItemsInInventory",
        "desc": "返回玩家拥有的物品数量。"
    }, {
        "name": "GetNumItemsInStash",
        "desc": "返回玩家储藏处内"
    }, {
        "name": "GetPhysicalArmorValue",
        "desc": "返回护甲值，英雄护甲受到属性影响"
    }, {
        "name": "GetPlayerID",
        "desc": "返回英雄拥有者的ID"
    }, {
        "name": "GetPrimaryAttribute",
        "desc": "返回英雄主要属性，0=力量,1=敏捷,2=智力."
    }, {
        "name": "GetPrimaryStatValue",
        "desc": "返回主属性值"
    }, {
        "name": "GetRespawnsDisabled",
        "desc": "返回该英雄是否被禁止复活。"
    }, {
        "name": "GetRespawnTime",
        "desc": "返回复活时间"
    }, {
        "name": "GetStatsBasedManaRegen",
        "desc": "返回属性提供的魔法回复"
    }, {
        "name": "GetStreak",
        "desc": "返回连杀数"
    }, {
        "name": "GetStrength",
        "desc": "返回力量值"
    }, {
        "name": "GetStrengthGain",
        "desc": "返回力量成长"
    }, {
        "name": "GetTimeUntilRespawn",
        "desc": "返回复活所需的时间"
    }, {
        "name": "GetTogglableWearable",
        "desc": "返回物品栏中可佩带（可切换）的物品。"
    }, {
        "name": "HasAnyAvailableInventorySpace",
        "desc": "返回是否有可用物品栏空间"
    }, {
        "name": "HasFlyingVision",
        "desc": "返回是否拥有空中视野"
    }, {
        "name": "HasOwnerAbandoned",
        "desc": ""
    }, {
        "name": "HasRoomForItem",
        "desc": "参数:constcharpItemName,boolbIncludeStashCombines,boolbAllowSelling"
    }, {
        "name": "HeroLevelUp",
        "desc": "升级英雄,参数决定是否播放升级效果."
    }, {
        "name": "IncrementAssists",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementDeaths",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementDenies",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementKills",
        "desc": "增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementLastHitMultikill",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementLastHits",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementLastHitStreak",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementNearbyCreepDeaths",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IncrementStreak",
        "desc": "数值存储在玩家资源(PlayerResource)中"
    }, {
        "name": "IsBuybackDisabledByReapersScythe",
        "desc": "是否被死神镰刀禁止买活"
    }, {
        "name": "IsReincarnating",
        "desc": "是否处于重生中"
    }, {
        "name": "KilledHero",
        "desc": "参数:英雄,加害者"
    }, {
        "name": "ModifyAgility",
        "desc": "增加指定值到英雄基础敏捷，随后调用CalculateStatBonus"
    }, {
        "name": "ModifyGold",
        "desc": "给予英雄金钱。参数:int金钱数,bool是否为可靠金钱,int原因"
    }, {
        "name": "ModifyIntellect",
        "desc": "增加指定值到英雄基础智力，随后调用CalculateStatBonus"
    }, {
        "name": "ModifyStrength",
        "desc": "增加指定值到英雄基础力量，随后调用CalculateStatBonus"
    }, {
        "name": "PerformTaunt",
        "desc": ""
    }, {
        "name": "RecordLastHit",
        "desc": ""
    }, {
        "name": "RespawnHero",
        "desc": ""
    }, {
        "name": "SetAbilityPoints",
        "desc": "设置当前可用技能点"
    }, {
        "name": "SetBaseAgility",
        "desc": "设置基础敏捷"
    }, {
        "name": "SetBaseIntellect",
        "desc": "设置基础智力"
    }, {
        "name": "SetBaseStrength",
        "desc": "设置基础力量"
    }, {
        "name": "SetBotDifficulty",
        "desc": "设置人机对战的难度。"
    }, {
        "name": "SetBuybackCooldownTime",
        "desc": "设置买活冷却时间"
    }, {
        "name": "SetBuyBackDisabledByReapersScythe",
        "desc": "设置是否被死神镰刀禁止买活"
    }, {
        "name": "SetBuybackGoldLimitTime",
        "desc": "设置买活后金钱惩罚时间"
    }, {
        "name": "SetCustomDeathXP",
        "desc": "GameRulesbooleanmustbesetforthistowork!}}"
    }, {
        "name": "SetGold",
        "desc": "设置英雄拥有者的金钱"
    }, {
        "name": "SetPlayerID",
        "desc": ""
    }, {
        "name": "SetPrimaryAttribute",
        "desc": "设置英雄的主属性值。"
    }, {
        "name": "SetRespawnPosition",
        "desc": ""
    }, {
        "name": "SetRespawnsDisabled",
        "desc": "禁止英雄复活。"
    }, {
        "name": "SetTimeUntilRespawn",
        "desc": ""
    }, {
        "name": "ShouldDoFlyHeightVisual",
        "desc": ""
    }, {
        "name": "SpendGold",
        "desc": "参数:int金钱,int原因"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }, {
        "name": "UpgradeAbility",
        "desc": "升级指定技能，需要英雄拥有该技能和技能点"
    }, {
        "name": "WillReincarnate",
        "desc": ""
    }, {
        "name": "GetOpposingTeamNumber",
        "desc": ""
    }, {
        "name": "GetPaddedCollisionRadius",
        "desc": "获取单位碰撞体积半径。"
    }, {
        "name": "GetPercentageBasedManaRegen",
        "desc": "获取基础魔力恢复值百分比。"
    }, {
        "name": "GetPhysicalArmorBaseValue",
        "desc": "返回基础护甲值。"
    }, {
        "name": "GetPhysicalArmorValue",
        "desc": "返回护甲值，英雄护甲受到属性影响"
    }, {
        "name": "GetPlayerOwner",
        "desc": "获取拥有此单位的玩家实体。"
    }, {
        "name": "GetPlayerOwnerID",
        "desc": "获取拥有此单位的玩家ID。"
    }, {
        "name": "GetProjectileSpeed",
        "desc": ""
    }, {
        "name": "GetRangeToUnit",
        "desc": ""
    }, {
        "name": "GetSecondsPerAttack",
        "desc": ""
    }, {
        "name": "GetStatsBasedManaRegen",
        "desc": "返回属性提供的魔法回复"
    }, {
        "name": "GetTeamNumber",
        "desc": "获取该单位所属的队伍ID。"
    }, {
        "name": "GetTotalPurchasedUpgradeGoldCost",
        "desc": "获取用在升级的金钱。"
    }, {
        "name": "GetUnitLabel",
        "desc": ""
    }, {
        "name": "GetUnitName",
        "desc": "返回单位名字"
    }, {
        "name": "GiveMana",
        "desc": "给予此单位指定的魔法值。(Giffmemana!)"
    }, {
        "name": "HasAbility",
        "desc": "以技能名称搜寻该单位是否拥有此技能。"
    }, {
        "name": "HasAttackCapability",
        "desc": ""
    }, {
        "name": "HasFlyingVision",
        "desc": "返回是否拥有空中视野"
    }, {
        "name": "HasFlyMovementCapability",
        "desc": ""
    }, {
        "name": "HasGroundMovementCapability",
        "desc": ""
    }, {
        "name": "HasInventory",
        "desc": ""
    }, {
        "name": "HasItemInInventory",
        "desc": "以物品名称搜寻该单位是否拥有此物品。"
    }, {
        "name": "HasModifier",
        "desc": "以修改器名称搜寻该单位是否拥有此修改器。"
    }, {
        "name": "HasMovementCapability",
        "desc": ""
    }, {
        "name": "HasScepter",
        "desc": ""
    }, {
        "name": "Heal",
        "desc": "治疗该单位。"
    }, {
        "name": "Hold",
        "desc": "命令单位在原地待命。"
    }, {
        "name": "Interrupt",
        "desc": ""
    }, {
        "name": "InterruptChannel",
        "desc": ""
    }, {
        "name": "InterruptMotionControllers",
        "desc": "Parameterbooleandeterminesfindingclearspace."
    }, {
        "name": "IsAlive",
        "desc": "此单位是否还活着?"
    }, {
        "name": "IsAncient",
        "desc": "该生物是否为远古野怪?"
    }, {
        "name": "IsAttackImmune",
        "desc": ""
    }, {
        "name": "IsAttacking",
        "desc": ""
    }, {
        "name": "IsAttackingEntity",
        "desc": ""
    }, {
        "name": "IsBlind",
        "desc": ""
    }, {
        "name": "IsBlockDisabled",
        "desc": ""
    }, {
        "name": "IsCommandRestricted",
        "desc": ""
    }, {
        "name": "IsControllableByAnyPlayer",
        "desc": "该单位是否为非Bot玩家所控制?"
    }, {
        "name": "IsCreature",
        "desc": "此单位是否为怪物类型单位?"
    }, {
        "name": "IsDeniable",
        "desc": ""
    }, {
        "name": "IsDisarmed",
        "desc": ""
    }, {
        "name": "IsDominated",
        "desc": ""
    }, {
        "name": "IsEvadeDisabled",
        "desc": ""
    }, {
        "name": "IsFrozen",
        "desc": ""
    }, {
        "name": "IsHardDisarmed",
        "desc": ""
    }, {
        "name": "IsHero",
        "desc": "此单位是否为英雄或英雄幻象?"
    }, {
        "name": "IsHexed",
        "desc": ""
    }, {
        "name": "IsIdle",
        "desc": "该生物是否处于闲置状态?"
    }, {
        "name": "IsIllusion",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsInvisible",
        "desc": ""
    }, {
        "name": "IsInvulnerable",
        "desc": ""
    }, {
        "name": "IsLowAttackPriority",
        "desc": ""
    }, {
        "name": "IsMagicImmune",
        "desc": "该单位是否魔法免疫?"
    }, {
        "name": "IsMechanical",
        "desc": "该单位是否为机械单位?"
    }, {
        "name": "IsMovementImpaired",
        "desc": ""
    }, {
        "name": "IsMuted",
        "desc": ""
    }, {
        "name": "IsNeutralUnitType",
        "desc": "该单位是否为野怪?"
    }, {
        "name": "IsNightmared",
        "desc": ""
    }, {
        "name": "IsOpposingTeam",
        "desc": ""
    }, {
        "name": "IsOutOfGame",
        "desc": ""
    }, {
        "name": "IsOwnedByAnyPlayer",
        "desc": "该单位是否为非Bot之玩家所有?"
    }, {
        "name": "IsPhantom",
        "desc": "该单位是否为幻象单位?"
    }, {
        "name": "IsPhantomBlocker",
        "desc": ""
    }, {
        "name": "IsPhased",
        "desc": "是否在相位状态?"
    }, {
        "name": "IsPositionInRange",
        "desc": "是否在某点的范围内"
    }, {
        "name": "IsRangedAttacker",
        "desc": "该单位攻击类型是否为远程攻击?"
    }, {
        "name": "IsRealHero",
        "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。"
    }, {
        "name": "IsRooted",
        "desc": ""
    }, {
        "name": "IsSilenced",
        "desc": "该单位是否被沉默?"
    }, {
        "name": "IsSoftDisarmed",
        "desc": ""
    }, {
        "name": "IsSpeciallyDeniable",
        "desc": ""
    }, {
        "name": "IsStunned",
        "desc": "该单位是否被晕眩了?"
    }, {
        "name": "IsSummoned",
        "desc": "此单位是否为召唤物?"
    }, {
        "name": "IsTower",
        "desc": "此单位是否为塔?"
    }, {
        "name": "IsUnableToMiss",
        "desc": ""
    }, {
        "name": "IsUnselectable",
        "desc": ""
    }, {
        "name": "Kill",
        "desc": "杀死一个单位，参数为使用的技能与攻击者。"
    }, {
        "name": "MakeIllusion",
        "desc": ""
    }, {
        "name": "MakePhantomBlocker",
        "desc": ""
    }, {
        "name": "MakeVisibleDueToAttack",
        "desc": ""
    }, {
        "name": "MakeVisibleToTeam",
        "desc": ""
    }, {
        "name": "ManageModelChanges",
        "desc": ""
    }, {
        "name": "ModifyHealth",
        "desc": "设置血量为所指定的值"
    }, {
        "name": "MoveToNPC",
        "desc": "移动至指定的单位。"
    }, {
        "name": "MoveToNPCToGiveItem",
        "desc": "将身上的物品丢给指定的单位。"
    }, {
        "name": "MoveToPosition",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToPositionAggressive",
        "desc": "移动到指定的位置。"
    }, {
        "name": "MoveToTargetToAttack",
        "desc": "移动至指定的单位，并且发动攻击。"
    }, {
        "name": "NoHealthBar",
        "desc": ""
    }, {
        "name": "NoTeamMoveTo",
        "desc": ""
    }, {
        "name": "NoTeamSelect",
        "desc": ""
    }, {
        "name": "NotifyWearablesOfModelChange",
        "desc": "通知模型的可穿戴性发生了改变。"
    }, {
        "name": "NotOnMinimap",
        "desc": ""
    }, {
        "name": "NotOnMinimapForEnemies",
        "desc": ""
    }, {
        "name": "NoUnitCollision",
        "desc": ""
    }, {
        "name": "PassivesDisabled",
        "desc": ""
    }, {
        "name": "PerformAttack",
        "desc": "对一单位执行攻击。"
    }, {
        "name": "PickupDroppedItem",
        "desc": "捡起掉落的物品。"
    }, {
        "name": "PickupRune",
        "desc": "捡起神符。"
    }, {
        "name": "ProvidesVision",
        "desc": ""
    }, {
        "name": "Purge",
        "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。"
    }, {
        "name": "ReduceMana",
        "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。"
    }, {
        "name": "RemoveAbility",
        "desc": "以技能名称移除该单位相应的技能。"
    }, {
        "name": "RemoveGesture",
        "desc": "移除某个动作。"
    }, {
        "name": "RemoveHorizontalMotionController",
        "desc": "移除水平方向上的运动控制器。"
    }, {
        "name": "RemoveItem",
        "desc": "将该单位库存中的过期物品移除。"
    }, {
        "name": "RemoveModifierByName",
        "desc": "以名称移除修改器。"
    }, {
        "name": "RemoveModifierByNameAndCaster",
        "desc": "以施法者与修改器名称移除修改器。"
    }, {
        "name": "RemoveNoDraw",
        "desc": "Removethenodrawflag."
    }, {
        "name": "RemoveVerticalMotionController",
        "desc": "移除垂直方向上的运动控制器。"
    }, {
        "name": "RespawnUnit",
        "desc": "复活该单位。"
    }, {
        "name": "TakeItem",
        "desc": "隐藏物品"
    }, {
        "name": "SellItem",
        "desc": "卖出该单位的物品。"
    }, {
        "name": "SetAbilityByIndex",
        "desc": "改变技能Index"
    }, {
        "name": "SetAcquisitionRange",
        "desc": "Setsacquisitionrange"
    }, {
        "name": "SetAdditionalBattleMusicWeight",
        "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。"
    }, {
        "name": "SetAggroTarget",
        "desc": "将这个单位的仇恨目标设为某个单位。"
    }, {
        "name": "SetAttackCapability",
        "desc": ""
    }, {
        "name": "SetAttacking",
        "desc": ""
    }, {
        "name": "SetBaseAttackTime",
        "desc": ""
    }, {
        "name": "SetBaseDamageMax",
        "desc": "设置基础最大攻击力。"
    }, {
        "name": "SetBaseDamageMin",
        "desc": "设置基础最小攻击力。"
    }, {
        "name": "SetBaseHealthRegen",
        "desc": ""
    }, {
        "name": "SetBaseMagicalResistanceValue",
        "desc": "设置基础魔法抗性值。"
    }, {
        "name": "SetBaseManaRegen",
        "desc": "设置基础魔力恢复值。"
    }, {
        "name": "SetBaseMaxHealth",
        "desc": "设置基础最大血量。"
    }, {
        "name": "SetBaseMoveSpeed",
        "desc": "设置基础跑速。"
    }, {
        "name": "SetCanSellItems",
        "desc": "设置这个单位是否能出售物品。"
    }, {
        "name": "SetControllableByPlayer",
        "desc": "以玩家ID设置该单位的控制权。"
    }, {
        "name": "SetCursorCastTarget",
        "desc": ""
    }, {
        "name": "SetCursorPosition",
        "desc": ""
    }, {
        "name": "SetCursorTargetingNothing",
        "desc": ""
    }, {
        "name": "SetDayTimeVisionRange",
        "desc": "设置基础的视间视野距离。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetDeathXP",
        "desc": "设置该单位的击杀经验值奖赏。"
    }, {
        "name": "SetForceAttackTarget",
        "desc": ""
    }, {
        "name": "SetHasInventory",
        "desc": ""
    }, {
        "name": "SetHullRadius",
        "desc": "设置该单位的碰撞半径。"
    }, {
        "name": "SetIdleAcquire",
        "desc": ""
    }, {
        "name": "SetInitialGoalEntity",
        "desc": "设置该单位的初始路径点。"
    }, {
        "name": "SetMana",
        "desc": "设置该单位的魔力值。"
    }, {
        "name": "SetMaximumGoldBounty",
        "desc": "设置该单位的最高赏金。"
    }, {
        "name": "SetMinimumGoldBounty",
        "desc": "设置该单位的最低赏金。"
    }, {
        "name": "SetModifierStackCount",
        "desc": "Setsthestackcountofagivenmodifier."
    }, {
        "name": "SetMoveCapability",
        "desc": ""
    }, {
        "name": "SetMustReachEachGoalEntity",
        "desc": "设置该单位是否要走访每个路径点。"
    }, {
        "name": "SetNeverMoveToClearSpace",
        "desc": "如果设置为True，则不会将该单位移动到净空的地方。"
    }, {
        "name": "SetNightTimeVisionRange",
        "desc": "设置基础夜间视野距离。"
    }, {
        "name": "SetOrigin",
        "desc": "设置单位位置。"
    }, {
        "name": "SetOriginalModel",
        "desc": "设置单位原模型。"
    }, {
        "name": "SetPhysicalArmorBaseValue",
        "desc": "设置基础护甲值。"
    }, {
        "name": "SetRangedProjectileName",
        "desc": ""
    }, {
        "name": "SetRenderAlpha",
        "desc": ""
    }, {
        "name": "SetStolenScepter",
        "desc": ""
    }, {
        "name": "SetUnitName",
        "desc": ""
    }, {
        "name": "ShouldIdleAcquire",
        "desc": ""
    }, {
        "name": "SpendMana",
        "desc": "消耗魔力，可以用在技能消耗或使用物品。"
    }, {
        "name": "StartGesture",
        "desc": "向单位添加给定的动作。"
    }, {
        "name": "StartGestureWithPlaybackRate",
        "desc": "向单位添加给定的动作，带有自定义的动作速度。"
    }, {
        "name": "Stop",
        "desc": "使该单位暂停当前动作。"
    }, {
        "name": "SwapAbilities",
        "desc": "交换两个技能的字段，并设置其是否生效。"
    }, {
        "name": "SwapItems",
        "desc": "交换两个物品的位置。"
    }, {
        "name": "TimeUntilNextAttack",
        "desc": ""
    }, {
        "name": "TriggerModifierDodge",
        "desc": ""
    }, {
        "name": "TriggerSpellAbsorb",
        "desc": "判断传递的技能是否会触发该单位的技能吸收"
    }, {
        "name": "TriggerSpellReflect",
        "desc": "触发类似于清莲宝珠一样的效果。"
    }, {
        "name": "UnitCanRespawn",
        "desc": ""
    }]
}