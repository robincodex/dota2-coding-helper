{
    "CDOTA_Ability_Nian_Roar": [
        {
            "desc": "年兽使用了咆哮的次数",
            "func": "()",
            "name": "GetCastCount",
            "return": "int"
        }
    ],
    "Globals": [
        {
            "desc": "为指定队伍增加临时视野(nTeamID,vLocation,flRadius,flDuration,bObstructedVision)",
            "func": "( int_1, Vector_2, float_3, float_4, bool_5 )",
            "name": "AddFOWViewer",
            "return": "int"
        },
        {
            "desc": "返回两个偏航角度之差",
            "func": "( float_1, float_2 )",
            "name": "AngleDiff",
            "return": "float"
        },
        {
            "desc": "Generate a vector given a QAngles",
            "func": "( QAngle_1 )",
            "name": "AnglesToVector",
            "return": "Vector"
        },
        {
            "desc": "在服务器日志文件上增加一个string",
            "func": "( string_1, string_2 )",
            "name": "AppendToLogFile",
            "return": "void"
        },
        {
            "desc": "对单位造成伤害，Table输入：victim,attacker,damage,damage_type,damage_flags?,ability?",
            "func": "( handle_1 )",
            "name": "ApplyDamage",
            "return": "float"
        },
        {
            "desc": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
            "func": "( Vector_1, float_2 )",
            "name": "AxisAngleToQuaternion",
            "return": "Quaternion"
        },
        {
            "desc": "计算实体的OBB上最接近的两个点。",
            "func": "( handle_1, Vector_2 )",
            "name": "CalcClosestPointOnEntityOBB",
            "return": "Vector"
        },
        {
            "desc": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
            "func": "( handle_1, handle_2 )",
            "name": "CalcDistanceBetweenEntityOBB",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( Vector_1, Vector_2, Vector_3 )",
            "name": "CalcDistanceToLineSegment2D",
            "return": "float"
        },
        {
            "desc": "为特定的实体创建所有输入/输出事件",
            "func": "( ehandle_1 )",
            "name": "CancelEntityIOEvents",
            "return": "void"
        },
        {
            "desc": "CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit.",
            "func": "( int_1, handle_2 )",
            "name": "CenterCameraOnUnit",
            "return": "void"
        },
        {
            "desc": "清除自定义血条颜色。",
            "func": "( int_1 )",
            "name": "ClearTeamCustomHealthbarColor",
            "return": "void"
        },
        {
            "desc": "(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object.",
            "func": "( handle_1, handle_2, Vector_3, Vector_4, float_5, int_6 )",
            "name": "CreateDamageInfo",
            "return": "handle"
        },
        {
            "desc": "传递table-输入：实体，效果",
            "func": "( handle_1 )",
            "name": "CreateEffect",
            "return": "bool"
        },
        {
            "desc": "生成一个HTTP请求。",
            "func": "( string_1, string_2 )",
            "name": "CreateHTTPRequest",
            "return": "handle"
        },
        {
            "desc": "Create an HTTP request.",
            "func": "( string_1, string_2 )",
            "name": "CreateHTTPRequestScriptVM",
            "return": "handle"
        },
        {
            "desc": "用DOTA英雄的dota_npc_units.txt中的名字创建它并把它设为给定玩家的控制英雄",
            "func": "( string_1, handle_2 )",
            "name": "CreateHeroForPlayer",
            "return": "handle"
        },
        {
            "desc": "Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) Supported keys: outgoing_damageincoming_damagebounty_basebounty_growthoutgoing_damage_structureoutgoing_damage_roshan",
            "func": "( handle_1, handle_2, handle_3, int_4, int_5, bool_6, bool_7 )",
            "name": "CreateIllusions",
            "return": "table"
        },
        {
            "desc": "用类名称item_name创建一个owner可以使用的物品",
            "func": "( string_1, handle_2, handle_3 )",
            "name": "CreateItem",
            "return": "handle"
        },
        {
            "desc": "在给定地点生成一个实际物品。目标地点可以是空中(但这不会清空这个位置)",
            "func": "( Vector_1, handle_2 )",
            "name": "CreateItemOnPositionForLaunch",
            "return": "handle"
        },
        {
            "desc": "在给定位置创建一个可见的物品",
            "func": "( Vector_1, handle_2 )",
            "name": "CreateItemOnPositionSync",
            "return": "handle"
        },
        {
            "desc": "生成一个不和任何NPC相关联的Modifier。(hCaster,hAbility,modifierName,paramTable,vOrigin,nTeamNumber,bPhantomBlocker)",
            "func": "( handle_1, handle_2, string_3, handle_4, Vector_5, int_6, bool_7 )",
            "name": "CreateModifierThinker",
            "return": "handle"
        },
        {
            "desc": "Create a rune of the specified type (vLocation, iRuneType).",
            "func": "( Vector_1, int_2 )",
            "name": "CreateRune",
            "return": "handle"
        },
        {
            "desc": "Create a scene entity to play the specified scene.",
            "func": "( string_1 )",
            "name": "CreateSceneEntity",
            "return": "handle"
        },
        {
            "desc": "生成一颗临时存在的树。(vLocation,flDuration).",
            "func": "( Vector_1, float_2 )",
            "name": "CreateTempTree",
            "return": "handle"
        },
        {
            "desc": "Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName).",
            "func": "( Vector_1, float_2, string_3 )",
            "name": "CreateTempTreeWithModel",
            "return": "handle"
        },
        {
            "desc": "CreateTrigger(vecMin,vecMax) :创建并返回一个AABB触发器",
            "func": "( Vector_1, Vector_2, Vector_3 )",
            "name": "CreateTrigger",
            "return": "handle"
        },
        {
            "desc": "CreateTriggerRadiusApproximate(vecOrigin,flRadius) :创建并返回一个比给定radius大的AABB触发器",
            "func": "( Vector_1, float_2 )",
            "name": "CreateTriggerRadiusApproximate",
            "return": "handle"
        },
        {
            "desc": "( iSeed ) - Creates a separate random number stream.",
            "func": "( int_1 )",
            "name": "CreateUniformRandomStream",
            "return": "handle"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber)",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, int_6 )",
            "name": "CreateUnitByName",
            "return": "handle"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber,hCallback)",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, int_6, handle_7 )",
            "name": "CreateUnitByNameAsync",
            "return": "int"
        },
        {
            "desc": "Createsanewdata-drivenentitywiththegiventable",
            "func": "( handle_1, Vector_2 )",
            "name": "CreateUnitFromTable",
            "return": "handle"
        },
        {
            "desc": "(vector,vector) cross product between two vectors",
            "func": "( Vector_1, Vector_2 )",
            "name": "CrossVectors",
            "return": "Vector"
        },
        {
            "desc": "Spawn a .vmap at the target location.",
            "func": "( string_1, Vector_2, bool_3, handle_4, handle_5, handle_6 )",
            "name": "DOTA_SpawnMapAtPosition",
            "return": "int"
        },
        {
            "desc": "在debugger（调试模式）中停止运行",
            "func": "()",
            "name": "DebugBreak",
            "return": "void"
        },
        {
            "desc": "Creates a test unit controllable by the specified player.",
            "func": "( handle_1, string_2, int_3, bool_4, handle_5 )",
            "name": "DebugCreateUnit",
            "return": "int"
        },
        {
            "desc": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
            "name": "DebugDrawBox",
            "return": "void"
        },
        {
            "desc": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
            "name": "DebugDrawBoxDirection",
            "return": "void"
        },
        {
            "desc": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "name": "DebugDrawCircle",
            "return": "void"
        },
        {
            "desc": "尝试清理所有debugoverlay信息",
            "func": "()",
            "name": "DebugDrawClear",
            "return": "void"
        },
        {
            "desc": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
            "name": "DebugDrawLine",
            "return": "void"
        },
        {
            "desc": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
            "func": "( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
            "name": "DebugDrawLine_vCol",
            "return": "void"
        },
        {
            "desc": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
            "name": "DebugDrawScreenTextLine",
            "return": "void"
        },
        {
            "desc": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
            "func": "( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
            "name": "DebugDrawSphere",
            "return": "void"
        },
        {
            "desc": "显示3d文字(origin,text,bViewCheck,duration)",
            "func": "( Vector_1, string_2, bool_3, float_4 )",
            "name": "DebugDrawText",
            "return": "void"
        },
        {
            "desc": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
            "func": "( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
            "name": "DebugScreenTextPretty",
            "return": "void"
        },
        {
            "desc": "Free a damageinfo object that was created with CreateDamageInfo().",
            "func": "( handle_1 )",
            "name": "DestroyDamageInfo",
            "return": "void"
        },
        {
            "desc": "(hAttacker,hTarget,hAbility,fDamage,fRadius,effectName)",
            "func": "( handle_1, handle_2, handle_3, float_4, float_5, float_6, float_7, string_8 )",
            "name": "DoCleaveAttack",
            "return": "int"
        },
        {
            "desc": "构造一个实体的输入/输出事件(szTarget,szAction,szValue,flDelay,hActivator,hCaller)",
            "func": "( string_1, string_2, string_3, float_4, handle_5, handle_6 )",
            "name": "DoEntFire",
            "return": "void"
        },
        {
            "desc": "EntFireByHandle:构造一个实体的输入/输出事件",
            "func": "( handle_1, string_2, string_3, float_4, handle_5, handle_6 )",
            "name": "DoEntFireByInstanceHandle",
            "return": "void"
        },
        {
            "desc": "运行一个内部脚本",
            "func": "( string_1, handle_2 )",
            "name": "DoIncludeScript",
            "return": "bool"
        },
        {
            "desc": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
            "func": "( bool_1, string_2 )",
            "name": "DoScriptAssert",
            "return": "void"
        },
        {
            "desc": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
            "func": "( string_1 )",
            "name": "DoUniqueString",
            "return": "string"
        },
        {
            "desc": "",
            "func": "( Vector_1, Vector_2 )",
            "name": "DotProduct",
            "return": "float"
        },
        {
            "desc": "Drop a neutral item for the team of the hero at the given tier.",
            "func": "( string_1, Vector_2, handle_3, int_4, bool_5 )",
            "name": "DropNeutralItemAtPositionForHero",
            "return": "handle"
        },
        {
            "desc": "对所有玩家播放播音员的声音。",
            "func": "( string_1 )",
            "name": "EmitAnnouncerSound",
            "return": "void"
        },
        {
            "desc": "对一位玩家播放播音员的音效。",
            "func": "( string_1, int_2 )",
            "name": "EmitAnnouncerSoundForPlayer",
            "return": "void"
        },
        {
            "desc": "对一方队伍成员播放播音员的音效。",
            "func": "( string_1, int_2 )",
            "name": "EmitAnnouncerSoundForTeam",
            "return": "void"
        },
        {
            "desc": "对在某个特定地点队伍成员播放播音员的音效",
            "func": "( string_1, int_2, Vector_3 )",
            "name": "EmitAnnouncerSoundForTeamOnLocation",
            "return": "void"
        },
        {
            "desc": "为所有玩家播放给定名称的音效",
            "func": "( string_1 )",
            "name": "EmitGlobalSound",
            "return": "void"
        },
        {
            "desc": "在一个实体上播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "name": "EmitSoundOn",
            "return": "void"
        },
        {
            "desc": "为指定玩家播放给定名称的音效",
            "func": "( string_1, handle_2 )",
            "name": "EmitSoundOnClient",
            "return": "void"
        },
        {
            "desc": "Emit a sound on an entity for only a specific player",
            "func": "( string_1, handle_2, int_3 )",
            "name": "EmitSoundOnEntityForPlayer",
            "return": "void"
        },
        {
            "desc": "从处在某个地点的某个单位处播放音效，仅对这个单位的友军有效。(vLocation,soundName,hCaster)",
            "func": "( Vector_1, string_2, handle_3 )",
            "name": "EmitSoundOnLocationForAllies",
            "return": "void"
        },
        {
            "desc": "Emit a sound on a location for only a specific player",
            "func": "( string_1, Vector_2, int_3 )",
            "name": "EmitSoundOnLocationForPlayer",
            "return": "void"
        },
        {
            "desc": "从处在某个地点的某个单位处播放音效。(vLocation,soundName,hCaster).",
            "func": "( Vector_1, string_2, handle_3 )",
            "name": "EmitSoundOnLocationWithCaster",
            "return": "void"
        },
        {
            "desc": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
            "func": "( int_1 )",
            "name": "EntIndexToHScript",
            "return": "handle"
        },
        {
            "desc": "从一个Script表发布命令",
            "func": "( handle_1 )",
            "name": "ExecuteOrderFromTable",
            "return": "void"
        },
        {
            "desc": "滑的曲线，接近0时减少较慢",
            "func": "( float_1, float_2, float_3 )",
            "name": "ExponentialDecay",
            "return": "float"
        },
        {
            "desc": "Finds a clear random position around a given target unit, using the target unit's padded collision radius.",
            "func": "( handle_1, handle_2, int_3 )",
            "name": "FindClearRandomPositionAroundUnit",
            "return": "bool"
        },
        {
            "desc": "在未被占用的地方创建单位",
            "func": "( handle_1, Vector_2, bool_3 )",
            "name": "FindClearSpaceForUnit",
            "return": "bool"
        },
        {
            "desc": "Find a spawn point for the given team.",
            "func": "( int_1 )",
            "name": "FindSpawnEntityForTeam",
            "return": "handle"
        },
        {
            "desc": "在给定的一条线上用给定flags搜索单位(iTeamNumber,vStartPos,vEndPos,hCacheUnit,flWidth,iTeamFilter,iTypeFilter,iFlagFilter)",
            "func": "( int_1, Vector_2, Vector_3, handle_4, float_5, int_6, int_7, int_8 )",
            "name": "FindUnitsInLine",
            "return": "table"
        },
        {
            "desc": "在给定范围内用给定flags搜索单位(iTeamNumber,vPosition,hCacheUnit,flRadius,iTeamFilter,iTypeFilter,iFlagFilter,iOrder,bCanGrowCache)",
            "func": "( int_1, Vector_2, handle_3, float_4, int_5, int_6, int_7, int_8, bool_9 )",
            "name": "FindUnitsInRadius",
            "return": "table"
        },
        {
            "desc": "触发实体的动作输入w/no数据",
            "func": "( ehandle_1, string_2 )",
            "name": "FireEntityIOInputNameOnly",
            "return": "void"
        },
        {
            "desc": "用给定字符串（由你分配内存）触发实体的动作输入",
            "func": "( ehandle_1, string_2, string_3 )",
            "name": "FireEntityIOInputString",
            "return": "void"
        },
        {
            "desc": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
            "func": "( ehandle_1, string_2, Vector_3 )",
            "name": "FireEntityIOInputVec",
            "return": "void"
        },
        {
            "desc": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
            "func": "( string_1, handle_2 )",
            "name": "FireGameEvent",
            "return": "void"
        },
        {
            "desc": "触发一个游戏事件但不广播给客户端",
            "func": "( string_1, handle_2 )",
            "name": "FireGameEventLocal",
            "return": "void"
        },
        {
            "desc": "获取上一帧在服务器上花费的时间",
            "func": "()",
            "name": "FrameTime",
            "return": "float"
        },
        {
            "desc": "Gets the ability texture name for an ability",
            "func": "( string_1 )",
            "name": "GetAbilityTextureNameForAbility",
            "return": "string"
        },
        {
            "desc": "Returns the currently active spawn group handle",
            "func": "()",
            "name": "GetActiveSpawnGroupHandle",
            "return": "int"
        },
        {
            "desc": "( version )",
            "func": "( string_1 )",
            "name": "GetDedicatedServerKey",
            "return": "string"
        },
        {
            "desc": "( version )",
            "func": "( string_1 )",
            "name": "GetDedicatedServerKeyV2",
            "return": "string"
        },
        {
            "desc": "对于指定为DOTA_UNIT_ORDER_CAST_TARGET_TREE下的entindex_target类型的树，这个方法用来获取其实体索引。",
            "func": "( unsigned_1 )",
            "name": "GetEntityIndexForTreeId",
            "return": "<unknown>"
        },
        {
            "desc": "返回引擎当然的帧数",
            "func": "()",
            "name": "GetFrameCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( Vector_1, handle_2 )",
            "name": "GetGroundHeight",
            "return": "float"
        },
        {
            "desc": "返回移动到地面的供给位置。第二个参数是一个NPC，用于测量碰撞体积",
            "func": "( Vector_1, handle_2 )",
            "name": "GetGroundPosition",
            "return": "Vector"
        },
        {
            "desc": "通过名称获取一个物品的价格。",
            "func": "( string_1 )",
            "name": "GetItemCost",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int_1, int_2 )",
            "name": "GetItemDefOwnedCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int_1, int_2 )",
            "name": "GetItemDefQuantity",
            "return": "int"
        },
        {
            "desc": "在广播服务器获取本地玩家",
            "func": "()",
            "name": "GetListenServerHost",
            "return": "handle"
        },
        {
            "desc": "( )",
            "func": "()",
            "name": "GetLobbyEventGameDetails",
            "return": "table"
        },
        {
            "desc": "获取地图的名字",
            "func": "()",
            "name": "GetMapName",
            "return": "string"
        },
        {
            "desc": "获取输出事件的最大延迟",
            "func": "( ehandle_1, string_2 )",
            "name": "GetMaxOutputDelay",
            "return": "float"
        },
        {
            "desc": "获取VPHYS或普通物体的角速度",
            "func": "( handle_1 )",
            "name": "GetPhysAngularVelocity",
            "return": "Vector"
        },
        {
            "desc": "获取VPHYS或普通物体的速度",
            "func": "( handle_1 )",
            "name": "GetPhysVelocity",
            "return": "Vector"
        },
        {
            "desc": "Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables.",
            "func": "( int_1, int_2 )",
            "name": "GetPotentialNeutralItemDrop",
            "return": "string"
        },
        {
            "desc": "获取真实世界的日期",
            "func": "()",
            "name": "GetSystemDate",
            "return": "string"
        },
        {
            "desc": "获取真实世界的时间",
            "func": "()",
            "name": "GetSystemTime",
            "return": "string"
        },
        {
            "desc": "Get system time in milliseconds",
            "func": "()",
            "name": "GetSystemTimeMS",
            "return": "double"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
            "name": "GetTargetAOELocation",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
            "name": "GetTargetLinearLocation",
            "return": "Vector"
        },
        {
            "desc": "(intteamID)",
            "func": "( int_1 )",
            "name": "GetTeamHeroKills",
            "return": "int"
        },
        {
            "desc": "Returnstheteamname",
            "func": "( int_1 )",
            "name": "GetTeamName",
            "return": "string"
        },
        {
            "desc": "获取已给定实体索引的树的ID",
            "func": "( int_1 )",
            "name": "GetTreeIdForEntityIndex",
            "return": "int"
        },
        {
            "desc": "获取地图X坐标最大值",
            "func": "()",
            "name": "GetWorldMaxX",
            "return": "float"
        },
        {
            "desc": "获取地图Y坐标最大值",
            "func": "()",
            "name": "GetWorldMaxY",
            "return": "float"
        },
        {
            "desc": "获取地图X坐标最小值",
            "func": "()",
            "name": "GetWorldMinX",
            "return": "float"
        },
        {
            "desc": "获取地图Y坐标最小值",
            "func": "()",
            "name": "GetWorldMinY",
            "return": "float"
        },
        {
            "desc": "Get amount of XP required to reach the next level.",
            "func": "( int_1 )",
            "name": "GetXPNeededToReachNextLevel",
            "return": "int"
        },
        {
            "desc": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
            "func": "( string_1, string_2 )",
            "name": "InitLogFile",
            "return": "void"
        },
        {
            "desc": "Returnstrueifthisisluarunningfromtheclient.dll.",
            "func": "()",
            "name": "IsClient",
            "return": "bool"
        },
        {
            "desc": "如果服务器开放返回true",
            "func": "()",
            "name": "IsDedicatedServer",
            "return": "bool"
        },
        {
            "desc": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
            "func": "()",
            "name": "IsInToolsMode",
            "return": "bool"
        },
        {
            "desc": "Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation).",
            "func": "( int_1, Vector_2 )",
            "name": "IsLocationVisible",
            "return": "bool"
        },
        {
            "desc": "Is this entity a mango tree? (hEntity).",
            "func": "( handle_1 )",
            "name": "IsMangoTree",
            "return": "bool"
        },
        {
            "desc": "如果实体有效并被标记为删除返回true",
            "func": "( handle_1 )",
            "name": "IsMarkedForDeletion",
            "return": "bool"
        },
        {
            "desc": "当Lua代码是从Server.dll中被运行的时候，返回True。",
            "func": "()",
            "name": "IsServer",
            "return": "bool"
        },
        {
            "desc": "Returns true if the unit is in a valid position in the gridnav.",
            "func": "( handle_1 )",
            "name": "IsUnitInValidPosition",
            "return": "bool"
        },
        {
            "desc": "检查给定hScript是否为有效实体",
            "func": "( handle_1 )",
            "name": "IsValidEntity",
            "return": "bool"
        },
        {
            "desc": "(vector,vector,float) lerp between two vectors by a float factor returning new vector",
            "func": "( Vector_1, Vector_2, float_3 )",
            "name": "LerpVectors",
            "return": "Vector"
        },
        {
            "desc": "设置寻路系统的搜索范围（应该是对于深度）",
            "func": "( float_1 )",
            "name": "LimitPathingSearchDepth",
            "return": "void"
        },
        {
            "desc": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
            "func": "( string_1, string_2, int_3 )",
            "name": "LinkLuaModifier",
            "return": "void"
        },
        {
            "desc": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
            "func": "( string_1, handle_2, handle_3 )",
            "name": "ListenToGameEvent",
            "return": "int"
        },
        {
            "desc": "用给定的关键字文件创建table",
            "func": "( string_1 )",
            "name": "LoadKeyValues",
            "return": "table"
        },
        {
            "desc": "用给定的关键字string创建table",
            "func": "( string_1 )",
            "name": "LoadKeyValuesFromString",
            "return": "table"
        },
        {
            "desc": "Get the current local time",
            "func": "()",
            "name": "LocalTime",
            "return": "table"
        },
        {
            "desc": "检查给定的hScript是否是有效实体（？）",
            "func": "( string_1 )",
            "name": "MakeStringToken",
            "return": "int"
        },
        {
            "desc": "Triggers the creation of entities in a manually-completed spawn group",
            "func": "( int_1 )",
            "name": "ManuallyTriggerSpawnGroupCompletion",
            "return": "void"
        },
        {
            "desc": "设置一个小地图事件。(nTeamID,hEntity,nXCoord,nYCoord,nEventType,nEventDuration).",
            "func": "( int_1, handle_2, int_3, int_4, int_5, int_6 )",
            "name": "MinimapEvent",
            "return": "void"
        },
        {
            "desc": "输出信息",
            "func": "( string_1 )",
            "name": "Msg",
            "return": "void"
        },
        {
            "desc": "暂停/开始游戏",
            "func": "( bool_1 )",
            "name": "PauseGame",
            "return": "void"
        },
        {
            "desc": "通过索引获取玩家的脚本实例",
            "func": "( int_1 )",
            "name": "PlayerInstanceFromIndex",
            "return": "handle"
        },
        {
            "desc": "用关键字从table中预缓存一个实体",
            "func": "( string_1, handle_2, handle_3 )",
            "name": "PrecacheEntityFromTable",
            "return": "void"
        },
        {
            "desc": "预缓存一个实体关键字列表",
            "func": "( handle_1, handle_2 )",
            "name": "PrecacheEntityListFromTable",
            "return": "void"
        },
        {
            "desc": "用DOTA物品的dota_npc_items.txt名称异步预缓存它,结束时提供回调",
            "func": "( string_1, handle_2 )",
            "name": "PrecacheItemByNameAsync",
            "return": "void"
        },
        {
            "desc": "用DOTA物品的dota_npc_items.txt名称预缓存它",
            "func": "( string_1, handle_2 )",
            "name": "PrecacheItemByNameSync",
            "return": "void"
        },
        {
            "desc": "手动预缓存一个单一模型",
            "func": "( string_1, handle_2 )",
            "name": "PrecacheModel",
            "return": "void"
        },
        {
            "desc": "手动预缓存一个单一资源",
            "func": "( string_1, string_2, handle_3 )",
            "name": "PrecacheResource",
            "return": "void"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt名称异步预缓存它,结束时提供回调",
            "func": "( string_1, handle_2, int_3 )",
            "name": "PrecacheUnitByNameAsync",
            "return": "void"
        },
        {
            "desc": "用DOTA单位的dota_npc_units.txt名称预缓存它",
            "func": "( string_1, handle_2, int_3 )",
            "name": "PrecacheUnitByNameSync",
            "return": "void"
        },
        {
            "desc": "Precaches a DOTA unit from a table of entity key values.",
            "func": "( handle_1, handle_2 )",
            "name": "PrecacheUnitFromTableAsync",
            "return": "void"
        },
        {
            "desc": "Precaches a DOTA unit from a table of entity key values.",
            "func": "( handle_1, handle_2 )",
            "name": "PrecacheUnitFromTableSync",
            "return": "void"
        },
        {
            "desc": "Printaconsolemessagewithalinkedconsolecommand",
            "func": "( string_1, string_2 )",
            "name": "PrintLinkedConsoleMessage",
            "return": "void"
        },
        {
            "desc": "获取范围内随机float",
            "func": "( float_1, float_2 )",
            "name": "RandomFloat",
            "return": "float"
        },
        {
            "desc": "获取范围内随机int",
            "func": "( int_1, int_2 )",
            "name": "RandomInt",
            "return": "int"
        },
        {
            "desc": "获取随机二维矢量",
            "func": "( float_1 )",
            "name": "RandomVector",
            "return": "Vector"
        },
        {
            "desc": "Register a custom animation script to run when a model loads",
            "func": "( string_1, string_2 )",
            "name": "RegisterCustomAnimationScriptForModel",
            "return": "void"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器创建一个C代理",
            "func": "( string_1 )",
            "name": "RegisterSpawnGroupFilterProxy",
            "return": "void"
        },
        {
            "desc": "重载MotD文件",
            "func": "()",
            "name": "ReloadMOTD",
            "return": "void"
        },
        {
            "desc": "Remove temporary vision for a given team ( nTeamID, nViewerID )",
            "func": "( int_1, int_2 )",
            "name": "RemoveFOWViewer",
            "return": "void"
        },
        {
            "desc": "为一个脚本基础的生成单位过滤器删除一个C代理",
            "func": "( string_1 )",
            "name": "RemoveSpawnGroupFilterProxy",
            "return": "void"
        },
        {
            "desc": "CheckandfixunitsthathavebeenassignedapositioninsidecollisionradiusofotherNPCs.检查并固定一个被分配到其他NPC的碰撞半径内的某位置的单位。",
            "func": "( Vector_1, float_2 )",
            "name": "ResolveNPCPositions",
            "return": "void"
        },
        {
            "desc": "随机生成1-100内的数，小于等于给定数则返回true",
            "func": "( int_1 )",
            "name": "RollPercentage",
            "return": "bool"
        },
        {
            "desc": "( chance, pseudo random id, unit.",
            "func": "( unsigned_1, int_2, handle_3 )",
            "name": "RollPseudoRandomPercentage",
            "return": "bool"
        },
        {
            "desc": "旋转一个QAngle，用另一个QAngle",
            "func": "( QAngle_1, QAngle_2 )",
            "name": "RotateOrientation",
            "return": "QAngle"
        },
        {
            "desc": "Rotate a Vector around a point.",
            "func": "( Vector_1, QAngle_2, Vector_3 )",
            "name": "RotatePosition",
            "return": "Vector"
        },
        {
            "desc": "围绕给定vector轴线旋转一个四元数",
            "func": "( Quaternion_1, Vector_2, float_3 )",
            "name": "RotateQuaternionByAxisAngle",
            "return": "Quaternion"
        },
        {
            "desc": "两个QAngle间的delta值",
            "func": "( QAngle_1, QAngle_2 )",
            "name": "RotationDelta",
            "return": "QAngle"
        },
        {
            "desc": "converts delta QAngle to an angular velocity Vector",
            "func": "( QAngle_1, QAngle_2 )",
            "name": "RotationDeltaAsAngularVelocity",
            "return": "Vector"
        },
        {
            "desc": "让实体说string,是否仅限队友可见",
            "func": "( handle_1, string_2, bool_3 )",
            "name": "Say",
            "return": "void"
        },
        {
            "desc": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
            "func": "( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
            "name": "ScreenShake",
            "return": "void"
        },
        {
            "desc": "(DOTAPlayersendToPlayer,intiMessageType,EntitytargetEntity,intiValue,DOTAPlayersourcePlayer)-sendToPlayer和sourcePlayer允许为nil。-iMessageType是OVERHEAD_ALERT_分类中的一个。",
            "func": "( handle_1, int_2, handle_3, int_4, handle_5 )",
            "name": "SendOverheadEventMessage",
            "return": "void"
        },
        {
            "desc": "给控制台发送string作为客户端命令",
            "func": "( string_1 )",
            "name": "SendToConsole",
            "return": "void"
        },
        {
            "desc": "给控制台发送string作为服务器命令",
            "func": "( string_1 )",
            "name": "SendToServerConsole",
            "return": "void"
        },
        {
            "desc": "为所有玩家设置opvar值",
            "func": "( string_1, string_2, string_3, float_4 )",
            "name": "SetOpvarFloatAll",
            "return": "void"
        },
        {
            "desc": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
            "func": "( string_1, string_2, string_3, float_4, handle_5 )",
            "name": "SetOpvarFloatPlayer",
            "return": "void"
        },
        {
            "desc": "Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
            "func": "( handle_1, Vector_2 )",
            "name": "SetPhysAngularVelocity",
            "return": "void"
        },
        {
            "desc": "设置当前任务名",
            "func": "( string_1 )",
            "name": "SetQuestName",
            "return": "void"
        },
        {
            "desc": "设置当前任务阶段",
            "func": "( int_1 )",
            "name": "SetQuestPhase",
            "return": "void"
        },
        {
            "desc": "为ehandle设置rendering（渲染）开/关",
            "func": "( ehandle_1, bool_2 )",
            "name": "SetRenderingEnabled",
            "return": "void"
        },
        {
            "desc": "(teamNumber,r,g,b)",
            "func": "( int_1, int_2, int_3, int_4 )",
            "name": "SetTeamCustomHealthbarColor",
            "return": "void"
        },
        {
            "desc": "Displaysaheadermessagefromplayer",
            "func": "( string_1, int_2, int_3, float_4 )",
            "name": "ShowCustomHeaderMessage",
            "return": "void"
        },
        {
            "desc": "对所有玩家显示通用的弹出窗口",
            "func": "( string_1, string_2, string_3, string_4, int_5 )",
            "name": "ShowGenericPopup",
            "return": "void"
        },
        {
            "desc": "对给定玩家显示通用的弹出窗口",
            "func": "( handle_1, string_2, string_3, string_4, string_5, int_6 )",
            "name": "ShowGenericPopupToPlayer",
            "return": "void"
        },
        {
            "desc": "在所有客户端显示hud信息",
            "func": "( string_1 )",
            "name": "ShowMessage",
            "return": "void"
        },
        {
            "desc": "(Vector vOrigin, float flRadius )",
            "func": "( Vector_1, float_2 )",
            "name": "SpawnDOTAShopTriggerRadiusApproximate",
            "return": "handle"
        },
        {
            "desc": "Asynchronously spawns a single entity from a table",
            "func": "( string_1, handle_2, handle_3, handle_4 )",
            "name": "SpawnEntityFromTableAsynchronous",
            "return": "void"
        },
        {
            "desc": "从table同步生成一个实体",
            "func": "( string_1, handle_2 )",
            "name": "SpawnEntityFromTableSynchronous",
            "return": "handle"
        },
        {
            "desc": "从一系列生成表中分级生成一个实体组",
            "func": "( handle_1, bool_2, handle_3 )",
            "name": "SpawnEntityGroupFromTable",
            "return": "bool"
        },
        {
            "desc": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
            "func": "( handle_1, handle_2 )",
            "name": "SpawnEntityListFromTableAsynchronous",
            "return": "int"
        },
        {
            "desc": "从一个生成表列表同步生成一个实体组.",
            "func": "( handle_1 )",
            "name": "SpawnEntityListFromTableSynchronous",
            "return": "handle"
        },
        {
            "desc": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Quaternion_1, Quaternion_2, float_3 )",
            "name": "SplineQuaternions",
            "return": "Quaternion"
        },
        {
            "desc": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
            "func": "( Vector_1, Vector_2, float_3 )",
            "name": "SplineVectors",
            "return": "Vector"
        },
        {
            "desc": "开始音效事件",
            "func": "( string_1, handle_2 )",
            "name": "StartSoundEvent",
            "return": "void"
        },
        {
            "desc": "在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "name": "StartSoundEventFromPosition",
            "return": "void"
        },
        {
            "desc": "通过可靠的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "name": "StartSoundEventFromPositionReliable",
            "return": "void"
        },
        {
            "desc": "通过随意的传递，在某个位置开始音效事件。",
            "func": "( string_1, Vector_2 )",
            "name": "StartSoundEventFromPositionUnreliable",
            "return": "void"
        },
        {
            "desc": "通过可靠的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "name": "StartSoundEventReliable",
            "return": "void"
        },
        {
            "desc": "通过随意的传递，开始音效事件。",
            "func": "( string_1, handle_2 )",
            "name": "StartSoundEventUnreliable",
            "return": "void"
        },
        {
            "desc": "(hEntity,szEffectName)",
            "func": "( handle_1, string_2 )",
            "name": "StopEffect",
            "return": "void"
        },
        {
            "desc": "Stop named sound for all players",
            "func": "( string_1 )",
            "name": "StopGlobalSound",
            "return": "void"
        },
        {
            "desc": "停止listen在给定内容内的所有游戏事件",
            "func": "( handle_1 )",
            "name": "StopListeningToAllGameEvents",
            "return": "void"
        },
        {
            "desc": "停止listen特定的游戏事件",
            "func": "( int_1 )",
            "name": "StopListeningToGameEvent",
            "return": "bool"
        },
        {
            "desc": "停止音效事件",
            "func": "( string_1, handle_2 )",
            "name": "StopSoundEvent",
            "return": "void"
        },
        {
            "desc": "停止实体上的命名音效",
            "func": "( string_1, handle_2 )",
            "name": "StopSoundOn",
            "return": "void"
        },
        {
            "desc": "获取当前服务器时间",
            "func": "()",
            "name": "Time",
            "return": "float"
        },
        {
            "desc": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
            "func": "( handle_1 )",
            "name": "TraceCollideable",
            "return": "bool"
        },
        {
            "desc": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "name": "TraceHull",
            "return": "bool"
        },
        {
            "desc": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
            "func": "( handle_1 )",
            "name": "TraceLine",
            "return": "bool"
        },
        {
            "desc": "Returns the number of degrees difference between two yaw angles",
            "func": "( float_1, float_2 )",
            "name": "UTIL_AngleDiff",
            "return": "float"
        },
        {
            "desc": "对特定的玩家显示信息。",
            "func": "( int_1, string_2, int_3, int_4, int_5, int_6 )",
            "name": "UTIL_MessageText",
            "return": "void"
        },
        {
            "desc": "在文本框内对所有玩家显示信息。",
            "func": "( string_1, int_2, int_3, int_4, int_5 )",
            "name": "UTIL_MessageTextAll",
            "return": "void"
        },
        {
            "desc": "Sendsamessagetoeveryoneinthemessageboxwithacontexttable",
            "func": "( string_1, int_2, int_3, int_4, int_5, handle_6 )",
            "name": "UTIL_MessageTextAll_WithContext",
            "return": "void"
        },
        {
            "desc": "Sendsamessagetoaspecificplayerinthemessageboxwithacontexttable",
            "func": "( int_1, string_2, int_3, int_4, int_5, int_6, handle_7 )",
            "name": "UTIL_MessageText_WithContext",
            "return": "void"
        },
        {
            "desc": "删除给定实体",
            "func": "( handle_1 )",
            "name": "UTIL_Remove",
            "return": "void"
        },
        {
            "desc": "立即删除给定实体",
            "func": "( handle_1 )",
            "name": "UTIL_RemoveImmediate",
            "return": "void"
        },
        {
            "desc": "对某个玩家重新设置信息文本。",
            "func": "( int_1 )",
            "name": "UTIL_ResetMessageText",
            "return": "void"
        },
        {
            "desc": "对所有玩家重新设置信息文本。",
            "func": "()",
            "name": "UTIL_ResetMessageTextAll",
            "return": "void"
        },
        {
            "desc": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
            "func": "( handle_1, int_2, int_3, int_4, int_5 )",
            "name": "UnitFilter",
            "return": "int"
        },
        {
            "desc": "通过名称去除生成组",
            "func": "( string_1 )",
            "name": "UnloadSpawnGroup",
            "return": "void"
        },
        {
            "desc": "通过handle去除生成组",
            "func": "( int_1 )",
            "name": "UnloadSpawnGroupByHandle",
            "return": "void"
        },
        {
            "desc": "( hEventPointData )",
            "func": "( handle_1 )",
            "name": "UpdateEventPoints",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "name": "VectorAngles",
            "return": "QAngle"
        },
        {
            "desc": "为Vector获取Qangle（没有滚动）",
            "func": "( Vector_1 )",
            "name": "VectorToAngles",
            "return": "QAngle"
        },
        {
            "desc": "输出警告",
            "func": "( string_1 )",
            "name": "Warning",
            "return": "void"
        },
        {
            "desc": "获取给定cvar的值，返回float.",
            "func": "( string_1 )",
            "name": "cvar_getf",
            "return": "float"
        },
        {
            "desc": "设置给定cvar的值,传递float.",
            "func": "( string_1, float_2 )",
            "name": "cvar_setf",
            "return": "bool"
        },
        {
            "desc": "给决定数据库增加一个规则",
            "func": "( handle_1 )",
            "name": "rr_AddDecisionRule",
            "return": "bool"
        },
        {
            "desc": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
            "func": "( handle_1, handle_2 )",
            "name": "rr_CommitAIResponse",
            "return": "bool"
        },
        {
            "desc": "获取所有提供的表达者目标的table，格式为{name :handle,name:handle}.",
            "func": "()",
            "name": "rr_GetResponseTargets",
            "return": "handle"
        },
        {
            "desc": "参数:(hEnt,hQuery,hResult)//静态 :对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)",
            "func": "( handle_1, handle_2, handle_3 )",
            "name": "rr_QueryBestResponse",
            "return": "bool"
        }
    ],
    "HTTPRequest": [
        {
            "desc": "Send a HTTP request.",
            "func": "( handle_1 )",
            "name": "Send",
            "return": "bool"
        },
        {
            "desc": "Set the total timeout on the request.",
            "func": "( unsigned_1 )",
            "name": "SetHTTPRequestAbsoluteTimeoutMS",
            "return": "bool"
        },
        {
            "desc": "Set a POST or GET parameter on the request.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestGetOrPostParameter",
            "return": "bool"
        },
        {
            "desc": "Set a header value on the request.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestHeaderValue",
            "return": "bool"
        },
        {
            "desc": "Set the network timeout on the request - this timer is reset when any data is received.",
            "func": "( unsigned_1 )",
            "name": "SetHTTPRequestNetworkActivityTimeout",
            "return": "bool"
        },
        {
            "desc": "Set the literal body of a post - invalid after setting a post parameter.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestRawPostBody",
            "return": "bool"
        }
    ],
    "CEntityInstance": [
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2 )",
            "name": "ConnectOutput",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "Destroy",
            "return": "void"
        },
        {
            "desc": "从这个实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2 )",
            "name": "DisconnectOutput",
            "return": "void"
        },
        {
            "desc": "从传入实体的I/O事件移除已连接的脚本方法",
            "func": "( string_1, string_2, handle_3 )",
            "name": "DisconnectRedirectedOutput",
            "return": "void"
        },
        {
            "desc": "触发实体的输出",
            "func": "( string_1, handle_2, handle_3, table_4, float_5 )",
            "name": "FireOutput",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetClassname",
            "return": "string"
        },
        {
            "desc": "如果没有定义的话获得实体名字的帮助",
            "func": "()",
            "name": "GetDebugName",
            "return": "string"
        },
        {
            "desc": "获得这个实体的EHANDLE",
            "func": "()",
            "name": "GetEntityHandle",
            "return": "ehandle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetEntityIndex",
            "return": "int"
        },
        {
            "desc": "获得整型属性",
            "func": "( string_1 )",
            "name": "GetIntAttr",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetName",
            "return": "string"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
            "func": "()",
            "name": "GetOrCreatePrivateScriptScope",
            "return": "handle"
        },
        {
            "desc": "恢复实体相关的公用脚本数据,必要时会创建",
            "func": "()",
            "name": "GetOrCreatePublicScriptScope",
            "return": "handle"
        },
        {
            "desc": "恢复实体相关的每个实例私有的脚本数据",
            "func": "()",
            "name": "GetPrivateScriptScope",
            "return": "handle"
        },
        {
            "desc": "恢复实体相关的公用脚本数据",
            "func": "()",
            "name": "GetPublicScriptScope",
            "return": "handle"
        },
        {
            "desc": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
            "func": "( string_1, string_2, handle_3 )",
            "name": "RedirectOutput",
            "return": "void"
        },
        {
            "desc": "删除这个实体",
            "func": "()",
            "name": "RemoveSelf",
            "return": "void"
        },
        {
            "desc": "设置整型属性",
            "func": "( string_1, int_2 )",
            "name": "SetIntAttr",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "entindex",
            "return": "int"
        }
    ],
    "CDOTA_Item": [
        {
            "desc": "",
            "func": "()",
            "name": "CanBeUsedOutOfInventory",
            "return": "bool"
        },
        {
            "desc": "获得物品所有者",
            "func": "()",
            "name": "GetContainer",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCost",
            "return": "int"
        },
        {
            "desc": "获得物品的目前充能",
            "func": "()",
            "name": "GetCurrentCharges",
            "return": "int"
        },
        {
            "desc": "获得物品的初始充能",
            "func": "()",
            "name": "GetInitialCharges",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetItemSlot",
            "return": "int"
        },
        {
            "desc": "Gets whether item is unequipped or ready.",
            "func": "()",
            "name": "GetItemState",
            "return": "int"
        },
        {
            "desc": "Get the parent for this item.",
            "func": "()",
            "name": "GetParent",
            "return": "handle"
        },
        {
            "desc": "获得物品的购买时间",
            "func": "()",
            "name": "GetPurchaseTime",
            "return": "float"
        },
        {
            "desc": "获得物品的购买者",
            "func": "()",
            "name": "GetPurchaser",
            "return": "handle"
        },
        {
            "desc": "Get the number of secondary charges this item currently has.",
            "func": "()",
            "name": "GetSecondaryCharges",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetShareability",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsAlertableItem",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以被捡起。",
            "func": "()",
            "name": "IsCastOnPickup",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以合成。",
            "func": "()",
            "name": "IsCombinable",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以被拆分。",
            "func": "()",
            "name": "IsDisassemblable",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以被丢弃。",
            "func": "()",
            "name": "IsDroppable",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsInBackpack",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisisanabilityattachedtoanitem.",
            "func": "()",
            "name": "IsItem",
            "return": "bool"
        },
        {
            "desc": "判断是否可以被击杀。",
            "func": "()",
            "name": "IsKillable",
            "return": "bool"
        },
        {
            "desc": "判断是否可以被禁用（？）",
            "func": "()",
            "name": "IsMuted",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsNeutralDrop",
            "return": "bool"
        },
        {
            "desc": "判断物品是否是永久性的",
            "func": "()",
            "name": "IsPermanent",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以被购买。",
            "func": "()",
            "name": "IsPurchasable",
            "return": "bool"
        },
        {
            "desc": "判断物品是否是卷轴。",
            "func": "()",
            "name": "IsRecipe",
            "return": "bool"
        },
        {
            "desc": "判断物品是否是由卷轴合成的。",
            "func": "()",
            "name": "IsRecipeGenerated",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以被出售。",
            "func": "()",
            "name": "IsSellable",
            "return": "bool"
        },
        {
            "desc": "判断物品是否可以叠加。",
            "func": "()",
            "name": "IsStackable",
            "return": "bool"
        },
        {
            "desc": "当物品掉落在地面时，将物品发射出去，使其落在某个地点。",
            "func": "( bool bAutoUse, float flHeight, float flDuration, Vector vEndPoint )",
            "name": "LaunchLoot",
            "return": "void"
        },
        {
            "desc": "设置发射物品时的初始高度。",
            "func": "( bool bAutoUse, float flInitialHeight, float flLaunchHeight, float flDuration, Vector vEndPoint )",
            "name": "LaunchLootInitialHeight",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bAutoUse, float flRequiredHeight, float flHeight, float flDuration, Vector vEndPoint )",
            "name": "LaunchLootRequiredHeight",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnEquip",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnUnequip",
            "return": "void"
        },
        {
            "desc": "判断物品是否需要充能。",
            "func": "()",
            "name": "RequiresCharges",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( bool bValue )",
            "name": "SetCanBeUsedOutOfInventory",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bCastOnPickUp )",
            "name": "SetCastOnPickup",
            "return": "void"
        },
        {
            "desc": "设置物品的充能数",
            "func": "( int iCharges )",
            "name": "SetCurrentCharges",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bDroppable )",
            "name": "SetDroppable",
            "return": "void"
        },
        {
            "desc": "Sets whether item is unequipped or ready.",
            "func": "( int iState )",
            "name": "SetItemState",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bOnlyPlayerHero )",
            "name": "SetOnlyPlayerHeroPickup",
            "return": "void"
        },
        {
            "desc": "设置物品的购买时间",
            "func": "( float flTime )",
            "name": "SetPurchaseTime",
            "return": "void"
        },
        {
            "desc": "设置物品的购买者",
            "func": "( handle hPurchaser )",
            "name": "SetPurchaser",
            "return": "void"
        },
        {
            "desc": "Set the number of secondary charges on this item",
            "func": "( int iCharges )",
            "name": "SetSecondaryCharges",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bSellable )",
            "name": "SetSellable",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iShareability )",
            "name": "SetShareability",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bStacksWithOtherOwners )",
            "name": "SetStacksWithOtherOwners",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "SpendCharge",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "StacksWithOtherOwners",
            "return": "bool"
        },
        {
            "desc": "判断此物品",
            "func": "()",
            "name": "Think",
            "return": "void"
        }
    ],
    "CDOTABaseAbility": [
        {
            "desc": "",
            "func": "()",
            "name": "CanAbilityBeUpgraded",
            "return": "<unknown>"
        },
        {
            "desc": "",
            "func": "()",
            "name": "CastAbility",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ContinueCasting",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( Vector vLocation, float fRadius, float fDuration )",
            "name": "CreateVisibilityNode",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "DecrementModifierRefCount",
            "return": "void"
        },
        {
            "desc": "参数:boolbInterrupted",
            "func": "( bool bInterrupted )",
            "name": "EndChannel",
            "return": "void"
        },
        {
            "desc": "刷新这个技能",
            "func": "()",
            "name": "EndCooldown",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAOERadius",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityDamage",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityDamageType",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityIndex",
            "return": "int"
        },
        {
            "desc": "Gets the key values definition for this ability.",
            "func": "()",
            "name": "GetAbilityKeyValues",
            "return": "table"
        },
        {
            "desc": "Returns the name of this ability.",
            "func": "()",
            "name": "GetAbilityName",
            "return": "string"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityTargetFlags",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityTargetTeam",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityTargetType",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbilityType",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAnimationIgnoresModelScale",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAssociatedPrimaryAbilities",
            "return": "string"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAssociatedSecondaryAbilities",
            "return": "string"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAutoCastState",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetBackswingTime",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetBehavior",
            "return": "int"
        },
        {
            "desc": "Get ability behavior flags as an int for compatability.",
            "func": "()",
            "name": "GetBehaviorInt",
            "return": "int"
        },
        {
            "desc": "Returnsthecastpointofthisability.",
            "func": "()",
            "name": "GetCastPoint",
            "return": "float"
        },
        {
            "desc": "Returnsthecastrangeofthisability.",
            "func": "( Vector vLocation, handle hTarget )",
            "name": "GetCastRange",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCaster",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetChannelStartTime",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetChannelTime",
            "return": "float"
        },
        {
            "desc": "Returnsthechanneledmanacostpersecondofthisabilityifit'sachannelingability.",
            "func": "( int iLevel )",
            "name": "GetChannelledManaCostPerSecond",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCloneSource",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetConceptRecipientType",
            "return": "int"
        },
        {
            "desc": "获得技能在给出的等级设定上的冷却时间,而不是目前的剩余的冷却时间",
            "func": "( int iLevel )",
            "name": "GetCooldown",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCooldownTime",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCooldownTimeRemaining",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCurrentAbilityCharges",
            "return": "int"
        },
        {
            "desc": "Returnsthetargetpointvectorfromthelastcastofthispoint-targetingability.",
            "func": "()",
            "name": "GetCursorPosition",
            "return": "Vector"
        },
        {
            "desc": "Returnsthetargetunitfromthelastcastofthisunit-targetingability.",
            "func": "()",
            "name": "GetCursorTarget",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCursorTargetingNothing",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDuration",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iLevel )",
            "name": "GetEffectiveCooldown",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iLevel )",
            "name": "GetGoldCost",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iLevel )",
            "name": "GetGoldCostForUpgrade",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetHeroLevelRequiredToUpgrade",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetIntrinsicModifierName",
            "return": "string"
        },
        {
            "desc": "获得技能目前的等级",
            "func": "()",
            "name": "GetLevel",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( string szName, int nLevel )",
            "name": "GetLevelSpecialValueFor",
            "return": "table"
        },
        {
            "desc": "",
            "func": "( string szName, int nLevel )",
            "name": "GetLevelSpecialValueNoOverride",
            "return": "table"
        },
        {
            "desc": "",
            "func": "( int iLevel )",
            "name": "GetManaCost",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetMaxLevel",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetModifierValue",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetModifierValueBonus",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetPlaybackRateOverride",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetSharedCooldownName",
            "return": "string"
        },
        {
            "desc": "Gets a value from this ability's special value block for its current level.",
            "func": "( string szName )",
            "name": "GetSpecialValueFor",
            "return": "table"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetStolenActivityModifier",
            "return": "string"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetToggleState",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetUpgradeRecommended",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( float flXP )",
            "name": "HeroXPChange",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IncrementModifierRefCount",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsActivated",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsAttributeBonus",
            "return": "bool"
        },
        {
            "desc": "返回目前技能是否在施法状态",
            "func": "()",
            "name": "IsChanneling",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsCooldownReady",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( handle hEntity )",
            "name": "IsCosmetic",
            "return": "bool"
        },
        {
            "desc": "返回技能能否被释放",
            "func": "()",
            "name": "IsFullyCastable",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsHidden",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsHiddenAsSecondaryAbility",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsHiddenWhenStolen",
            "return": "bool"
        },
        {
            "desc": "返回技能目前是否在被释放",
            "func": "()",
            "name": "IsInAbilityPhase",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisisanabilityattachedtoanitem.",
            "func": "()",
            "name": "IsItem",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int nIssuerPlayerID )",
            "name": "IsOwnersGoldEnough",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsOwnersGoldEnoughForUpgrade",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsOwnersManaEnough",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisisapassiveability.",
            "func": "()",
            "name": "IsPassive",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsRefreshable",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsSharedWithTeammates",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisabilitycanbestealed(byRubick'sultimate).",
            "func": "()",
            "name": "IsStealable",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisabilityhasbeenstolen.",
            "func": "()",
            "name": "IsStolen",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsToggle",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsTrained",
            "return": "bool"
        },
        {
            "desc": "标记这个技能图标表示需要刷新",
            "func": "()",
            "name": "MarkAbilityButtonDirty",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NumModifiersUsingAbility",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnAbilityPhaseInterrupted",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnAbilityPhaseStart",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, bool bCtrlHeld )",
            "name": "OnAbilityPinged",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bInterrupted )",
            "name": "OnChannelFinish",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flInterval )",
            "name": "OnChannelThink",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnHeroCalculateStatBonus",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnHeroLevelUp",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnOwnerDied",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnOwnerSpawned",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnSpellStart",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnToggle",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "OnUpgrade",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PayGoldCost",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PayGoldCostForUpgrade",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PayManaCost",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PlaysDefaultAnimWhenStolen",
            "return": "bool"
        },
        {
            "desc": "Returnswhetherthisabilityprocsmagicstick.",
            "func": "()",
            "name": "ProcsMagicStick",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "RefCountsModifiers",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "RefreshCharges",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "RefreshIntrinsicModifier",
            "return": "<unknown>"
        },
        {
            "desc": "",
            "func": "()",
            "name": "RefundManaCost",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ResetToggleOnRespawn",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iIndex )",
            "name": "SetAbilityIndex",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bActivated )",
            "name": "SetActivated",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bChanneling )",
            "name": "SetChanneling",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nCharges )",
            "name": "SetCurrentAbilityCharges",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bFrozenCooldown )",
            "name": "SetFrozenCooldown",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bHidden )",
            "name": "SetHidden",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bInAbilityPhase )",
            "name": "SetInAbilityPhase",
            "return": "void"
        },
        {
            "desc": "设置这个技能的等级",
            "func": "( int iLevel )",
            "name": "SetLevel",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flCastPoint )",
            "name": "SetOverrideCastPoint",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bRefCounts )",
            "name": "SetRefCountsModifiers",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bStealable )",
            "name": "SetStealable",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bStolen )",
            "name": "SetStolen",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bUpgradeRecommended )",
            "name": "SetUpgradeRecommended",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ShouldUseResources",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iConcept )",
            "name": "SpeakAbilityConcept",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "SpeakTrigger",
            "return": "<unknown>"
        },
        {
            "desc": "参数:fl冷却时间?",
            "func": "( float flCooldown )",
            "name": "StartCooldown",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ToggleAbility",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ToggleAutoCast",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bSupressSpeech )",
            "name": "UpgradeAbility",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bMana, bool bGold, bool bCooldown )",
            "name": "UseResources",
            "return": "void"
        }
    ],
    "CBaseModelEntity": [
        {
            "desc": "Get the attachment id's angles as a p,y,r vector.",
            "func": "( int iAttachment )",
            "name": "GetAttachmentAngles",
            "return": "Vector"
        },
        {
            "desc": "Get the attachment id's forward vector.",
            "func": "( int iAttachment )",
            "name": "GetAttachmentForward",
            "return": "Vector"
        },
        {
            "desc": "Get the attachment id's origin vector.",
            "func": "( int iAttachment )",
            "name": "GetAttachmentOrigin",
            "return": "Vector"
        },
        {
            "desc": "GetMaterialGroupHash(): Get the material group hash of this entity.",
            "func": "()",
            "name": "GetMaterialGroupHash",
            "return": "unsigned"
        },
        {
            "desc": "GetMaterialGroupMask(): Get the mesh group mask of this entity.",
            "func": "()",
            "name": "GetMaterialGroupMask",
            "return": "uint64"
        },
        {
            "desc": "Get scale of entity's model.",
            "func": "()",
            "name": "GetModelScale",
            "return": "float"
        },
        {
            "desc": "GetRenderAlpha(): Get the alpha modulation of this entity.",
            "func": "()",
            "name": "GetRenderAlpha",
            "return": "int"
        },
        {
            "desc": "GetRenderColor(): Get the render color of the entity.",
            "func": "()",
            "name": "GetRenderColor",
            "return": "Vector"
        },
        {
            "desc": "Get the named attachment id.",
            "func": "( string pAttachmentName )",
            "name": "ScriptLookupAttachment",
            "return": "int"
        },
        {
            "desc": "Sets a bodygroup.",
            "func": "( int iGroup, int iValue )",
            "name": "SetBodygroup",
            "return": "void"
        },
        {
            "desc": "Sets a bodygroup by name.",
            "func": "( string pName, int iValue )",
            "name": "SetBodygroupByName",
            "return": "void"
        },
        {
            "desc": "SetLightGroup(string):设置实体所属的光照组。",
            "func": "( string pLightGroup )",
            "name": "SetLightGroup",
            "return": "void"
        },
        {
            "desc": "SetMaterialGroup( string ): Set the material group of this entity.",
            "func": "( string pMaterialGroup )",
            "name": "SetMaterialGroup",
            "return": "void"
        },
        {
            "desc": "SetMaterialGroupHash( uint32 ): Set the material group hash of this entity.",
            "func": "( unsigned nHash )",
            "name": "SetMaterialGroupHash",
            "return": "void"
        },
        {
            "desc": "SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity.",
            "func": "( uint64 nMeshGroupMask )",
            "name": "SetMaterialGroupMask",
            "return": "void"
        },
        {
            "desc": "设置模型",
            "func": "( string pModelName )",
            "name": "SetModel",
            "return": "void"
        },
        {
            "desc": "Set scale of entity's model.",
            "func": "( float flScale )",
            "name": "SetModelScale",
            "return": "void"
        },
        {
            "desc": "SetRenderAlpha( int ): Set the alpha modulation of this entity.",
            "func": "( int nAlpha )",
            "name": "SetRenderAlpha",
            "return": "void"
        },
        {
            "desc": "SetRenderColor(r,g,b):设置实体的渲染颜色。",
            "func": "( int r, int g, int b )",
            "name": "SetRenderColor",
            "return": "void"
        },
        {
            "desc": "SetRenderMode(int):设置实体的渲染模式。",
            "func": "( int nMode )",
            "name": "SetRenderMode",
            "return": "void"
        },
        {
            "desc": "SetSingleMeshGroup( string ): Set a single mesh group for this entity.",
            "func": "( string pMeshGroupName )",
            "name": "SetSingleMeshGroup",
            "return": "void"
        },
        {
            "desc": "设置尺寸。",
            "func": "( Vector mins, Vector maxs )",
            "name": "SetSize",
            "return": "void"
        },
        {
            "desc": "Set skin (int).",
            "func": "( int iSkin )",
            "name": "SetSkin",
            "return": "void"
        }
    ],
    "CInfoPlayerStartDota": [
        {
            "desc": "Returns whether the object is currently active",
            "func": "()",
            "name": "IsEnabled",
            "return": "bool"
        },
        {
            "desc": "Enable or disable the obstruction",
            "func": "( bool bEnabled )",
            "name": "SetEnabled",
            "return": "void"
        }
    ],
    "CScriptPrecacheContext": [
        {
            "desc": "预缓存指定资源",
            "func": "( string_1 )",
            "name": "AddResource",
            "return": "void"
        },
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "name": "GetValue",
            "return": "table"
        }
    ],
    "CDOTA_ShopTrigger": [
        {
            "desc": "Get the DOTA_SHOP_TYPE",
            "func": "()",
            "name": "GetShopType",
            "return": "int"
        },
        {
            "desc": "Set the DOTA_SHOP_TYPE.",
            "func": "( int eShopType )",
            "name": "SetShopType",
            "return": "void"
        }
    ],
    "CPointWorldText": [
        {
            "desc": "Set the message on this entity.",
            "func": "( string pMessage )",
            "name": "SetMessage",
            "return": "void"
        }
    ],
    "CEnvEntityMaker": [
        {
            "desc": "在生成器的位置创建一个实体",
            "func": "()",
            "name": "SpawnEntity",
            "return": "void"
        },
        {
            "desc": "在指定实体的位置立刻创建一个实体",
            "func": "( handle hEntity )",
            "name": "SpawnEntityAtEntityOrigin",
            "return": "void"
        },
        {
            "desc": "在指定位置和方向创建一个实体，方向是角度制欧拉角(pitch,yaw,roll)",
            "func": "( Vector vecAlternateOrigin, Vector vecAlternateAngles )",
            "name": "SpawnEntityAtLocation",
            "return": "void"
        },
        {
            "desc": "在指定名字实体的位置创建一个实体",
            "func": "( string pszName )",
            "name": "SpawnEntityAtNamedEntityOrigin",
            "return": "void"
        }
    ],
    "CDOTA_BaseNPC_Creature": [
        {
            "desc": "为该生物添加特别的道具掉落",
            "func": "( handle hDropData )",
            "name": "AddItemDrop",
            "return": "void"
        },
        {
            "desc": "升级目标生物指定级别",
            "func": "( int iLevels )",
            "name": "CreatureLevelUp",
            "return": "void"
        },
        {
            "desc": "Set creature's current disable resistance",
            "func": "()",
            "name": "GetDisableResistance",
            "return": "float"
        },
        {
            "desc": "Set creature's current disable resistance from ultimates",
            "func": "()",
            "name": "GetUltimateDisableResistance",
            "return": "float"
        },
        {
            "desc": "是否为冠军生物",
            "func": "()",
            "name": "IsChampion",
            "return": "bool"
        },
        {
            "desc": "是否处于重生中",
            "func": "()",
            "name": "IsReincarnating",
            "return": "bool"
        },
        {
            "desc": "Remove all item drops from this creature.",
            "func": "()",
            "name": "RemoveAllItemDrops",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的护甲",
            "func": "( float flArmorGain )",
            "name": "SetArmorGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的攻击速度",
            "func": "( float flAttackTimeGain )",
            "name": "SetAttackTimeGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的奖励金币",
            "func": "( int nBountyGain )",
            "name": "SetBountyGain",
            "return": "void"
        },
        {
            "desc": "将该生物标记为冠军生物",
            "func": "( bool bIsChampion )",
            "name": "SetChampion",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的攻击伤害",
            "func": "( int nDamageGain )",
            "name": "SetDamageGain",
            "return": "void"
        },
        {
            "desc": "Set creature's current disable resistance",
            "func": "( float flDisableResistance )",
            "name": "SetDisableResistance",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的控制抗性",
            "func": "( float flDisableResistanceGain )",
            "name": "SetDisableResistanceGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的生命值",
            "func": "( int nHPGain )",
            "name": "SetHPGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的生命回复",
            "func": "( float flHPRegenGain )",
            "name": "SetHPRegenGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的魔法抗性",
            "func": "( float flMagicResistanceGain )",
            "name": "SetMagicResistanceGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的魔法值",
            "func": "( int nManaGain )",
            "name": "SetManaGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的魔法回复",
            "func": "( float flManaRegenGain )",
            "name": "SetManaRegenGain",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的移动速度",
            "func": "( int nMoveSpeedGain )",
            "name": "SetMoveSpeedGain",
            "return": "void"
        },
        {
            "desc": "Set whether creatures require reaching their end path before becoming idle",
            "func": "( bool bRequiresReachingEndPath )",
            "name": "SetRequiresReachingEndPath",
            "return": "void"
        },
        {
            "desc": "Set creature's current disable resistance from ultimates",
            "func": "( float flUltDisableResistance )",
            "name": "SetUltimateDisableResistance",
            "return": "void"
        },
        {
            "desc": "设置该生物每级增加的经验值",
            "func": "( int nXPGain )",
            "name": "SetXPGain",
            "return": "void"
        }
    ],
    "CDOTA_Ability_DataDriven": [
        {
            "desc": "获取单位的攻击力。",
            "func": "( handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable )",
            "name": "ApplyDataDrivenModifier",
            "return": "handle"
        },
        {
            "desc": "在指定地点应用一个数据驱动thinker。",
            "func": "( handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable )",
            "name": "ApplyDataDrivenThinker",
            "return": "handle"
        }
    ],
    "CDOTA_Unit_Nian": [
        {
            "desc": "获取年兽角",
            "func": "()",
            "name": "GetHorn",
            "return": "handle"
        },
        {
            "desc": "获取年兽尾巴",
            "func": "()",
            "name": "GetTail",
            "return": "handle"
        },
        {
            "desc": "年兽的角巴是否损坏?",
            "func": "()",
            "name": "IsHornAlive",
            "return": "bool"
        },
        {
            "desc": "年兽的尾巴是否损坏?",
            "func": "()",
            "name": "IsTailAlive",
            "return": "bool"
        }
    ],
    "CTakeDamageInfo": [
        {
            "desc": "",
            "func": "( float flAddAmount )",
            "name": "AddDamage",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int bitsDamageType )",
            "name": "AddDamageType",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "AllowFriendlyFire",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "BaseDamageIsValid",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "CanBeBlocked",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAmmoType",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAttacker",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetBaseDamage",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamage",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamageCustom",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamageForce",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamagePosition",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamageTaken",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetDamageType",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetInflictor",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetMaxDamage",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetOriginalDamage",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetRadius",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetReportedPosition",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetStabilityDamage",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int bitsToTest )",
            "name": "HasDamageType",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( float flScaleAmount )",
            "name": "ScaleDamage",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bAllow )",
            "name": "SetAllowFriendlyFire",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iAmmoType )",
            "name": "SetAmmoType",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hAttacker )",
            "name": "SetAttacker",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bBlock )",
            "name": "SetCanBeBlocked",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flDamage )",
            "name": "SetDamage",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iDamageCustom )",
            "name": "SetDamageCustom",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector damageForce )",
            "name": "SetDamageForce",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector damagePosition )",
            "name": "SetDamagePosition",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nDamageTaken )",
            "name": "SetDamageTaken",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int bitsDamageType )",
            "name": "SetDamageType",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flMaxDamage )",
            "name": "SetMaxDamage",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flOriginalDamage )",
            "name": "SetOriginalDamage",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float fRadius )",
            "name": "SetRadius",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector reportedPosition )",
            "name": "SetReportedPosition",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flStabilityDamage )",
            "name": "SetStabilityDamage",
            "return": "void"
        }
    ],
    "CDOTA_CustomUIManager": [
        {
            "desc": "为某玩家建立一个新的自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID/*shouldbeunique*/,stringLayoutFileName,tableDialogVariables/*canbenil*/)",
            "func": "( int_1, string_2, string_3, handle_4 )",
            "name": "DynamicHud_Create",
            "return": "void"
        },
        {
            "desc": "删除一个自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID)",
            "func": "( int_1, string_2 )",
            "name": "DynamicHud_Destroy",
            "return": "void"
        },
        {
            "desc": "为已有的用户界面元素添加/修改一个会话变量。(intPlayerID/*-1meanseveryone*/,stringElementID,tableDialogVariables)",
            "func": "( int_1, string_2, handle_3 )",
            "name": "DynamicHud_SetDialogVariables",
            "return": "void"
        },
        {
            "desc": "切换已有的用户见面元素的可见性。(intPlayerID/*-1meanseveryone*/,stringElementID,boolVisible)",
            "func": "( int_1, string_2, bool_3 )",
            "name": "DynamicHud_SetVisible",
            "return": "void"
        }
    ],
    "CDOTAGameManager": [
        {
            "desc": "Get the hero unit ",
            "func": "( string_1 )",
            "name": "GetHeroDataByName_Script",
            "return": "table"
        },
        {
            "desc": "Get the hero ID given the hero name.",
            "func": "( string_1 )",
            "name": "GetHeroIDByName",
            "return": "int"
        },
        {
            "desc": "Get the hero name given a hero ID.",
            "func": "( int_1 )",
            "name": "GetHeroNameByID",
            "return": "string"
        },
        {
            "desc": "Get the hero name given a unit name.",
            "func": "( string_1 )",
            "name": "GetHeroNameForUnitName",
            "return": "string"
        },
        {
            "desc": "Get the hero unit name given the hero ID.",
            "func": "( int_1 )",
            "name": "GetHeroUnitNameByID",
            "return": "string"
        }
    ],
    "CDOTA_MapTree": [
        {
            "desc": "砍掉这棵树",
            "func": "( int nTeamNumberKnownTo )",
            "name": "CutDown",
            "return": "void"
        },
        {
            "desc": "砍掉这棵树，一段时间后再生",
            "func": "( float flRegrowAfter, int nTeamNumberKnownTo )",
            "name": "CutDownRegrowAfter",
            "return": "void"
        },
        {
            "desc": "再生一棵被砍掉的树",
            "func": "()",
            "name": "GrowBack",
            "return": "void"
        },
        {
            "desc": "如果树站立着返回true,如果被砍掉返回false",
            "func": "()",
            "name": "IsStanding",
            "return": "bool"
        }
    ],
    "CEnvProjectedTexture": [
        {
            "desc": "设置光照最大距离",
            "func": "( float flRange )",
            "name": "SetFarRange",
            "return": "void"
        },
        {
            "desc": "设置光照线性淡化值",
            "func": "( float flAtten )",
            "name": "SetLinearAttenuation",
            "return": "void"
        },
        {
            "desc": "设置光照最小距离",
            "func": "( float flRange )",
            "name": "SetNearRange",
            "return": "void"
        },
        {
            "desc": "设置光照二次项淡化值",
            "func": "( float flAtten )",
            "name": "SetQuadraticAttenuation",
            "return": "void"
        },
        {
            "desc": "开关体积光参数:boolbOn,floatflIntensity,floatflNoise,intnPlanes,floatflPlaneOffset",
            "func": "( bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset )",
            "name": "SetVolumetrics",
            "return": "void"
        }
    ],
    "Vector": [
        {
            "desc": "矢量叉积",
            "func": "( Vector a, Vector b )",
            "name": "Cross",
            "return": "Vector"
        },
        {
            "desc": "矢量点积",
            "func": "( Vector a, Vector b )",
            "name": "Dot",
            "return": "float"
        },
        {
            "desc": "矢量长度（模）",
            "func": "()",
            "name": "Length",
            "return": "float"
        },
        {
            "desc": "矢量XY平面上长度（模）",
            "func": "()",
            "name": "Length2D",
            "return": "float"
        },
        {
            "desc": "返回单位矢量",
            "func": "()",
            "name": "Normalized",
            "return": "Vector"
        },
        {
            "desc": "重载+.矢量加运算",
            "func": "( Vector a, Vector b )",
            "name": "__add",
            "return": "Vector"
        },
        {
            "desc": "重载/.矢量除运算",
            "func": "( Vector a, Vector b )",
            "name": "__div",
            "return": "Vector"
        },
        {
            "desc": "重载==.矢量比较运算",
            "func": "( Vector a, Vector b )",
            "name": "__eq",
            "return": "bool"
        },
        {
            "desc": "重载#返回矢量长度",
            "func": "()",
            "name": "__len",
            "return": "float"
        },
        {
            "desc": "重载*返回矢量乘运算",
            "func": "( Vector a, Vector b )",
            "name": "__mul",
            "return": "Vector"
        },
        {
            "desc": "重载-.矢量减运算",
            "func": "( Vector a, Vector b )",
            "name": "__sub",
            "return": "Vector"
        },
        {
            "desc": "重载..转换矢量为字符串",
            "func": "()",
            "name": "__tostring",
            "return": "string"
        },
        {
            "desc": "重载-operator",
            "func": "()",
            "name": "__unm",
            "return": "Vector"
        }
    ],
    "CDOTA_Ability_Animation_TailSpin": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( float flRate )",
            "name": "SetPlaybackRate",
            "return": "void"
        }
    ],
    "CDOTA_Item_DataDriven": [
        {
            "desc": "应用一个数据驱动的Mordifier。",
            "func": "( handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable )",
            "name": "ApplyDataDrivenModifier",
            "return": "void"
        },
        {
            "desc": "应用一个数据驱动的计时器到指定地点。",
            "func": "( handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable )",
            "name": "ApplyDataDrivenThinker",
            "return": "handle"
        }
    ],
    "CDOTA_Modifier_Lua_Motion_Both": [
        {
            "desc": "启动水平运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "name": "ApplyHorizontalMotionController",
            "return": "bool"
        },
        {
            "desc": "启动垂直运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "name": "ApplyVerticalMotionController",
            "return": "bool"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "name": "GetPriority",
            "return": "int"
        },
        {
            "desc": "当水平运动被打断时进行回调。",
            "func": "()",
            "name": "OnHorizontalMotionInterrupted",
            "return": "void"
        },
        {
            "desc": "当竖直运动被打断时进行回调。",
            "func": "()",
            "name": "OnVerticalMotionInterrupted",
            "return": "void"
        },
        {
            "desc": "设置优先级。",
            "func": "( int nMotionPriority )",
            "name": "SetPriority",
            "return": "void"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动。",
            "func": "( handle me, float dt )",
            "name": "UpdateHorizontalMotion",
            "return": "void"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( handle me, float dt )",
            "name": "UpdateVerticalMotion",
            "return": "void"
        }
    ],
    "CDOTA_ItemSpawner": [
        {
            "desc": "Returns the item name",
            "func": "()",
            "name": "GetItemName",
            "return": "string"
        }
    ],
    "CDOTA_SimpleObstruction": [
        {
            "desc": "Returnswhethertheobstructioniscurrentlyactive",
            "func": "()",
            "name": "IsEnabled",
            "return": "bool"
        },
        {
            "desc": "Enableordisabletheobstruction",
            "func": "( bool bEnabled, bool bForce )",
            "name": "SetEnabled",
            "return": "void"
        }
    ],
    "CDOTA_Unit_Diretide_Portal": [
        {
            "desc": "",
            "func": "()",
            "name": "GetPartnerPortal",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ResetPortal",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nRuneType )",
            "name": "SetInvasionRuneType",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hPortal )",
            "name": "SetPartnerPortal",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bActive )",
            "name": "SetPortalActive",
            "return": "void"
        }
    ],
    "CLogicRelay": [
        {
            "desc": "Trigger( hActivator, hCaller ) : Triggers the logic_relay",
            "func": "( handle hActivator, handle hCaller )",
            "name": "Trigger",
            "return": "void"
        }
    ],
    "CDebugOverlayScriptHelper": [
        {
            "desc": "绘制一个轴线。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Quaternion_2, float_3, bool_4, float_5 )",
            "name": "Axis",
            "return": "void"
        },
        {
            "desc": "绘制一个世界空间轴向盒。在世界空间中指定边界",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "Box",
            "return": "void"
        },
        {
            "desc": "在出发点绘制一个定向盒。在世界空间中指定边界",
            "func": "( Vector_1, Vector_2, Vector_3, Quaternion_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "BoxAngles",
            "return": "void"
        },
        {
            "desc": "绘制一个胶囊体。在世界空间中指定基部",
            "func": "( Vector_1, Quaternion_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "Capsule",
            "return": "void"
        },
        {
            "desc": "绘制一个圆。在世界空间中指定中心",
            "func": "( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "Circle",
            "return": "void"
        },
        {
            "desc": "绘制一个指向屏幕的圆。在世界空间中指定中心",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "CircleScreenOriented",
            "return": "void"
        },
        {
            "desc": "绘制一个线框锥形。在世界空间中指定结束点和方向",
            "func": "( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "Cone",
            "return": "void"
        },
        {
            "desc": "绘制一个对齐屏幕的十字。在世界空间中指定出发点",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "Cross",
            "return": "void"
        },
        {
            "desc": "绘制一个对齐世界的十字。在世界空间中指定出发点",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "Cross3D",
            "return": "void"
        },
        {
            "desc": "绘制一个指向的十字。在世界空间中指定出发点",
            "func": "( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "Cross3DOriented",
            "return": "void"
        },
        {
            "desc": "绘制一个短划线。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "DrawTickMarkedLine",
            "return": "void"
        },
        {
            "desc": "绘制实体附件",
            "func": "( ehandle_1, float_2, float_3 )",
            "name": "EntityAttachments",
            "return": "void"
        },
        {
            "desc": "绘制实体源坐标轴",
            "func": "( ehandle_1, float_2, bool_3, float_4 )",
            "name": "EntityAxis",
            "return": "void"
        },
        {
            "desc": "绘制实体边界",
            "func": "( ehandle_1, int_2, int_3, int_4, int_5, bool_6, float_7 )",
            "name": "EntityBounds",
            "return": "void"
        },
        {
            "desc": "绘制实体骨架",
            "func": "( ehandle_1, float_2 )",
            "name": "EntitySkeleton",
            "return": "void"
        },
        {
            "desc": "在实体上绘制文本",
            "func": "( ehandle_1, int_2, string_3, int_4, int_5, int_6, int_7, float_8 )",
            "name": "EntityText",
            "return": "void"
        },
        {
            "desc": "绘制一个2D矩形填充的屏幕空间。按照像素对齐",
            "func": "( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
            "name": "FilledRect2D",
            "return": "void"
        },
        {
            "desc": "绘制一个水平箭头。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "HorzArrow",
            "return": "void"
        },
        {
            "desc": "绘制一个两点间连线",
            "func": "( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "Line",
            "return": "void"
        },
        {
            "desc": "绘制一个屏幕空间中亮点间连线",
            "func": "( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
            "name": "Line2D",
            "return": "void"
        },
        {
            "desc": "弹出蒙版分组用的标记，被标记的蒙版可被成批删除",
            "func": "()",
            "name": "PopDebugOverlayScope",
            "return": "void"
        },
        {
            "desc": "推入一个蒙版分组用的标记。删除所有使用该蒙版ID的蒙版",
            "func": "( utlstringtoken_1 )",
            "name": "PushAndClearDebugOverlayScope",
            "return": "void"
        },
        {
            "desc": "推入一个蒙版分组用的标记。被标记的蒙版可被成批删除",
            "func": "( utlstringtoken_1 )",
            "name": "PushDebugOverlayScope",
            "return": "void"
        },
        {
            "desc": "移除指定标记的全部蒙版，无视其生命周期",
            "func": "( utlstringtoken_1 )",
            "name": "RemoveAllInScope",
            "return": "void"
        },
        {
            "desc": "绘制一个固体锥。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "SolidCone",
            "return": "void"
        },
        {
            "desc": "绘制一个线框球体。在世界空间中指定中心",
            "func": "( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
            "name": "Sphere",
            "return": "void"
        },
        {
            "desc": "绘制一个扫描盒。在世界空间中指定结束点并在本地空间中指定边界",
            "func": "( Vector_1, Vector_2, Vector_3, Vector_4, Quaternion_5, int_6, int_7, int_8, int_9, float_10 )",
            "name": "SweptBox",
            "return": "void"
        },
        {
            "desc": "绘制2D文本。在世界空间中指定出发点",
            "func": "( Vector_1, int_2, string_3, float_4, int_5, int_6, int_7, int_8, float_9 )",
            "name": "Text",
            "return": "void"
        },
        {
            "desc": "绘制一个屏幕空间纹理。按照像素对齐",
            "func": "( string_1, Vector2D_2, Vector2D_3, int_4, int_5, int_6, int_7, Vector2D_8, Vector2D_9, float_10 )",
            "name": "Texture",
            "return": "void"
        },
        {
            "desc": "绘制一个填充三角形。在世界空间中指定顶部",
            "func": "( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "Triangle",
            "return": "void"
        },
        {
            "desc": "转换蒙版混合类型,用于单位测试",
            "func": "()",
            "name": "UnitTestCycleOverlayRenderType",
            "return": "void"
        },
        {
            "desc": "绘制3D文本。在世界空间中指定出发点和方向",
            "func": "( Vector_1, Quaternion_2, string_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "VectorText3D",
            "return": "void"
        },
        {
            "desc": "绘制一个垂直箭头。在世界空间中指定结束点",
            "func": "( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
            "name": "VertArrow",
            "return": "void"
        },
        {
            "desc": "绘制一个指定偏航角的箭头。在世界空间中指定结束点",
            "func": "( Vector_1, float_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
            "name": "YawArrow",
            "return": "void"
        }
    ],
    "CDOTA_Ability_Aghanim_Spear": [
        {
            "desc": "Launch Spear to a target position from a source position",
            "func": "( Vector vTarget, Vector vStart )",
            "name": "LaunchSpear",
            "return": "void"
        }
    ],
    "CDOTA_Unit_Courier": [],
    "CDotaQuest": [
        {
            "desc": "为该任务添加子任务",
            "func": "( handle hSubquest )",
            "name": "AddSubquest",
            "return": "void"
        },
        {
            "desc": "标记该任务完成",
            "func": "()",
            "name": "CompleteQuest",
            "return": "void"
        },
        {
            "desc": "用索引号找到该任务的子任务",
            "func": "( int nIndex )",
            "name": "GetSubquest",
            "return": "handle"
        },
        {
            "desc": "用任务名称找到该任务的子任务",
            "func": "( string pszName )",
            "name": "GetSubquestByName",
            "return": "handle"
        },
        {
            "desc": "从该任务移除一个子任务",
            "func": "( handle hSubquest )",
            "name": "RemoveSubquest",
            "return": "void"
        },
        {
            "desc": "设置该任务的文本取代字符串",
            "func": "( string pszString )",
            "name": "SetTextReplaceString",
            "return": "void"
        },
        {
            "desc": "设置任务数值",
            "func": "( int valueSlot, int value )",
            "name": "SetTextReplaceValue",
            "return": "void"
        }
    ],
    "CDOTA_BaseNPC_Trap_Ward": [
        {
            "desc": "Get the trap target for this entity.",
            "func": "()",
            "name": "GetTrapTarget",
            "return": "Vector"
        },
        {
            "desc": "Set the animation sequence for this entity.",
            "func": "( string pAnimation )",
            "name": "SetAnimation",
            "return": "void"
        }
    ],
    "CDOTA_Ability_Nian_Dive": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( float flRate )",
            "name": "SetPlaybackRate",
            "return": "void"
        }
    ],
    "CFoWBlockerRegion": [
        {
            "desc": "AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle",
            "func": "( Vector vMins, Vector vMaxs, bool bClearRegion )",
            "name": "AddRectangularBlocker",
            "return": "void"
        },
        {
            "desc": "AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline",
            "func": "( Vector vMins, Vector vMaxs, bool bClearRegion )",
            "name": "AddRectangularOutlineBlocker",
            "return": "void"
        }
    ],
    "CEntityScriptFramework": [],
    "CMarkupVolumeTagged": [
        {
            "desc": "查询该卷是否带有指定标签",
            "func": "( string pszTagName )",
            "name": "HasTag",
            "return": "bool"
        }
    ],
    "GlobalSys": [
        {
            "desc": "CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
            "func": "( string_1 )",
            "name": "CommandLineCheck",
            "return": "table"
        },
        {
            "desc": "CommandLineFloat(name) : returns the command line param as a float.",
            "func": "( string_1, float_2 )",
            "name": "CommandLineFloat",
            "return": "table"
        },
        {
            "desc": "CommandLineInt(name) : returns the command line param as an int.",
            "func": "( string_1, int_2 )",
            "name": "CommandLineInt",
            "return": "table"
        },
        {
            "desc": "CommandLineStr(name) : returns the command line param as a string.",
            "func": "( string_1, string_2 )",
            "name": "CommandLineStr",
            "return": "table"
        }
    ],
    "CPointTemplate": [
        {
            "desc": "删除任何该点模板的刷新组。提示：并不删除点模板",
            "func": "()",
            "name": "DeleteCreatedSpawnGroups",
            "return": "void"
        },
        {
            "desc": "强制刷新该点模板指向的全部实体",
            "func": "()",
            "name": "ForceSpawn",
            "return": "void"
        },
        {
            "desc": "获取最近被刷新的实体",
            "func": "()",
            "name": "GetSpawnedEntities",
            "return": "handle"
        },
        {
            "desc": "设置刷新回调（hCallbackFunc,hCallbackScope,hCallbackData），当模板产生实体时回调。被刷新的实体作为数组被传入",
            "func": "( handle hCallbackFunc, handle hCallbackScope )",
            "name": "SetSpawnCallback",
            "return": "void"
        }
    ],
    "CDOTAPlayer": [
        {
            "desc": "Attempt to spawn the appropriate couriers for this mode.",
            "func": "( handle hHero )",
            "name": "CheckForCourierSpawning",
            "return": "void"
        },
        {
            "desc": "获取该玩家的英雄",
            "func": "()",
            "name": "GetAssignedHero",
            "return": "handle"
        },
        {
            "desc": "获取该玩家的官方玩家ID（PlayerID）玩家不在队伍中时返回-1",
            "func": "()",
            "name": "GetPlayerID",
            "return": "int"
        },
        {
            "desc": "随机该玩家的英雄",
            "func": "()",
            "name": "MakeRandomHeroSelection",
            "return": "void"
        },
        {
            "desc": "Sets this player's hero .",
            "func": "( handle hHero )",
            "name": "SetAssignedHeroEntity",
            "return": "void"
        },
        {
            "desc": "设置英雄的击杀镜头单位（killcamunit）",
            "func": "( handle hEntity )",
            "name": "SetKillCamUnit",
            "return": "void"
        },
        {
            "desc": "设置玩家的音乐状态，注意这只有在dota_music_battle_enable为off时才会有效",
            "func": "( int nMusicStatus, float flIntensity )",
            "name": "SetMusicStatus",
            "return": "void"
        },
        {
            "desc": "Sets this player's hero selection.",
            "func": "( string pszHeroName )",
            "name": "SetSelectedHero",
            "return": "void"
        },
        {
            "desc": "Spawn a courier for this player at the given position.",
            "func": "( Vector vLocation )",
            "name": "SpawnCourierAtPosition",
            "return": "handle"
        }
    ],
    "CBodyComponent": [
        {
            "desc": "在指定的世界位置施加一个物理推动",
            "func": "( Vector_1, Vector_2 )",
            "name": "AddImpulseAtPosition",
            "return": "void"
        },
        {
            "desc": "为物理物件增加一个线速度或角速度",
            "func": "( Vector_1, Vector_2 )",
            "name": "AddVelocity",
            "return": "void"
        },
        {
            "desc": "从其父项（parent）中分离",
            "func": "()",
            "name": "DetachFromParent",
            "return": "void"
        },
        {
            "desc": "返回激活的序列（sequence）",
            "func": "()",
            "name": "GetSequence",
            "return": "<unknown>"
        },
        {
            "desc": "是否依附父项（parent）",
            "func": "()",
            "name": "IsAttachedToParent",
            "return": "bool"
        },
        {
            "desc": "输入名字返回序列（sequence）ID",
            "func": "( string_1 )",
            "name": "LookupSequence",
            "return": "<unknown>"
        },
        {
            "desc": "按秒数返回指定序列（sequence）的持续时间",
            "func": "( string_1 )",
            "name": "SequenceDuration",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "name": "SetAngularVelocity",
            "return": "void"
        },
        {
            "desc": "输入动画名称播放动作，需要模型拥有该动画",
            "func": "( string_1 )",
            "name": "SetAnimation",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( utlstringtoken_1 )",
            "name": "SetMaterialGroup",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector_1 )",
            "name": "SetVelocity",
            "return": "void"
        }
    ],
    "CDOTA_Item_BagOfGold": [
        {
            "desc": "Set the life time of this item",
            "func": "( float flTime )",
            "name": "SetLifeTime",
            "return": "void"
        }
    ],
    "Constants": {
        "subquest_text_replace_values_t": [
            {
                "desc": "",
                "name": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
                "value": 0
            },
            {
                "desc": "",
                "name": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
                "value": 1
            },
            {
                "desc": "",
                "name": "SUBQUEST_NUM_TEXT_REPLACE_VALUES",
                "value": 2
            }
        ],
        "DAMAGE_TYPES": [
            {
                "desc": "",
                "name": "DAMAGE_TYPE_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DAMAGE_TYPE_PHYSICAL",
                "value": 1
            },
            {
                "desc": "",
                "name": "DAMAGE_TYPE_MAGICAL",
                "value": 2
            },
            {
                "desc": "",
                "name": "DAMAGE_TYPE_PURE",
                "value": 4
            },
            {
                "desc": "",
                "name": "DAMAGE_TYPE_ALL",
                "value": 7
            },
            {
                "desc": "",
                "name": "DAMAGE_TYPE_HP_REMOVAL",
                "value": 8
            }
        ],
        "DOTA_HeroPickState": [
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_AP_SELECT",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_SD_SELECT",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_INTRO",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN1",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN2",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN3",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN4",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN5",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN6",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN7",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN8",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN9",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN10",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN11",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN12",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN13",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_BAN14",
                "value": 20
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT1",
                "value": 21
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT2",
                "value": 22
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT3",
                "value": 23
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT4",
                "value": 24
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT5",
                "value": 25
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT6",
                "value": 26
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT7",
                "value": 27
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT8",
                "value": 28
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT9",
                "value": 29
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_SELECT10",
                "value": 30
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CM_PICK",
                "value": 31
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_AR_SELECT",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_MO_SELECT",
                "value": 33
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_FH_SELECT",
                "value": 34
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_INTRO",
                "value": 35
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
                "value": 36
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN1",
                "value": 37
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN2",
                "value": 38
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN3",
                "value": 39
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN4",
                "value": 40
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN5",
                "value": 41
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_BAN6",
                "value": 42
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT1",
                "value": 43
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT2",
                "value": 44
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT3",
                "value": 45
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT4",
                "value": 46
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT5",
                "value": 47
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT6",
                "value": 48
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT7",
                "value": 49
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT8",
                "value": 50
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT9",
                "value": 51
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_SELECT10",
                "value": 52
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CD_PICK",
                "value": 53
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_BD_SELECT",
                "value": 54
            },
            {
                "desc": "",
                "name": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
                "value": 55
            },
            {
                "desc": "",
                "name": "DOTA_HERO_PICK_STATE_ARDM_SELECT",
                "value": 56
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
                "value": 57
            },
            {
                "desc": "",
                "name": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
                "value": 58
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_SELECT_PENALTY",
                "value": 59
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
                "value": 60
            },
            {
                "desc": "",
                "name": "DOTA_HEROPICK_STATE_COUNT",
                "value": 61
            }
        ],
        "LuaModifierType": [
            {
                "desc": "",
                "name": "LUA_MODIFIER_MOTION_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "LUA_MODIFIER_MOTION_HORIZONTAL",
                "value": 1
            },
            {
                "desc": "",
                "name": "LUA_MODIFIER_MOTION_VERTICAL",
                "value": 2
            },
            {
                "desc": "",
                "name": "LUA_MODIFIER_MOTION_BOTH",
                "value": 3
            },
            {
                "desc": "",
                "name": "LUA_MODIFIER_INVALID",
                "value": 4
            }
        ],
        "DOTAAbilitySpeakTrigger_t": [
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_SPEAK_CAST",
                "value": 1
            }
        ],
        "DOTA_RUNES": [
            {
                "desc": "",
                "name": "DOTA_RUNE_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_DOUBLEDAMAGE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_HASTE",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_ILLUSION",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_INVISIBILITY",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_REGENERATION",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_BOUNTY",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_ARCANE",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_XP",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_RUNE_COUNT",
                "value": 8
            }
        ],
        "EDOTA_ModifyGold_Reason": [
            {
                "desc": "",
                "name": "DOTA_ModifyGold_Unspecified",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_Death",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_Buyback",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_PurchaseConsumable",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_PurchaseItem",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_AbandonedRedistribute",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_SellItem",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_AbilityCost",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_CheatCommand",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_SelectionPenalty",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_GameTick",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_Building",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_HeroKill",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_CreepKill",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_NeutralKill",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_RoshanKill",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_CourierKill",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_BountyRune",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_SharedGold",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_AbilityGold",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_ModifyGold_WardKill",
                "value": 20
            }
        ],
        "UnitFilterResult": [
            {
                "desc": "",
                "name": "UF_SUCCESS",
                "value": 0
            },
            {
                "desc": "",
                "name": "UF_FAIL_FRIENDLY",
                "value": 1
            },
            {
                "desc": "",
                "name": "UF_FAIL_ENEMY",
                "value": 2
            },
            {
                "desc": "",
                "name": "UF_FAIL_HERO",
                "value": 3
            },
            {
                "desc": "",
                "name": "UF_FAIL_CONSIDERED_HERO",
                "value": 4
            },
            {
                "desc": "",
                "name": "UF_FAIL_CREEP",
                "value": 5
            },
            {
                "desc": "",
                "name": "UF_FAIL_BUILDING",
                "value": 6
            },
            {
                "desc": "",
                "name": "UF_FAIL_COURIER",
                "value": 7
            },
            {
                "desc": "",
                "name": "UF_FAIL_OTHER",
                "value": 8
            },
            {
                "desc": "",
                "name": "UF_FAIL_ANCIENT",
                "value": 9
            },
            {
                "desc": "",
                "name": "UF_FAIL_ILLUSION",
                "value": 10
            },
            {
                "desc": "",
                "name": "UF_FAIL_SUMMONED",
                "value": 11
            },
            {
                "desc": "",
                "name": "UF_FAIL_DOMINATED",
                "value": 12
            },
            {
                "desc": "",
                "name": "UF_FAIL_MELEE",
                "value": 13
            },
            {
                "desc": "",
                "name": "UF_FAIL_RANGED",
                "value": 14
            },
            {
                "desc": "",
                "name": "UF_FAIL_DEAD",
                "value": 15
            },
            {
                "desc": "",
                "name": "UF_FAIL_MAGIC_IMMUNE_ALLY",
                "value": 16
            },
            {
                "desc": "",
                "name": "UF_FAIL_MAGIC_IMMUNE_ENEMY",
                "value": 17
            },
            {
                "desc": "",
                "name": "UF_FAIL_INVULNERABLE",
                "value": 18
            },
            {
                "desc": "",
                "name": "UF_FAIL_IN_FOW",
                "value": 19
            },
            {
                "desc": "",
                "name": "UF_FAIL_INVISIBLE",
                "value": 20
            },
            {
                "desc": "",
                "name": "UF_FAIL_NOT_PLAYER_CONTROLLED",
                "value": 21
            },
            {
                "desc": "",
                "name": "UF_FAIL_ATTACK_IMMUNE",
                "value": 22
            },
            {
                "desc": "",
                "name": "UF_FAIL_CUSTOM",
                "value": 23
            },
            {
                "desc": "",
                "name": "UF_FAIL_INVALID_LOCATION",
                "value": 24
            },
            {
                "desc": "",
                "name": "UF_FAIL_DISABLE_HELP",
                "value": 25
            },
            {
                "desc": "",
                "name": "UF_FAIL_OUT_OF_WORLD",
                "value": 26
            },
            {
                "desc": "",
                "name": "UF_FAIL_NIGHTMARED",
                "value": 27
            },
            {
                "desc": "",
                "name": "UF_FAIL_OBSTRUCTED",
                "value": 28
            }
        ],
        "DOTA_UNIT_TARGET_FLAGS": [
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_DEAD",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
                "value": 128
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NO_INVIS",
                "value": 256
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
                "value": 512
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
                "value": 1024
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
                "value": 2048
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
                "value": 4096
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
                "value": 8192
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
                "value": 16384
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
                "value": 32768
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
                "value": 65536
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
                "value": 131072
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
                "value": 262144
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
                "value": 524288
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
                "value": 1048576
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
                "value": 2097152
            }
        ],
        "DOTA_SHOP_TYPE": [
            {
                "desc": "",
                "name": "DOTA_SHOP_HOME",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_SIDE",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_SECRET",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_GROUND",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_SIDE2",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_SECRET2",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_CUSTOM",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_NEUTRALS",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_SHOP_NONE",
                "value": 8
            }
        ],
        "DOTAScriptInventorySlot_t": [
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_1",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_2",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_3",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_4",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_5",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_6",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_7",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_8",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_ITEM_SLOT_9",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_1",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_2",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_3",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_4",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_5",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_STASH_SLOT_6",
                "value": 14
            }
        ],
        "DOTA_UNIT_TARGET_TEAM": [
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TEAM_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TEAM_FRIENDLY",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TEAM_ENEMY",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TEAM_BOTH",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TEAM_CUSTOM",
                "value": 4
            }
        ],
        "ABILITY_TYPES": [
            {
                "desc": "",
                "name": "ABILITY_TYPE_BASIC",
                "value": 0
            },
            {
                "desc": "",
                "name": "ABILITY_TYPE_ULTIMATE",
                "value": 1
            },
            {
                "desc": "",
                "name": "ABILITY_TYPE_ATTRIBUTES",
                "value": 2
            },
            {
                "desc": "",
                "name": "ABILITY_TYPE_HIDDEN",
                "value": 3
            }
        ],
        "Attributes": [
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_STRENGTH",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_AGILITY",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_INTELLECT",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_MAX",
                "value": 3
            }
        ],
        "DOTAHUDVisibility_t": [
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_HEROES",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_ACTION_PANEL",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM",
                "value": 20
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR_SCORE",
                "value": 21
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_ENDGAME",
                "value": 22
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_ENDGAME_CHAT",
                "value": 23
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_QUICK_STATS",
                "value": 24
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI",
                "value": 25
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_KILLCAM",
                "value": 26
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_TOP_BAR",
                "value": 27
            },
            {
                "desc": "",
                "name": "DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS",
                "value": 28
            },
            {
                "desc": "",
                "name": "DOTA_HUD_VISIBILITY_COUNT",
                "value": 29
            }
        ],
        "DOTALimits_t": [
            {
                "desc": "Default number of players per team.",
                "name": "DOTA_DEFAULT_MAX_TEAM",
                "value": 5
            },
            {
                "desc": "Default number of non-spectator players supported.",
                "name": "DOTA_DEFAULT_MAX_TEAM_PLAYERS",
                "value": 10
            },
            {
                "desc": "Max number of player teams supported.",
                "name": "DOTA_MAX_PLAYER_TEAMS",
                "value": 10
            },
            {
                "desc": "Max number of viewers in a spectator lobby.",
                "name": "DOTA_MAX_SPECTATOR_LOBBY_SIZE",
                "value": 15
            },
            {
                "desc": "Max number of non-spectator players supported.",
                "name": "DOTA_MAX_TEAM_PLAYERS",
                "value": 24
            },
            {
                "desc": "Max number of players per team.",
                "name": "DOTA_MAX_TEAM",
                "value": 24
            },
            {
                "desc": "How many spectators can watch.",
                "name": "DOTA_MAX_SPECTATOR_TEAM_SIZE",
                "value": 40
            },
            {
                "desc": "Max number of players connected to the server including spectators.",
                "name": "DOTA_MAX_PLAYERS",
                "value": 64
            }
        ],
        "DamageCategory_t": [
            {
                "desc": "",
                "name": "DOTA_DAMAGE_CATEGORY_SPELL",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_CATEGORY_ATTACK",
                "value": 1
            }
        ],
        "DOTAInventoryFlags_t": [
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALLOW_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALLOW_MAIN",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALLOW_STASH",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALL_ACCESS",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
                "value": 16
            }
        ],
        "DOTAProjectileAttachment_t": [
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_1",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_2",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_HITLOCATION",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_3",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_ATTACK_4",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_PROJECTILE_ATTACHMENT_LAST",
                "value": 6
            }
        ],
        "quest_text_replace_values_t": [
            {
                "desc": "",
                "name": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
                "value": 0
            },
            {
                "desc": "",
                "name": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
                "value": 1
            },
            {
                "desc": "",
                "name": "QUEST_TEXT_REPLACE_VALUE_ROUND",
                "value": 2
            },
            {
                "desc": "",
                "name": "QUEST_TEXT_REPLACE_VALUE_REWARD",
                "value": 3
            },
            {
                "desc": "",
                "name": "QUEST_NUM_TEXT_REPLACE_VALUES",
                "value": 4
            }
        ],
        "modifierremove": [
            {
                "desc": "",
                "name": "DOTA_BUFF_REMOVE_ALL",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_BUFF_REMOVE_ENEMY",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_BUFF_REMOVE_ALLY",
                "value": 2
            }
        ],
        "AttributeDerivedStats": [
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_AGILITY_DAMAGE",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_AGILITY_ARMOR",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
                "value": 8
            }
        ],
        "DOTA_UNIT_TARGET_TYPE": [
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_HERO",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_CREEP",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_BUILDING",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_COURIER",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_BASIC",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_OTHER",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_ALL",
                "value": 55
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_TREE",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_TARGET_CUSTOM",
                "value": 128
            }
        ],
        "AdditionalContants": [
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_BLOCK",
                "value": 8
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_BLOCKED",
                "value": 21
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_BONUS_POISON_DAMAGE",
                "value": 9
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_BONUS_SPELL_DAMAGE",
                "value": 4
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_CRITICAL",
                "value": 2
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_DAMAGE",
                "value": 6
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_DEATH",
                "value": 20
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_DENY",
                "value": 1
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_DISABLE_RESIST",
                "value": 19
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_EVADE",
                "value": 7
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_GOLD",
                "value": 0
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_HEAL",
                "value": 10
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_INCOMING_DAMAGE",
                "value": 17
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_LAST_HIT_CLOSE",
                "value": 14
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_LAST_HIT_EARLY",
                "value": 13
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_LAST_HIT_MISS",
                "value": 15
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_MAGICAL_BLOCK",
                "value": 16
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_MANA_ADD",
                "value": 11
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_MANA_LOSS",
                "value": 12
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_MISS",
                "value": 5
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_OUTGOING_DAMAGE",
                "value": 18
            },
            {
                "desc": "",
                "name": "OVERHEAD_ALERT_XP",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_ATTACK_MOVE",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_ATTACK_TARGET",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_BUYBACK",
                "value": 23
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_NO_TARGET",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_POSITION",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_RIVER_PAINT",
                "value": 35
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_RUNE",
                "value": 26
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_TARGET",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_TOGGLE",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
                "value": 20
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_CONTINUE",
                "value": 33
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_DROP_ITEM",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
                "value": 25
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_GIVE_ITEM",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_GLYPH",
                "value": 24
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_HOLD_POSITION",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_MOVE_ITEM",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
                "value": 28
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PATROL",
                "value": 29
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PICKUP_ITEM",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PICKUP_RUNE",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PING_ABILITY",
                "value": 27
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT",
                "value": 36
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_PURCHASE_ITEM",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_RADAR",
                "value": 31
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_SELL_ITEM",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_STOP",
                "value": 21
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_TAUNT",
                "value": 22
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_TRAIN_ABILITY",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED",
                "value": 34
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION",
                "value": 30
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_ABANDONED",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_CONNECTED",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_DISCONNECTED",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_FAILED",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_LOADING",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_CONNECTION_STATE_UNKNOWN",
                "value": 0
            },
            {
                "desc": "",
                "name": "DMG_ACID",
                "value": 1048576
            },
            {
                "desc": "",
                "name": "DMG_AIRBOAT"
            },
            {
                "desc": "",
                "name": "DMG_ALWAYSGIB",
                "value": 8192
            },
            {
                "desc": "",
                "name": "DMG_BLAST",
                "value": 64
            },
            {
                "desc": "",
                "name": "DMG_BLAST_SURFACE"
            },
            {
                "desc": "",
                "name": "DMG_BUCKSHOT"
            },
            {
                "desc": "",
                "name": "DMG_BULLET",
                "value": 2
            },
            {
                "desc": "",
                "name": "DMG_BURN",
                "value": 8
            },
            {
                "desc": "",
                "name": "DMG_CLUB",
                "value": 128
            },
            {
                "desc": "",
                "name": "DMG_CRUSH",
                "value": 1
            },
            {
                "desc": "",
                "name": "DMG_DIRECT"
            },
            {
                "desc": "",
                "name": "DMG_DISSOLVE"
            },
            {
                "desc": "",
                "name": "DMG_DROWN",
                "value": 16384
            },
            {
                "desc": "",
                "name": "DMG_DROWNRECOVER",
                "value": 524288
            },
            {
                "desc": "",
                "name": "DMG_ENERGYBEAM",
                "value": 1024
            },
            {
                "desc": "",
                "name": "DMG_FALL",
                "value": 32
            },
            {
                "desc": "",
                "name": "DMG_GENERIC",
                "value": 0
            },
            {
                "desc": "",
                "name": "DMG_NERVEGAS",
                "value": 65536
            },
            {
                "desc": "",
                "name": "DMG_NEVERGIB",
                "value": 4096
            },
            {
                "desc": "",
                "name": "DMG_PARALYZE",
                "value": 32768
            },
            {
                "desc": "",
                "name": "DMG_PHYSGUN",
                "value": 8388608
            },
            {
                "desc": "",
                "name": "DMG_PLASMA",
                "value": 16777216
            },
            {
                "desc": "",
                "name": "DMG_POISON",
                "value": 131072
            },
            {
                "desc": "",
                "name": "DMG_PREVENT_PHYSICS_FORCE",
                "value": 2048
            },
            {
                "desc": "",
                "name": "DMG_RADIATION",
                "value": 262144
            },
            {
                "desc": "",
                "name": "DMG_REMOVENORAGDOLL",
                "value": 4194304
            },
            {
                "desc": "",
                "name": "DMG_SHOCK",
                "value": 256
            },
            {
                "desc": "",
                "name": "DMG_SLASH",
                "value": 4
            },
            {
                "desc": "",
                "name": "DMG_SLOWBURN",
                "value": 2097152
            },
            {
                "desc": "",
                "name": "DMG_SONIC",
                "value": 512
            },
            {
                "desc": "",
                "name": "DMG_VEHICLE",
                "value": 16
            }
        ],
        "modifierstate": [
            {
                "desc": "",
                "name": "MODIFIER_STATE_ROOTED",
                "value": 0
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_DISARMED",
                "value": 1
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_ATTACK_IMMUNE",
                "value": 2
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_SILENCED",
                "value": 3
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_MUTED",
                "value": 4
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_STUNNED",
                "value": 5
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_HEXED",
                "value": 6
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_INVISIBLE",
                "value": 7
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_INVULNERABLE",
                "value": 8
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_MAGIC_IMMUNE",
                "value": 9
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_PROVIDES_VISION",
                "value": 10
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NIGHTMARED",
                "value": 11
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_BLOCK_DISABLED",
                "value": 12
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_EVADE_DISABLED",
                "value": 13
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_UNSELECTABLE",
                "value": 14
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
                "value": 15
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_CANNOT_MISS",
                "value": 16
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_SPECIALLY_DENIABLE",
                "value": 17
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_FROZEN",
                "value": 18
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_COMMAND_RESTRICTED",
                "value": 19
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP",
                "value": 20
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_LOW_ATTACK_PRIORITY",
                "value": 21
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NO_HEALTH_BAR",
                "value": 22
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_FLYING",
                "value": 23
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NO_UNIT_COLLISION",
                "value": 24
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NO_TEAM_MOVE_TO",
                "value": 25
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NO_TEAM_SELECT",
                "value": 26
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_PASSIVES_DISABLED",
                "value": 27
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_DOMINATED",
                "value": 28
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_BLIND",
                "value": 29
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_OUT_OF_GAME",
                "value": 30
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_FAKE_ALLY",
                "value": 31
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
                "value": 32
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_TRUESIGHT_IMMUNE",
                "value": 33
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_UNTARGETABLE",
                "value": 34
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
                "value": 35
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES",
                "value": 36
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
                "value": 37
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_UNSLOWABLE",
                "value": 38
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_TETHERED",
                "value": 39
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_IGNORING_STOP_ORDERS",
                "value": 40
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_FEARED",
                "value": 41
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_TAUNTED",
                "value": 42
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED",
                "value": 43
            },
            {
                "desc": "",
                "name": "MODIFIER_STATE_LAST",
                "value": 44
            }
        ],
        "modifierpriority": [
            {
                "desc": "",
                "name": "MODIFIER_PRIORITY_LOW",
                "value": 0
            },
            {
                "desc": "",
                "name": "MODIFIER_PRIORITY_NORMAL",
                "value": 1
            },
            {
                "desc": "",
                "name": "MODIFIER_PRIORITY_HIGH",
                "value": 2
            },
            {
                "desc": "",
                "name": "MODIFIER_PRIORITY_ULTRA",
                "value": 3
            },
            {
                "desc": "",
                "name": "MODIFIER_PRIORITY_SUPER_ULTRA",
                "value": 4
            }
        ],
        "DOTAMusicStatus_t": [
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_EXPLORATION",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_BATTLE",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_DEAD",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_MUSIC_STATUS_LAST",
                "value": 5
            }
        ],
        "DOTAModifierAttribute_t": [
            {
                "desc": "",
                "name": "MODIFIER_ATTRIBUTE_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "MODIFIER_ATTRIBUTE_PERMANENT",
                "value": 1
            },
            {
                "desc": "",
                "name": "MODIFIER_ATTRIBUTE_MULTIPLE",
                "value": 2
            },
            {
                "desc": "",
                "name": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
                "value": 4
            },
            {
                "desc": "",
                "name": "MODIFIER_ATTRIBUTE_AURA_PRIORITY",
                "value": 8
            }
        ],
        "DOTAMinimapEvent_t": [
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_BASE_GLYPHED",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
                "value": 128
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
                "value": 256
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_HINT_LOCATION",
                "value": 512
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
                "value": 1024
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
                "value": 2048
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_RADAR",
                "value": 4096
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_RADAR_TARGET",
                "value": 8192
            },
            {
                "desc": "",
                "name": "DOTA_MINIMAP_EVENT_MOVE_TO_TARGET",
                "value": 16384
            }
        ],
        "attackfail": [
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_NO",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_CANNOT_FAIL",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION",
                "value": 7
            }
        ],
        "DOTASpeechType_t": [
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_INVALID",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_SINGLE",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_TEAM",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_TEAM_NEARBY",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_NEARBY",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_ALL",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_GOOD_TEAM",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_BAD_TEAM",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_SPECTATOR",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_USER_TEAM_NOSPECTATOR",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_SPEECH_RECIPIENT_TYPE_MAX",
                "value": 10
            }
        ],
        "DotaDefaultUIElement_t": [
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_TIMEOFDAY",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_HEROES",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_ACTION_PANEL",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_ACTION_MINIMAP",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_PANEL",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_SHOP",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_ITEMS",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_QUICKBUY",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_COURIER",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_PROTECT",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_INVENTORY_GOLD",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_SHOP_COMMONITEMS",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_MENU_BUTTONS",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM",
                "value": 20
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_BAR_SCORE",
                "value": 21
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_ENDGAME",
                "value": 22
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_ENDGAME_CHAT",
                "value": 23
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_QUICK_STATS",
                "value": 24
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_PREGAME_STRATEGYUI",
                "value": 25
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_KILLCAM",
                "value": 26
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_TOP_BAR",
                "value": 27
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS",
                "value": 28
            },
            {
                "desc": "",
                "name": "DOTA_DEFAULT_UI_ELEMENT_COUNT",
                "value": 29
            }
        ],
        "GameActivity_t": [
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE",
                "value": 1500
            },
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE_RARE",
                "value": 1501
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RUN",
                "value": 1502
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ATTACK",
                "value": 1503
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ATTACK2",
                "value": 1504
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ATTACK_EVENT",
                "value": 1505
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DIE",
                "value": 1506
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FLINCH",
                "value": 1507
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FLAIL",
                "value": 1508
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DISABLED",
                "value": 1509
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_1",
                "value": 1510
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2",
                "value": 1511
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_3",
                "value": 1512
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_4",
                "value": 1513
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_5",
                "value": 1514
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_6",
                "value": 1515
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_1",
                "value": 1516
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_2",
                "value": 1517
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_3",
                "value": 1518
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_ABILITY_4",
                "value": 1519
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_1",
                "value": 1520
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_2",
                "value": 1521
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_3",
                "value": 1522
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_4",
                "value": 1523
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_5",
                "value": 1524
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_6",
                "value": 1525
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_1",
                "value": 1526
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_2",
                "value": 1527
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_3",
                "value": 1528
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_4",
                "value": 1529
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_5",
                "value": 1530
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_END_ABILITY_6",
                "value": 1531
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CONSTANT_LAYER",
                "value": 1532
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAPTURE",
                "value": 1533
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SPAWN",
                "value": 1534
            },
            {
                "desc": "",
                "name": "ACT_DOTA_KILLTAUNT",
                "value": 1535
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TAUNT",
                "value": 1536
            },
            {
                "desc": "",
                "name": "ACT_DOTA_THIRST",
                "value": 1537
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_DRAGONBREATH",
                "value": 1538
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ECHO_SLAM",
                "value": 1539
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_1_END",
                "value": 1540
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2_END",
                "value": 1541
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_3_END",
                "value": 1542
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_4_END",
                "value": 1543
            },
            {
                "desc": "",
                "name": "ACT_MIRANA_LEAP_END",
                "value": 1544
            },
            {
                "desc": "",
                "name": "ACT_WAVEFORM_START",
                "value": 1545
            },
            {
                "desc": "",
                "name": "ACT_WAVEFORM_END",
                "value": 1546
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_ROT",
                "value": 1547
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DIE_SPECIAL",
                "value": 1548
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
                "value": 1549
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RATTLETRAP_POWERCOGS",
                "value": 1550
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
                "value": 1551
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
                "value": 1552
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
                "value": 1553
            },
            {
                "desc": "",
                "name": "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
                "value": 1554
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TINKER_REARM1",
                "value": 1555
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TINKER_REARM2",
                "value": 1556
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TINKER_REARM3",
                "value": 1557
            },
            {
                "desc": "",
                "name": "ACT_TINY_AVALANCHE",
                "value": 1558
            },
            {
                "desc": "",
                "name": "ACT_TINY_TOSS",
                "value": 1559
            },
            {
                "desc": "",
                "name": "ACT_TINY_GROWL",
                "value": 1560
            },
            {
                "desc": "",
                "name": "ACT_DOTA_WEAVERBUG_ATTACH",
                "value": 1561
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_WILD_AXES_END",
                "value": 1562
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_LIFE_BREAK_START",
                "value": 1563
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_LIFE_BREAK_END",
                "value": 1564
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIGHTSTALKER_TRANSITION",
                "value": 1565
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_RAGE",
                "value": 1566
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
                "value": 1567
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SAND_KING_BURROW_IN",
                "value": 1568
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SAND_KING_BURROW_OUT",
                "value": 1569
            },
            {
                "desc": "",
                "name": "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
                "value": 1570
            },
            {
                "desc": "",
                "name": "ACT_DOTA_WHEEL_LAYER",
                "value": 1571
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
                "value": 1572
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ALCHEMIST_CONCOCTION",
                "value": 1573
            },
            {
                "desc": "",
                "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
                "value": 1574
            },
            {
                "desc": "",
                "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
                "value": 1575
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_INFEST",
                "value": 1576
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_INFEST_END",
                "value": 1577
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LASSO_LOOP",
                "value": 1578
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
                "value": 1579
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
                "value": 1580
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_COLD_SNAP",
                "value": 1581
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_GHOST_WALK",
                "value": 1582
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_TORNADO",
                "value": 1583
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_EMP",
                "value": 1584
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ALACRITY",
                "value": 1585
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_CHAOS_METEOR",
                "value": 1586
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_SUN_STRIKE",
                "value": 1587
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_FORGE_SPIRIT",
                "value": 1588
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ICE_WALL",
                "value": 1589
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_DEAFENING_BLAST",
                "value": 1590
            },
            {
                "desc": "",
                "name": "ACT_DOTA_VICTORY",
                "value": 1591
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DEFEAT",
                "value": 1592
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
                "value": 1593
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
                "value": 1594
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT",
                "value": 1595
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_END",
                "value": 1596
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_REFRACTION",
                "value": 1597
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_7",
                "value": 1598
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CANCEL_SIREN_SONG",
                "value": 1599
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHANNEL_ABILITY_7",
                "value": 1600
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LOADOUT",
                "value": 1601
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FORCESTAFF_END",
                "value": 1602
            },
            {
                "desc": "",
                "name": "ACT_DOTA_POOF_END",
                "value": 1603
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SLARK_POUNCE",
                "value": 1604
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MAGNUS_SKEWER_START",
                "value": 1605
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MAGNUS_SKEWER_END",
                "value": 1606
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MEDUSA_STONE_GAZE",
                "value": 1607
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RELAX_START",
                "value": 1608
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RELAX_LOOP",
                "value": 1609
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RELAX_END",
                "value": 1610
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CENTAUR_STAMPEDE",
                "value": 1611
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BELLYACHE_START",
                "value": 1612
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BELLYACHE_LOOP",
                "value": 1613
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BELLYACHE_END",
                "value": 1614
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ROQUELAIRE_LAND",
                "value": 1615
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ROQUELAIRE_LAND_IDLE",
                "value": 1616
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREEVIL_CAST",
                "value": 1617
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
                "value": 1618
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREEVIL_HOOK_START",
                "value": 1619
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREEVIL_HOOK_END",
                "value": 1620
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREEVIL_BLINK_BONE",
                "value": 1621
            },
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE_SLEEPING",
                "value": 1622
            },
            {
                "desc": "",
                "name": "ACT_DOTA_INTRO",
                "value": 1623
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GESTURE_POINT",
                "value": 1624
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GESTURE_ACCENT",
                "value": 1625
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SLEEPING_END",
                "value": 1626
            },
            {
                "desc": "",
                "name": "ACT_DOTA_AMBUSH",
                "value": 1627
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ITEM_LOOK",
                "value": 1628
            },
            {
                "desc": "",
                "name": "ACT_DOTA_STARTLE",
                "value": 1629
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FRUSTRATION",
                "value": 1630
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_REACT",
                "value": 1631
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_END_REACT",
                "value": 1632
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHRUG",
                "value": 1633
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RELAX_LOOP_END",
                "value": 1634
            },
            {
                "desc": "",
                "name": "ACT_DOTA_PRESENT_ITEM",
                "value": 1635
            },
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE_IMPATIENT",
                "value": 1636
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHARPEN_WEAPON",
                "value": 1637
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHARPEN_WEAPON_OUT",
                "value": 1638
            },
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE_SLEEPING_END",
                "value": 1639
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BRIDGE_DESTROY",
                "value": 1640
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TAUNT_SNIPER",
                "value": 1641
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DEATH_BY_SNIPER",
                "value": 1642
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LOOK_AROUND",
                "value": 1643
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAGED_CREEP_RAGE",
                "value": 1644
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAGED_CREEP_RAGE_OUT",
                "value": 1645
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAGED_CREEP_SMASH",
                "value": 1646
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAGED_CREEP_SMASH_OUT",
                "value": 1647
            },
            {
                "desc": "",
                "name": "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
                "value": 1648
            },
            {
                "desc": "",
                "name": "ACT_DOTA_INTRO_LOOP",
                "value": 1649
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BRIDGE_THREAT",
                "value": 1650
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DAGON",
                "value": 1651
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
                "value": 1652
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
                "value": 1653
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
                "value": 1654
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIAN_PIN_START",
                "value": 1655
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIAN_PIN_LOOP",
                "value": 1656
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIAN_PIN_END",
                "value": 1657
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LEAP_STUN",
                "value": 1658
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LEAP_SWIPE",
                "value": 1659
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIAN_INTRO_LEAP",
                "value": 1660
            },
            {
                "desc": "",
                "name": "ACT_DOTA_AREA_DENY",
                "value": 1661
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NIAN_PIN_TO_STUN",
                "value": 1662
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RAZE_1",
                "value": 1663
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RAZE_2",
                "value": 1664
            },
            {
                "desc": "",
                "name": "ACT_DOTA_RAZE_3",
                "value": 1665
            },
            {
                "desc": "",
                "name": "ACT_DOTA_UNDYING_DECAY",
                "value": 1666
            },
            {
                "desc": "",
                "name": "ACT_DOTA_UNDYING_SOUL_RIP",
                "value": 1667
            },
            {
                "desc": "",
                "name": "ACT_DOTA_UNDYING_TOMBSTONE",
                "value": 1668
            },
            {
                "desc": "",
                "name": "ACT_DOTA_WHIRLING_AXES_RANGED",
                "value": 1669
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHALLOW_GRAVE",
                "value": 1670
            },
            {
                "desc": "",
                "name": "ACT_DOTA_COLD_FEET",
                "value": 1671
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ICE_VORTEX",
                "value": 1672
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CHILLING_TOUCH",
                "value": 1673
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ENFEEBLE",
                "value": 1674
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FATAL_BONDS",
                "value": 1675
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MIDNIGHT_PULSE",
                "value": 1676
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ANCESTRAL_SPIRIT",
                "value": 1677
            },
            {
                "desc": "",
                "name": "ACT_DOTA_THUNDER_STRIKE",
                "value": 1678
            },
            {
                "desc": "",
                "name": "ACT_DOTA_KINETIC_FIELD",
                "value": 1679
            },
            {
                "desc": "",
                "name": "ACT_DOTA_STATIC_STORM",
                "value": 1680
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MINI_TAUNT",
                "value": 1681
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ARCTIC_BURN_END",
                "value": 1682
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LOADOUT_RARE",
                "value": 1683
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SWIM",
                "value": 1684
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FLEE",
                "value": 1685
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TROT",
                "value": 1686
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHAKE",
                "value": 1687
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SWIM_IDLE",
                "value": 1688
            },
            {
                "desc": "",
                "name": "ACT_DOTA_WAIT_IDLE",
                "value": 1689
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GREET",
                "value": 1690
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_COOP_START",
                "value": 1691
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_COOP_WAIT",
                "value": 1692
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_COOP_END",
                "value": 1693
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TELEPORT_COOP_EXIT",
                "value": 1694
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHOPKEEPER_PET_INTERACT",
                "value": 1695
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ITEM_PICKUP",
                "value": 1696
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ITEM_DROP",
                "value": 1697
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAPTURE_PET",
                "value": 1698
            },
            {
                "desc": "",
                "name": "ACT_DOTA_PET_WARD_OBSERVER",
                "value": 1699
            },
            {
                "desc": "",
                "name": "ACT_DOTA_PET_WARD_SENTRY",
                "value": 1700
            },
            {
                "desc": "",
                "name": "ACT_DOTA_PET_LEVEL",
                "value": 1701
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_BURROW_END",
                "value": 1702
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_ASSIMILATE",
                "value": 1703
            },
            {
                "desc": "",
                "name": "ACT_DOTA_LIFESTEALER_EJECT",
                "value": 1704
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ATTACK_EVENT_BASH",
                "value": 1705
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAPTURE_RARE",
                "value": 1706
            },
            {
                "desc": "",
                "name": "ACT_DOTA_AW_MAGNETIC_FIELD",
                "value": 1707
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_GHOST_SHIP",
                "value": 1708
            },
            {
                "desc": "",
                "name": "ACT_DOTA_FXANIM",
                "value": 1709
            },
            {
                "desc": "",
                "name": "ACT_DOTA_VICTORY_START",
                "value": 1710
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DEFEAT_START",
                "value": 1711
            },
            {
                "desc": "",
                "name": "ACT_DOTA_DP_SPIRIT_SIPHON",
                "value": 1712
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TRICKS_END",
                "value": 1713
            },
            {
                "desc": "",
                "name": "ACT_DOTA_ES_STONE_CALLER",
                "value": 1714
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_STRIKE",
                "value": 1715
            },
            {
                "desc": "",
                "name": "ACT_DOTA_VERSUS",
                "value": 1716
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAPTURE_CARD",
                "value": 1717
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_SPRING_SOAR",
                "value": 1718
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_SPRING_END",
                "value": 1719
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_TREE_SOAR",
                "value": 1720
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_TREE_END",
                "value": 1721
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_FUR_ARMY",
                "value": 1722
            },
            {
                "desc": "",
                "name": "ACT_DOTA_MK_SPRING_CAST",
                "value": 1723
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NECRO_GHOST_SHROUD",
                "value": 1724
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_ARCANA",
                "value": 1725
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SLIDE",
                "value": 1726
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SLIDE_LOOP",
                "value": 1727
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GENERIC_CHANNEL_1",
                "value": 1728
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GS_SOUL_CHAIN",
                "value": 1729
            },
            {
                "desc": "",
                "name": "ACT_DOTA_GS_INK_CREATURE",
                "value": 1730
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TRANSITION",
                "value": 1731
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BLINK_DAGGER",
                "value": 1732
            },
            {
                "desc": "",
                "name": "ACT_DOTA_BLINK_DAGGER_END",
                "value": 1733
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CUSTOM_TOWER_ATTACK",
                "value": 1734
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CUSTOM_TOWER_IDLE",
                "value": 1735
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CUSTOM_TOWER_DIE",
                "value": 1736
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_COLD_SNAP_ORB",
                "value": 1737
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_GHOST_WALK_ORB",
                "value": 1738
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_TORNADO_ORB",
                "value": 1739
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_EMP_ORB",
                "value": 1740
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ALACRITY_ORB",
                "value": 1741
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_CHAOS_METEOR_ORB",
                "value": 1742
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_SUN_STRIKE_ORB",
                "value": 1743
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_FORGE_SPIRIT_ORB",
                "value": 1744
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ICE_WALL_ORB",
                "value": 1745
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_DEAFENING_BLAST_ORB",
                "value": 1746
            },
            {
                "desc": "",
                "name": "ACT_DOTA_NOTICE",
                "value": 1747
            },
            {
                "desc": "",
                "name": "ACT_DOTA_CAST_ABILITY_2_ALLY",
                "value": 1748
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHUFFLE_L",
                "value": 1749
            },
            {
                "desc": "",
                "name": "ACT_DOTA_SHUFFLE_R",
                "value": 1750
            },
            {
                "desc": "",
                "name": "ACT_DOTA_OVERRIDE_LOADOUT",
                "value": 1751
            },
            {
                "desc": "",
                "name": "ACT_DOTA_TAUNT_SPECIAL",
                "value": 1752
            }
        ],
        "DOTA_GameState": [
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_INIT",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_HERO_SELECTION",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_STRATEGY_TIME",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_PRE_GAME",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_POST_GAME",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_GAMERULES_STATE_DISCONNECT",
                "value": 10
            }
        ],
        "EShareAbility": [
            {
                "desc": "",
                "name": "ITEM_FULLY_SHAREABLE",
                "value": 0
            },
            {
                "desc": "",
                "name": "ITEM_PARTIALLY_SHAREABLE",
                "value": 1
            },
            {
                "desc": "",
                "name": "ITEM_NOT_SHAREABLE",
                "value": 2
            }
        ],
        "DOTASlotType_t": [
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON2",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEAD",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHOULDER",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMS",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMOR",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BELT",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NECK",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BACK",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LEGS",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_GLOVES",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAIL",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MISC",
                "value": 14
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COSTUME",
                "value": 15
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BODY_HEAD",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MOUNT",
                "value": 17
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SUMMON",
                "value": 18
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHAPESHIFT",
                "value": 19
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAUNT",
                "value": 20
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
                "value": 21
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
                "value": 22
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY1",
                "value": 23
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY2",
                "value": 24
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY3",
                "value": 25
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY4",
                "value": 26
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
                "value": 27
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VOICE",
                "value": 28
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_PERSONA_1_START",
                "value": 29
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1",
                "value": 29
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1",
                "value": 30
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1",
                "value": 31
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEAD_PERSONA_1",
                "value": 33
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1",
                "value": 34
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMS_PERSONA_1",
                "value": 35
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1",
                "value": 36
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BELT_PERSONA_1",
                "value": 37
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NECK_PERSONA_1",
                "value": 38
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BACK_PERSONA_1",
                "value": 39
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LEGS_PERSONA_1",
                "value": 40
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1",
                "value": 41
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAIL_PERSONA_1",
                "value": 42
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MISC_PERSONA_1",
                "value": 43
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1",
                "value": 44
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1",
                "value": 45
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1",
                "value": 46
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1",
                "value": 47
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1",
                "value": 48
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1",
                "value": 49
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1",
                "value": 50
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1",
                "value": 51
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1",
                "value": 52
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1",
                "value": 53
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1",
                "value": 54
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1",
                "value": 55
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VOICE_PERSONA_1",
                "value": 56
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_PERSONA_1_END",
                "value": 56
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_PERSONA_SELECTOR",
                "value": 57
            },
            {
                "desc": "",
                "name": "DOTA_PLAYER_LOADOUT_START",
                "value": 58
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COURIER",
                "value": 58
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_ANNOUNCER",
                "value": 59
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MEGA_KILLS",
                "value": 60
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MUSIC",
                "value": 61
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WARD",
                "value": 62
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HUD_SKIN",
                "value": 63
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_LOADING_SCREEN",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_WEATHER",
                "value": 65
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEROIC_STATUE",
                "value": 66
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
                "value": 67
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_CURSOR_PACK",
                "value": 68
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
                "value": 69
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_BLINK_EFFECT",
                "value": 70
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_EMBLEM",
                "value": 71
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_TERRAIN",
                "value": 72
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_RADIANT_CREEPS",
                "value": 73
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_DIRE_CREEPS",
                "value": 74
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_RADIANT_TOWER",
                "value": 75
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_DIRE_TOWER",
                "value": 76
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_VERSUS_SCREEN",
                "value": 77
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_STREAK_EFFECT",
                "value": 78
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_KILL_EFFECT",
                "value": 79
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_DEATH_EFFECT",
                "value": 80
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_HEAD_EFFECT",
                "value": 81
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_MAP_EFFECT",
                "value": 82
            },
            {
                "desc": "",
                "name": "DOTA_PLAYER_LOADOUT_END",
                "value": 83
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COURIER_EFFECT",
                "value": 83
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_NONE",
                "value": 84
            },
            {
                "desc": "",
                "name": "DOTA_LOADOUT_TYPE_COUNT",
                "value": 85
            }
        ],
        "DOTADamageFlag_t": [
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_REFLECTION",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_HPLOSS",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NON_LETHAL",
                "value": 128
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
                "value": 256
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
                "value": 512
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION",
                "value": 1024
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN",
                "value": 2048
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL",
                "value": 4096
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_PROPERTY_FIRE",
                "value": 8192
            },
            {
                "desc": "",
                "name": "DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR",
                "value": 16384
            }
        ],
        "AbilityLearnResult_t": [
            {
                "desc": "",
                "name": "ABILITY_CAN_BE_UPGRADED",
                "value": 0
            },
            {
                "desc": "",
                "name": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
                "value": 1
            },
            {
                "desc": "",
                "name": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
                "value": 2
            },
            {
                "desc": "",
                "name": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
                "value": 3
            },
            {
                "desc": "",
                "name": "ABILITY_NOT_LEARNABLE",
                "value": 4
            }
        ],
        "modifierfunction": [
            {
                "desc": "GetModifierPreAttack_BonusDamage",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
                "value": 0
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Target",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
                "value": 1
            },
            {
                "desc": "GetModifierPreAttack_BonusDamage_Proc",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
                "value": 2
            },
            {
                "desc": "GetModifierPreAttack_BonusDamagePostCrit",
                "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
                "value": 3
            },
            {
                "desc": "GetModifierBaseAttack_BonusDamage",
                "name": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
                "value": 4
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Physical",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
                "value": 5
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Magical",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
                "value": 6
            },
            {
                "desc": "GetModifierProcAttack_BonusDamage_Pure",
                "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
                "value": 7
            },
            {
                "desc": "GetModifierProcAttack_Feedback",
                "name": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
                "value": 8
            },
            {
                "desc": "GetModifierOverrideAttackDamage",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
                "value": 9
            },
            {
                "desc": "GetModifierPreAttack",
                "name": "MODIFIER_PROPERTY_PRE_ATTACK",
                "value": 10
            },
            {
                "desc": "GetModifierInvisibilityLevel",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
                "value": 11
            },
            {
                "desc": "GetModifierInvisibilityAttackBehaviorException",
                "name": "MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
                "value": 12
            },
            {
                "desc": "GetModifierPersistentInvisibility",
                "name": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
                "value": 13
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
                "value": 14
            },
            {
                "desc": "GetModifierMoveSpeedOverride",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
                "value": 15
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
                "value": 16
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
                "value": 17
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Percentage_Unique_2",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
                "value": 18
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
                "value": 19
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Special_Boots_2",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
                "value": 20
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
                "value": 21
            },
            {
                "desc": "GetModifierMoveSpeedBonus_Constant_Unique_2",
                "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
                "value": 22
            },
            {
                "desc": "GetModifierMoveSpeed_Absolute",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
                "value": 23
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMin",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
                "value": 24
            },
            {
                "desc": "GetModifierMoveSpeed_AbsoluteMax",
                "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
                "value": 25
            },
            {
                "desc": "GetModifierIgnoreMovespeedLimit",
                "name": "MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
                "value": 26
            },
            {
                "desc": "GetModifierMoveSpeed_Limit",
                "name": "MODIFIER_PROPERTY_MOVESPEED_LIMIT",
                "value": 27
            },
            {
                "desc": "GetModifierAttackSpeedBaseOverride",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
                "value": 28
            },
            {
                "desc": "GetModifierFixedAttackRate",
                "name": "MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
                "value": 29
            },
            {
                "desc": "GetModifierAttackSpeedBonus_Constant",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
                "value": 30
            },
            {
                "desc": "GetModifierCooldownReduction_Constant",
                "name": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
                "value": 31
            },
            {
                "desc": "GetModifierManacostReduction_Constant",
                "name": "MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
                "value": 32
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
                "value": 33
            },
            {
                "desc": "GetModifierBaseAttackTimeConstant_Adjust",
                "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
                "value": 34
            },
            {
                "desc": "GetModifierAttackPointConstant",
                "name": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
                "value": 35
            },
            {
                "desc": "GetModifierBonusDamageOutgoing_Percentage",
                "name": "MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
                "value": 36
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
                "value": 37
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
                "value": 38
            },
            {
                "desc": "GetModifierDamageOutgoing_Percentage_Illusion_Amplify",
                "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
                "value": 39
            },
            {
                "desc": "GetModifierTotalDamageOutgoing_Percentage",
                "name": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
                "value": 40
            },
            {
                "desc": "GetModifierSpellAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
                "value": 41
            },
            {
                "desc": "GetModifierSpellAmplify_PercentageUnique",
                "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
                "value": 42
            },
            {
                "desc": "GetModifierHealAmplify_PercentageSource",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
                "value": 43
            },
            {
                "desc": "GetModifierHealAmplify_PercentageTarget",
                "name": "MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
                "value": 44
            },
            {
                "desc": "GetModifierHPRegenAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
                "value": 45
            },
            {
                "desc": "GetModifierLifestealRegenAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
                "value": 46
            },
            {
                "desc": "GetModifierSpellLifestealRegenAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
                "value": 47
            },
            {
                "desc": "GetModifierMPRegenAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
                "value": 48
            },
            {
                "desc": "GetModifierManaDrainAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
                "value": 49
            },
            {
                "desc": "GetModifierMPRestoreAmplify_Percentage",
                "name": "MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
                "value": 50
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_Percentage",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
                "value": 51
            },
            {
                "desc": "GetModifierBaseDamageOutgoing_PercentageUnique",
                "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
                "value": 52
            },
            {
                "desc": "GetModifierIncomingDamage_Percentage",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
                "value": 53
            },
            {
                "desc": "GetModifierIncomingPhysicalDamage_Percentage",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
                "value": 54
            },
            {
                "desc": "GetModifierIncomingPhysicalDamageConstant",
                "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
                "value": 55
            },
            {
                "desc": "GetModifierIncomingSpellDamageConstant",
                "name": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
                "value": 56
            },
            {
                "desc": "GetModifierEvasion_Constant",
                "name": "MODIFIER_PROPERTY_EVASION_CONSTANT",
                "value": 57
            },
            {
                "desc": "GetModifierNegativeEvasion_Constant",
                "name": "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
                "value": 58
            },
            {
                "desc": "GetModifierStatusResistance",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE",
                "value": 59
            },
            {
                "desc": "GetModifierStatusResistanceStacking",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
                "value": 60
            },
            {
                "desc": "GetModifierStatusResistanceCaster",
                "name": "MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
                "value": 61
            },
            {
                "desc": "GetModifierAvoidDamage",
                "name": "MODIFIER_PROPERTY_AVOID_DAMAGE",
                "value": 62
            },
            {
                "desc": "GetModifierAvoidSpell",
                "name": "MODIFIER_PROPERTY_AVOID_SPELL",
                "value": 63
            },
            {
                "desc": "GetModifierMiss_Percentage",
                "name": "MODIFIER_PROPERTY_MISS_PERCENTAGE",
                "value": 64
            },
            {
                "desc": "GetModifierPhysicalArmorBase_Percentage",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
                "value": 65
            },
            {
                "desc": "GetModifierPhysicalArmorTotal_Percentage",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
                "value": 66
            },
            {
                "desc": "GetModifierPhysicalArmorBonus",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
                "value": 67
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUnique",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
                "value": 68
            },
            {
                "desc": "GetModifierPhysicalArmorBonusUniqueActive",
                "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
                "value": 69
            },
            {
                "desc": "GetModifierIgnorePhysicalArmor",
                "name": "MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
                "value": 70
            },
            {
                "desc": "GetModifierMagicalResistanceBaseReduction",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
                "value": 71
            },
            {
                "desc": "GetModifierMagicalResistanceDirectModification",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
                "value": 72
            },
            {
                "desc": "GetModifierMagicalResistanceBonus",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
                "value": 73
            },
            {
                "desc": "GetModifierMagicalResistanceBonusIllusions",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
                "value": 74
            },
            {
                "desc": "GetModifierMagicalResistanceDecrepifyUnique",
                "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
                "value": 75
            },
            {
                "desc": "GetModifierBaseRegen",
                "name": "MODIFIER_PROPERTY_BASE_MANA_REGEN",
                "value": 76
            },
            {
                "desc": "GetModifierConstantManaRegen",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
                "value": 77
            },
            {
                "desc": "GetModifierConstantManaRegenUnique",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
                "value": 78
            },
            {
                "desc": "GetModifierTotalPercentageManaRegen",
                "name": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
                "value": 79
            },
            {
                "desc": "GetModifierConstantHealthRegen",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
                "value": 80
            },
            {
                "desc": "GetModifierHealthRegenPercentage",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
                "value": 81
            },
            {
                "desc": "GetModifierHealthRegenPercentageUnique",
                "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
                "value": 82
            },
            {
                "desc": "GetModifierHealthBonus",
                "name": "MODIFIER_PROPERTY_HEALTH_BONUS",
                "value": 83
            },
            {
                "desc": "GetModifierManaBonus",
                "name": "MODIFIER_PROPERTY_MANA_BONUS",
                "value": 84
            },
            {
                "desc": "GetModifierExtraStrengthBonus",
                "name": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
                "value": 85
            },
            {
                "desc": "GetModifierExtraHealthBonus",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
                "value": 86
            },
            {
                "desc": "GetModifierExtraManaBonus",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
                "value": 87
            },
            {
                "desc": "GetModifierExtraHealthPercentage",
                "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
                "value": 88
            },
            {
                "desc": "GetModifierExtraManaPercentage",
                "name": "MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
                "value": 89
            },
            {
                "desc": "GetModifierBonusStats_Strength",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
                "value": 90
            },
            {
                "desc": "GetModifierBonusStats_Agility",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
                "value": 91
            },
            {
                "desc": "GetModifierBonusStats_Intellect",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
                "value": 92
            },
            {
                "desc": "GetModifierBonusStats_Strength_Percentage",
                "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
                "value": 93
            },
            {
                "desc": "GetModifierBonusStats_Agility_Percentage",
                "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
                "value": 94
            },
            {
                "desc": "GetModifierBonusStats_Intellect_Percentage",
                "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
                "value": 95
            },
            {
                "desc": "GetModifierCastRangeBonus",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS",
                "value": 96
            },
            {
                "desc": "GetModifierCastRangeBonusTarget",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
                "value": 97
            },
            {
                "desc": "GetModifierCastRangeBonusStacking",
                "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
                "value": 98
            },
            {
                "desc": "GetModifierAttackRangeOverride",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
                "value": 99
            },
            {
                "desc": "GetModifierAttackRangeBonus",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
                "value": 100
            },
            {
                "desc": "GetModifierAttackRangeBonusUnique",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
                "value": 101
            },
            {
                "desc": "GetModifierAttackRangeBonusPercentage",
                "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
                "value": 102
            },
            {
                "desc": "GetModifierMaxAttackRange",
                "name": "MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
                "value": 103
            },
            {
                "desc": "GetModifierProjectileSpeedBonus",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
                "value": 104
            },
            {
                "desc": "GetModifierProjectileSpeedBonusPercentage",
                "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
                "value": 105
            },
            {
                "desc": "GetModifierProjectileName",
                "name": "MODIFIER_PROPERTY_PROJECTILE_NAME",
                "value": 106
            },
            {
                "desc": "ReincarnateTime",
                "name": "MODIFIER_PROPERTY_REINCARNATION",
                "value": 107
            },
            {
                "desc": "GetModifierConstantRespawnTime",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME",
                "value": 108
            },
            {
                "desc": "GetModifierPercentageRespawnTime",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
                "value": 109
            },
            {
                "desc": "GetModifierStackingRespawnTime",
                "name": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
                "value": 110
            },
            {
                "desc": "GetModifierPercentageCooldown",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
                "value": 111
            },
            {
                "desc": "GetModifierPercentageCooldownOngoing",
                "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
                "value": 112
            },
            {
                "desc": "GetModifierPercentageCasttime",
                "name": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
                "value": 113
            },
            {
                "desc": "GetModifierPercentageManacost",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
                "value": 114
            },
            {
                "desc": "GetModifierPercentageManacostStacking",
                "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
                "value": 115
            },
            {
                "desc": "GetModifierConstantDeathGoldCost",
                "name": "MODIFIER_PROPERTY_DEATHGOLDCOST",
                "value": 116
            },
            {
                "desc": "GetModifierPercentageExpRateBoost",
                "name": "MODIFIER_PROPERTY_EXP_RATE_BOOST",
                "value": 117
            },
            {
                "desc": "GetModifierPreAttack_CriticalStrike",
                "name": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
                "value": 118
            },
            {
                "desc": "GetModifierPreAttack_Target_CriticalStrike",
                "name": "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
                "value": 119
            },
            {
                "desc": "GetModifierMagical_ConstantBlock",
                "name": "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
                "value": 120
            },
            {
                "desc": "GetModifierPhysical_ConstantBlock",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
                "value": 121
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockSpecial",
                "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
                "value": 122
            },
            {
                "desc": "GetModifierPhysical_ConstantBlockUnavoidablePreArmor",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
                "value": 123
            },
            {
                "desc": "GetModifierTotal_ConstantBlock",
                "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
                "value": 124
            },
            {
                "desc": "GetOverrideAnimation",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
                "value": 125
            },
            {
                "desc": "GetOverrideAnimationWeight",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
                "value": 126
            },
            {
                "desc": "GetOverrideAnimationRate",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
                "value": 127
            },
            {
                "desc": "GetAbsorbSpell",
                "name": "MODIFIER_PROPERTY_ABSORB_SPELL",
                "value": 128
            },
            {
                "desc": "GetReflectSpell",
                "name": "MODIFIER_PROPERTY_REFLECT_SPELL",
                "value": 129
            },
            {
                "desc": "GetDisableAutoAttack",
                "name": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
                "value": 130
            },
            {
                "desc": "GetBonusDayVision",
                "name": "MODIFIER_PROPERTY_BONUS_DAY_VISION",
                "value": 131
            },
            {
                "desc": "GetBonusNightVision",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
                "value": 132
            },
            {
                "desc": "GetBonusNightVisionUnique",
                "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
                "value": 133
            },
            {
                "desc": "GetBonusVisionPercentage",
                "name": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
                "value": 134
            },
            {
                "desc": "GetFixedDayVision",
                "name": "MODIFIER_PROPERTY_FIXED_DAY_VISION",
                "value": 135
            },
            {
                "desc": "GetFixedNightVision",
                "name": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
                "value": 136
            },
            {
                "desc": "GetMinHealth",
                "name": "MODIFIER_PROPERTY_MIN_HEALTH",
                "value": 137
            },
            {
                "desc": "GetAbsoluteNoDamagePhysical",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
                "value": 138
            },
            {
                "desc": "GetAbsoluteNoDamageMagical",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
                "value": 139
            },
            {
                "desc": "GetAbsoluteNoDamagePure",
                "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
                "value": 140
            },
            {
                "desc": "GetIsIllusion",
                "name": "MODIFIER_PROPERTY_IS_ILLUSION",
                "value": 141
            },
            {
                "desc": "GetModifierIllusionLabel",
                "name": "MODIFIER_PROPERTY_ILLUSION_LABEL",
                "value": 142
            },
            {
                "desc": "GetModifierStrongIllusion",
                "name": "MODIFIER_PROPERTY_STRONG_ILLUSION",
                "value": 143
            },
            {
                "desc": "GetModifierSuperIllusion",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION",
                "value": 144
            },
            {
                "desc": "GetModifierSuperIllusionWithUltimate",
                "name": "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
                "value": 145
            },
            {
                "desc": "GetModifierTurnRate_Percentage",
                "name": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
                "value": 146
            },
            {
                "desc": "GetModifierTurnRate_Override",
                "name": "MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
                "value": 147
            },
            {
                "desc": "GetDisableHealing",
                "name": "MODIFIER_PROPERTY_DISABLE_HEALING",
                "value": 148
            },
            {
                "desc": "GetAlwaysAllowAttack",
                "name": "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
                "value": 149
            },
            {
                "desc": "GetAllowEtherealAttack",
                "name": "MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
                "value": 150
            },
            {
                "desc": "GetOverrideAttackMagical",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
                "value": 151
            },
            {
                "desc": "GetModifierUnitStatsNeedsRefresh",
                "name": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
                "value": 152
            },
            {
                "desc": "Unused",
                "name": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
                "value": 153
            },
            {
                "desc": "Unused",
                "name": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
                "value": 154
            },
            {
                "desc": "GetModifierUnitDisllowUpgrading",
                "name": "MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
                "value": 155
            },
            {
                "desc": "GetModifierDodgeProjectile",
                "name": "MODIFIER_PROPERTY_DODGE_PROJECTILE",
                "value": 156
            },
            {
                "desc": "GetTriggerCosmeticAndEndAttack",
                "name": "MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
                "value": 157
            },
            {
                "desc": "OnSpellTargetReady",
                "name": "MODIFIER_EVENT_ON_SPELL_TARGET_READY",
                "value": 158
            },
            {
                "desc": "OnAttackRecord",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD",
                "value": 159
            },
            {
                "desc": "OnAttackStart",
                "name": "MODIFIER_EVENT_ON_ATTACK_START",
                "value": 160
            },
            {
                "desc": "OnAttack",
                "name": "MODIFIER_EVENT_ON_ATTACK",
                "value": 161
            },
            {
                "desc": "OnAttackLanded",
                "name": "MODIFIER_EVENT_ON_ATTACK_LANDED",
                "value": 162
            },
            {
                "desc": "OnAttackFail",
                "name": "MODIFIER_EVENT_ON_ATTACK_FAIL",
                "value": 163
            },
            {
                "desc": "OnAttackAllied",
                "name": "MODIFIER_EVENT_ON_ATTACK_ALLIED",
                "value": 164
            },
            {
                "desc": "OnProjectileDodge",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_DODGE",
                "value": 165
            },
            {
                "desc": "OnOrder",
                "name": "MODIFIER_EVENT_ON_ORDER",
                "value": 166
            },
            {
                "desc": "OnUnitMoved",
                "name": "MODIFIER_EVENT_ON_UNIT_MOVED",
                "value": 167
            },
            {
                "desc": "OnAbilityStart",
                "name": "MODIFIER_EVENT_ON_ABILITY_START",
                "value": 168
            },
            {
                "desc": "OnAbilityExecuted",
                "name": "MODIFIER_EVENT_ON_ABILITY_EXECUTED",
                "value": 169
            },
            {
                "desc": "OnAbilityFullyCast",
                "name": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
                "value": 170
            },
            {
                "desc": "OnBreakInvisibility",
                "name": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
                "value": 171
            },
            {
                "desc": "OnAbilityEndChannel",
                "name": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
                "value": 172
            },
            {
                "desc": "Unused",
                "name": "MODIFIER_EVENT_ON_PROCESS_UPGRADE",
                "value": 173
            },
            {
                "desc": "Unused",
                "name": "MODIFIER_EVENT_ON_REFRESH",
                "value": 174
            },
            {
                "desc": "OnTakeDamage",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE",
                "value": 175
            },
            {
                "desc": "OnDamagePrevented",
                "name": "MODIFIER_EVENT_ON_DEATH_PREVENTED",
                "value": 176
            },
            {
                "desc": "OnStateChanged",
                "name": "MODIFIER_EVENT_ON_STATE_CHANGED",
                "value": 177
            },
            {
                "desc": "Unused",
                "name": "MODIFIER_EVENT_ON_ORB_EFFECT",
                "value": 178
            },
            {
                "desc": "OnProcessCleave",
                "name": "MODIFIER_EVENT_ON_PROCESS_CLEAVE",
                "value": 179
            },
            {
                "desc": "OnDamageCalculated",
                "name": "MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
                "value": 180
            },
            {
                "desc": "OnAttacked",
                "name": "MODIFIER_EVENT_ON_ATTACKED",
                "value": 181
            },
            {
                "desc": "OnDeath",
                "name": "MODIFIER_EVENT_ON_DEATH",
                "value": 182
            },
            {
                "desc": "OnRespawn",
                "name": "MODIFIER_EVENT_ON_RESPAWN",
                "value": 183
            },
            {
                "desc": "OnSpentMana",
                "name": "MODIFIER_EVENT_ON_SPENT_MANA",
                "value": 184
            },
            {
                "desc": "OnTeleporting",
                "name": "MODIFIER_EVENT_ON_TELEPORTING",
                "value": 185
            },
            {
                "desc": "OnTeleported",
                "name": "MODIFIER_EVENT_ON_TELEPORTED",
                "value": 186
            },
            {
                "desc": "OnSetLocation",
                "name": "MODIFIER_EVENT_ON_SET_LOCATION",
                "value": 187
            },
            {
                "desc": "OnHealthGained",
                "name": "MODIFIER_EVENT_ON_HEALTH_GAINED",
                "value": 188
            },
            {
                "desc": "OnManaGained",
                "name": "MODIFIER_EVENT_ON_MANA_GAINED",
                "value": 189
            },
            {
                "desc": "OnTakeDamageKillCredit",
                "name": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
                "value": 190
            },
            {
                "desc": "OnHeroKilled",
                "name": "MODIFIER_EVENT_ON_HERO_KILLED",
                "value": 191
            },
            {
                "desc": "OnHealReceived",
                "name": "MODIFIER_EVENT_ON_HEAL_RECEIVED",
                "value": 192
            },
            {
                "desc": "OnBuildingKilled",
                "name": "MODIFIER_EVENT_ON_BUILDING_KILLED",
                "value": 193
            },
            {
                "desc": "OnModelChanged",
                "name": "MODIFIER_EVENT_ON_MODEL_CHANGED",
                "value": 194
            },
            {
                "desc": "OnModifierAdded",
                "name": "MODIFIER_EVENT_ON_MODIFIER_ADDED",
                "value": 195
            },
            {
                "desc": "OnTooltip",
                "name": "MODIFIER_PROPERTY_TOOLTIP",
                "value": 196
            },
            {
                "desc": "GetModifierModelChange",
                "name": "MODIFIER_PROPERTY_MODEL_CHANGE",
                "value": 197
            },
            {
                "desc": "GetModifierModelScale",
                "name": "MODIFIER_PROPERTY_MODEL_SCALE",
                "value": 198
            },
            {
                "desc": "GetModifierScepter",
                "name": "MODIFIER_PROPERTY_IS_SCEPTER",
                "value": 199
            },
            {
                "desc": "GetModifierRadarCooldownReduction",
                "name": "MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
                "value": 200
            },
            {
                "desc": "GetActivityTranslationModifiers",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
                "value": 201
            },
            {
                "desc": "GetAttackSound",
                "name": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
                "value": 202
            },
            {
                "desc": "GetUnitLifetimeFraction",
                "name": "MODIFIER_PROPERTY_LIFETIME_FRACTION",
                "value": 203
            },
            {
                "desc": "GetModifierProvidesFOWVision",
                "name": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
                "value": 204
            },
            {
                "desc": "GetModifierSpellsRequireHP",
                "name": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
                "value": 205
            },
            {
                "desc": "GetForceDrawOnMinimap",
                "name": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
                "value": 206
            },
            {
                "desc": "GetModifierDisableTurning",
                "name": "MODIFIER_PROPERTY_DISABLE_TURNING",
                "value": 207
            },
            {
                "desc": "GetModifierIgnoreCastAngle",
                "name": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
                "value": 208
            },
            {
                "desc": "GetModifierChangeAbilityValue",
                "name": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
                "value": 209
            },
            {
                "desc": "GetModifierOverrideAbilitySpecial",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
                "value": 210
            },
            {
                "desc": "GetModifierOverrideAbilitySpecialValue",
                "name": "MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
                "value": 211
            },
            {
                "desc": "GetModifierAbilityLayout",
                "name": "MODIFIER_PROPERTY_ABILITY_LAYOUT",
                "value": 212
            },
            {
                "desc": "OnDominated",
                "name": "MODIFIER_EVENT_ON_DOMINATED",
                "value": 213
            },
            {
                "desc": "GetModifierTempestDouble",
                "name": "MODIFIER_PROPERTY_TEMPEST_DOUBLE",
                "value": 214
            },
            {
                "desc": "PreserveParticlesOnModelChanged",
                "name": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
                "value": 215
            },
            {
                "desc": "OnAttackFinished",
                "name": "MODIFIER_EVENT_ON_ATTACK_FINISHED",
                "value": 216
            },
            {
                "desc": "GetModifierIgnoreCooldown",
                "name": "MODIFIER_PROPERTY_IGNORE_COOLDOWN",
                "value": 217
            },
            {
                "desc": "GetModifierCanAttackTrees",
                "name": "MODIFIER_PROPERTY_CAN_ATTACK_TREES",
                "value": 218
            },
            {
                "desc": "GetVisualZDelta",
                "name": "MODIFIER_PROPERTY_VISUAL_Z_DELTA",
                "value": 219
            },
            {
                "desc": "",
                "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
                "value": 220
            },
            {
                "desc": "GetModifierNoVisionOfAttacker",
                "name": "MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
                "value": 221
            },
            {
                "desc": "OnTooltip2",
                "name": "MODIFIER_PROPERTY_TOOLTIP2",
                "value": 222
            },
            {
                "desc": "OnAttackRecordDestroy",
                "name": "MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
                "value": 223
            },
            {
                "desc": "OnProjectileObstructionHit",
                "name": "MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
                "value": 224
            },
            {
                "desc": "GetSuppressTeleport",
                "name": "MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
                "value": 225
            },
            {
                "desc": "OnAttackCancelled",
                "name": "MODIFIER_EVENT_ON_ATTACK_CANCELLED",
                "value": 226
            },
            {
                "desc": "GetSuppressCleave",
                "name": "MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
                "value": 227
            },
            {
                "desc": "BotAttackScoreBonus",
                "name": "MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
                "value": 228
            },
            {
                "desc": "GetModifierAttackSpeedReductionPercentage",
                "name": "MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
                "value": 229
            },
            {
                "desc": "GetModifierMoveSpeedReductionPercentage",
                "name": "MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
                "value": 230
            },
            {
                "desc": "",
                "name": "MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET",
                "value": 231
            },
            {
                "desc": "",
                "name": "MODIFIER_FUNCTION_LAST",
                "value": 232
            },
            {
                "desc": "",
                "name": "MODIFIER_FUNCTION_INVALID",
                "value": 255
            }
        ],
        "EDOTA_ModifyXP_Reason": [
            {
                "desc": "",
                "name": "DOTA_ModifyXP_Unspecified",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_HeroKill",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_CreepKill",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_RoshanKill",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_TomeOfKnowledge",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_Outpost",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_ModifyXP_MAX",
                "value": 6
            }
        ],
        "DOTAUnitAttackCapability_t": [
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_NO_ATTACK",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_MELEE_ATTACK",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_RANGED_ATTACK",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL",
                "value": 4
            }
        ],
        "DOTATeam_t": [
            {
                "desc": "",
                "name": "DOTA_TEAM_FIRST",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_GOODGUYS",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_BADGUYS",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_NEUTRALS",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_NOTEAM",
                "value": 5
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_MIN",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_1",
                "value": 6
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_2",
                "value": 7
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_COUNT",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_3",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_4",
                "value": 9
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_5",
                "value": 10
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_6",
                "value": 11
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_7",
                "value": 12
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_8",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_CUSTOM_MAX",
                "value": 13
            },
            {
                "desc": "",
                "name": "DOTA_TEAM_COUNT",
                "value": 14
            }
        ],
        "DOTAUnitMoveCapability_t": [
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_MOVE_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_MOVE_GROUND",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_UNIT_CAP_MOVE_FLY",
                "value": 2
            }
        ],
        "DOTA_ABILITY_BEHAVIOR": [
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
                "value": -2147483648
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_NONE",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_HIDDEN",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_PASSIVE",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_NO_TARGET",
                "value": 4
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
                "value": 8
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_POINT",
                "value": 16
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_AOE",
                "value": 32
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
                "value": 64
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_CHANNELLED",
                "value": 128
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_ITEM",
                "value": 256
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_TOGGLE",
                "value": 512
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
                "value": 1024
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
                "value": 2048
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_AUTOCAST",
                "value": 4096
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
                "value": 8192
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
                "value": 16384
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
                "value": 32768
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_AURA",
                "value": 65536
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_ATTACK",
                "value": 131072
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
                "value": 262144
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
                "value": 524288
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
                "value": 1048576
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
                "value": 2097152
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
                "value": 4194304
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
                "value": 8388608
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
                "value": 16777216
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
                "value": 33554432
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
                "value": 67108864
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
                "value": 134217728
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
                "value": 268435456
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
                "value": 536870912
            },
            {
                "desc": "",
                "name": "DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
                "value": 1073741824
            }
        ],
        "DOTA_MOTION_CONTROLLER_PRIORITY": [
            {
                "desc": "",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
                "value": 0
            },
            {
                "desc": "",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
                "value": 1
            },
            {
                "desc": "",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
                "value": 2
            },
            {
                "desc": "",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
                "value": 3
            },
            {
                "desc": "",
                "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
                "value": 4
            }
        ],
        "ParticleAttachment_t": [
            {
                "desc": "",
                "name": "PATTACH_INVALID",
                "value": -1
            },
            {
                "desc": "",
                "name": "PATTACH_ABSORIGIN",
                "value": 0
            },
            {
                "desc": "",
                "name": "PATTACH_ABSORIGIN_FOLLOW",
                "value": 1
            },
            {
                "desc": "",
                "name": "PATTACH_CUSTOMORIGIN",
                "value": 2
            },
            {
                "desc": "",
                "name": "PATTACH_CUSTOMORIGIN_FOLLOW",
                "value": 3
            },
            {
                "desc": "",
                "name": "PATTACH_POINT",
                "value": 4
            },
            {
                "desc": "",
                "name": "PATTACH_POINT_FOLLOW",
                "value": 5
            },
            {
                "desc": "",
                "name": "PATTACH_EYES_FOLLOW",
                "value": 6
            },
            {
                "desc": "",
                "name": "PATTACH_OVERHEAD_FOLLOW",
                "value": 7
            },
            {
                "desc": "",
                "name": "PATTACH_WORLDORIGIN",
                "value": 8
            },
            {
                "desc": "",
                "name": "PATTACH_ROOTBONE_FOLLOW",
                "value": 9
            },
            {
                "desc": "",
                "name": "PATTACH_RENDERORIGIN_FOLLOW",
                "value": 10
            },
            {
                "desc": "",
                "name": "PATTACH_MAIN_VIEW",
                "value": 11
            },
            {
                "desc": "",
                "name": "PATTACH_WATERWAKE",
                "value": 12
            },
            {
                "desc": "",
                "name": "PATTACH_CENTER_FOLLOW",
                "value": 13
            },
            {
                "desc": "",
                "name": "PATTACH_CUSTOM_GAME_STATE_1",
                "value": 14
            },
            {
                "desc": "",
                "name": "PATTACH_HEALTHBAR",
                "value": 15
            },
            {
                "desc": "",
                "name": "MAX_PATTACH_TYPES",
                "value": 16
            }
        ]
    },
    "ProjectileManager": [
        {
            "desc": "Update speed",
            "func": "( handle_1, int_2 )",
            "name": "ChangeTrackingProjectileSpeed",
            "return": "void"
        },
        {
            "desc": "创建一个线性投射物并返回其ID",
            "func": "( handle_1 )",
            "name": "CreateLinearProjectile",
            "return": "int"
        },
        {
            "desc": "创建一个追踪投射物",
            "func": "( handle_1 )",
            "name": "CreateTrackingProjectile",
            "return": "int"
        },
        {
            "desc": "摧毁指定ID的线性投射物",
            "func": "( int_1 )",
            "name": "DestroyLinearProjectile",
            "return": "void"
        },
        {
            "desc": "Destroy a tracking projectile early",
            "func": "( int_1 )",
            "name": "DestroyTrackingProjectile",
            "return": "void"
        },
        {
            "desc": "Returns current location of projectile",
            "func": "( int_1 )",
            "name": "GetLinearProjectileLocation",
            "return": "Vector"
        },
        {
            "desc": "Returns current radius of projectile",
            "func": "( int_1 )",
            "name": "GetLinearProjectileRadius",
            "return": "float"
        },
        {
            "desc": "返回一个表示当前投射物速度的向量。",
            "func": "( int_1 )",
            "name": "GetLinearProjectileVelocity",
            "return": "Vector"
        },
        {
            "desc": "Returns current location of projectile",
            "func": "( int_1 )",
            "name": "GetTrackingProjectileLocation",
            "return": "Vector"
        },
        {
            "desc": "Is this a valid projectile?",
            "func": "( int_1 )",
            "name": "IsValidProjectile",
            "return": "bool"
        },
        {
            "desc": "使得特定单位躲避投射物",
            "func": "( handle_1 )",
            "name": "ProjectileDodge",
            "return": "void"
        },
        {
            "desc": "Update velocity",
            "func": "( int_1, Vector_2, float_3 )",
            "name": "UpdateLinearProjectileDirection",
            "return": "void"
        }
    ],
    "CDOTA_Buff": [
        {
            "desc": "增加粒子。",
            "func": "( int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect )",
            "name": "AddParticle",
            "return": "void"
        },
        {
            "desc": "将Mordifier的叠加层数-1",
            "func": "()",
            "name": "DecrementStackCount",
            "return": "void"
        },
        {
            "desc": "运行所有相关的移除函数来移除这个Mordifier。",
            "func": "()",
            "name": "Destroy",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "DestroyOnExpire",
            "return": "bool"
        },
        {
            "desc": "运行所有相关的刷新函数，使Mordifier恢复到初始",
            "func": "()",
            "name": "ForceRefresh",
            "return": "void"
        },
        {
            "desc": "获取产生这个Mordifier的技能。",
            "func": "()",
            "name": "GetAbility",
            "return": "handle"
        },
        {
            "desc": "Returns aura stickiness (default 0.5)",
            "func": "()",
            "name": "GetAuraDuration",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAuraOwner",
            "return": "handle"
        },
        {
            "desc": "获取产生这个Mordifier的单位。",
            "func": "()",
            "name": "GetCaster",
            "return": "handle"
        },
        {
            "desc": "获取这个Mordifier所属的类。",
            "func": "()",
            "name": "GetClass",
            "return": "string"
        },
        {
            "desc": "获取这个Mordifier的创建时间。",
            "func": "()",
            "name": "GetCreationTime",
            "return": "float"
        },
        {
            "desc": "获取这个Mordifier的终止时间。",
            "func": "()",
            "name": "GetDieTime",
            "return": "float"
        },
        {
            "desc": "获取这个Mordifier的持续时间。",
            "func": "()",
            "name": "GetDuration",
            "return": "float"
        },
        {
            "desc": "获取这个Mordifier的消失时间。",
            "func": "()",
            "name": "GetElapsedTime",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetLastAppliedTime",
            "return": "float"
        },
        {
            "desc": "获取这个Mordifier的名称。",
            "func": "()",
            "name": "GetName",
            "return": "string"
        },
        {
            "desc": "获取这个Mordifier所继承的单位。",
            "func": "()",
            "name": "GetParent",
            "return": "handle"
        },
        {
            "desc": "获取这个Mordifier的剩余时间。",
            "func": "()",
            "name": "GetRemainingTime",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetSerialNumber",
            "return": "int"
        },
        {
            "desc": "获取这个Mordifier的叠加层数。",
            "func": "()",
            "name": "GetStackCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iFunction )",
            "name": "HasFunction",
            "return": "bool"
        },
        {
            "desc": "使Mordifier的叠加层数+1。",
            "func": "()",
            "name": "IncrementStackCount",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsDebuff",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsHexDebuff",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsStunDebuff",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "SendBuffRefreshToClients",
            "return": "void"
        },
        {
            "desc": "设置持续时间。",
            "func": "( float flDuration, bool bInformClient )",
            "name": "SetDuration",
            "return": "void"
        },
        {
            "desc": "设置叠加层数。",
            "func": "( int iCount )",
            "name": "SetStackCount",
            "return": "void"
        },
        {
            "desc": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。",
            "func": "( float flInterval )",
            "name": "StartIntervalThink",
            "return": "void"
        }
    ],
    "CBaseCombatCharacter": [
        {
            "desc": "GetEquippedWeapons():获取一个装备武器的数组",
            "func": "()",
            "name": "GetEquippedWeapons",
            "return": "table"
        },
        {
            "desc": "GetWeaponCount():获取当前装备的武器数量",
            "func": "()",
            "name": "GetWeaponCount",
            "return": "int"
        }
    ],
    "CBasePlayer": [
        {
            "desc": "Returns the player's user id.",
            "func": "()",
            "name": "GetUserID",
            "return": "int"
        },
        {
            "desc": "玩家处于穿墙模式（noclipmode）下返回true",
            "func": "()",
            "name": "IsNoclipping",
            "return": "bool"
        }
    ],
    "CBaseTrigger": [
        {
            "desc": "禁止触发器",
            "func": "()",
            "name": "Disable",
            "return": "void"
        },
        {
            "desc": "允许触发器",
            "func": "()",
            "name": "Enable",
            "return": "void"
        },
        {
            "desc": "检查指定实体是否正在接触触发器",
            "func": "( handle hEnt )",
            "name": "IsTouching",
            "return": "bool"
        }
    ],
    "GridNav": [
        {
            "desc": "判断是否能从某个起始点移动到某个终点。(vStart,vEnd)",
            "func": "( Vector_1, Vector_2 )",
            "name": "CanFindPath",
            "return": "bool"
        },
        {
            "desc": "砍掉区域内所有的树。(vPosition,flRadius,bFullCollision",
            "func": "( Vector_1, float_2, bool_3 )",
            "name": "DestroyTreesAroundPoint",
            "return": "void"
        },
        {
            "desc": "找到两点间可通过的路径，并返回路径长度。如果寻路失败，将返回-1。float(vStart,vEnd)",
            "func": "( Vector_1, Vector_2 )",
            "name": "FindPathLength",
            "return": "float"
        },
        {
            "desc": "以table形式返回附近所有的树木。HSCRIPTS(vPosition,flRadius,bFullCollision).",
            "func": "( Vector_1, float_2, bool_3 )",
            "name": "GetAllTreesAroundPoint",
            "return": "table"
        },
        {
            "desc": "获取指定X索引号的世界中心X位置（网格到世界）",
            "func": "( int_1 )",
            "name": "GridPosToWorldCenterX",
            "return": "float"
        },
        {
            "desc": "获取指定Y索引号的世界中心Y位置（网格到世界）",
            "func": "( int_1 )",
            "name": "GridPosToWorldCenterY",
            "return": "float"
        },
        {
            "desc": "检查给定位置是否被阻挡",
            "func": "( Vector_1 )",
            "name": "IsBlocked",
            "return": "bool"
        },
        {
            "desc": "(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point",
            "func": "( Vector_1, float_2, bool_3 )",
            "name": "IsNearbyTree",
            "return": "bool"
        },
        {
            "desc": "检查给予维持是否可通过",
            "func": "( Vector_1 )",
            "name": "IsTraversable",
            "return": "bool"
        },
        {
            "desc": "Causes all trees in the map to regrow",
            "func": "()",
            "name": "RegrowAllTrees",
            "return": "void"
        },
        {
            "desc": "获取指定世界X位置的X索引（世界到网格）",
            "func": "( float_1 )",
            "name": "WorldToGridPosX",
            "return": "int"
        },
        {
            "desc": "获取指定世界Y位置的Y索引（世界到网格）",
            "func": "( float_1 )",
            "name": "WorldToGridPosY",
            "return": "int"
        }
    ],
    "CLogicScript": [],
    "CScriptUniformRandomStream": [
        {
            "desc": "",
            "func": "( float flMinVal, float flMaxVal )",
            "name": "RandomFloat",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( float flMinVal, float flMaxVal, float flExponent )",
            "name": "RandomFloatExp",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iMinVal, int iMaxVal )",
            "name": "RandomInt",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPercentage )",
            "name": "RollPercentage",
            "return": "bool"
        }
    ],
    "CDOTA_Item_Physical": [
        {
            "desc": "返回禁用的物品?",
            "func": "()",
            "name": "GetContainedItem",
            "return": "handle"
        },
        {
            "desc": "返回物品第一次出现在地图上的时间",
            "func": "()",
            "name": "GetCreationTime",
            "return": "float"
        },
        {
            "desc": "设置禁用的物品?",
            "func": "( handle hItem )",
            "name": "SetContainedItem",
            "return": "void"
        }
    ],
    "CBaseAnimating": [
        {
            "desc": "Returns the duration in seconds of the active sequence.",
            "func": "()",
            "name": "ActiveSequenceDuration",
            "return": "float"
        },
        {
            "desc": "Get the cycle of the animation.",
            "func": "()",
            "name": "GetCycle",
            "return": "float"
        },
        {
            "desc": "Get the value of the given animGraph parameter",
            "func": "( string pszParam )",
            "name": "GetGraphParameter",
            "return": "table"
        },
        {
            "desc": "Returns the name of the active sequence.",
            "func": "()",
            "name": "GetSequence",
            "return": "string"
        },
        {
            "desc": "查询主序列是否播放结束",
            "func": "()",
            "name": "IsSequenceFinished",
            "return": "bool"
        },
        {
            "desc": "Sets the active sequence by name, resetting the current cycle.",
            "func": "( string pSequenceName )",
            "name": "ResetSequence",
            "return": "void"
        },
        {
            "desc": "Returns the duration in seconds of the given sequence name.",
            "func": "( string pSequenceName )",
            "name": "SequenceDuration",
            "return": "float"
        },
        {
            "desc": "Set the cycle of the animation.",
            "func": "( float flCycle )",
            "name": "SetCycle",
            "return": "void"
        },
        {
            "desc": "Pass the desired look target in world space to the graph",
            "func": "( Vector vValue )",
            "name": "SetGraphLookTarget",
            "return": "void"
        },
        {
            "desc": "Set the specific param value, type is inferred from the type in script",
            "func": "( string pszParam, table svArg )",
            "name": "SetGraphParameter",
            "return": "void"
        },
        {
            "desc": "Set the specific param on or off",
            "func": "( string szName, bool bValue )",
            "name": "SetGraphParameterBool",
            "return": "void"
        },
        {
            "desc": "Pass the enum (int) value to the specified param",
            "func": "( string szName, int nValue )",
            "name": "SetGraphParameterEnum",
            "return": "void"
        },
        {
            "desc": "Pass the float value to the specified param",
            "func": "( string szName, float flValue )",
            "name": "SetGraphParameterFloat",
            "return": "void"
        },
        {
            "desc": "Pass the int value to the specified param",
            "func": "( string szName, int nValue )",
            "name": "SetGraphParameterInt",
            "return": "void"
        },
        {
            "desc": "Pass the vector value to the specified param in the graph",
            "func": "( string szName, Vector vValue )",
            "name": "SetGraphParameterVector",
            "return": "void"
        },
        {
            "desc": "将指定的位置参数（poseparameter）设定为指定值",
            "func": "( string szName, float fValue )",
            "name": "SetPoseParameter",
            "return": "float"
        },
        {
            "desc": "Sets the active sequence by name, keeping the current cycle.",
            "func": "( string pSequenceName )",
            "name": "SetSequence",
            "return": "void"
        },
        {
            "desc": "Stop the current animation by setting playback rate to 0.0.",
            "func": "()",
            "name": "StopAnimation",
            "return": "void"
        }
    ],
    "CCustomNetTableManager": [
        {
            "desc": "(stringTableName,stringKeyName)",
            "func": "( string_1, string_2 )",
            "name": "GetTableValue",
            "return": "table"
        },
        {
            "desc": "(stringTableName,stringKeyName,script_tableValue)",
            "func": "( string_1, string_2, handle_3 )",
            "name": "SetTableValue",
            "return": "bool"
        }
    ],
    "CScriptKeyValues": [
        {
            "desc": "读取一个键值（spawnkey）",
            "func": "( string_1 )",
            "name": "GetValue",
            "return": "table"
        }
    ],
    "CScriptHeroList": [
        {
            "desc": "返回当前世界全部英雄",
            "func": "()",
            "name": "GetAllHeroes",
            "return": "table"
        },
        {
            "desc": "获取英雄列表中第N位英雄",
            "func": "( int_1 )",
            "name": "GetHero",
            "return": "handle"
        },
        {
            "desc": "返回当前世界英雄数目",
            "func": "()",
            "name": "GetHeroCount",
            "return": "int"
        }
    ],
    "CScriptHTTPRequest": [
        {
            "desc": "Send a HTTP request.",
            "func": "( handle_1 )",
            "name": "Send",
            "return": "bool"
        },
        {
            "desc": "Set the total timeout on the request.",
            "func": "( unsigned_1 )",
            "name": "SetHTTPRequestAbsoluteTimeoutMS",
            "return": "bool"
        },
        {
            "desc": "Set a POST or GET parameter on the request.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestGetOrPostParameter",
            "return": "bool"
        },
        {
            "desc": "Set a header value on the request.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestHeaderValue",
            "return": "bool"
        },
        {
            "desc": "Set the network timeout on the request - this timer is reset when any data is received.",
            "func": "( unsigned_1 )",
            "name": "SetHTTPRequestNetworkActivityTimeout",
            "return": "bool"
        },
        {
            "desc": "Set the literal body of a post - invalid after setting a post parameter.",
            "func": "( string_1, string_2 )",
            "name": "SetHTTPRequestRawPostBody",
            "return": "bool"
        }
    ],
    "CInfoWorldLayer": [
        {
            "desc": "Hides this layer",
            "func": "()",
            "name": "HideWorldLayer",
            "return": "void"
        },
        {
            "desc": "Shows this layer",
            "func": "()",
            "name": "ShowWorldLayer",
            "return": "void"
        }
    ],
    "CBaseFlex": [
        {
            "desc": "返回最早激活的场景实体的实例（如果存在的话）",
            "func": "()",
            "name": "GetCurrentScene",
            "return": "handle"
        },
        {
            "desc": "返回指定索引号的场景实体的实例",
            "func": "( int index )",
            "name": "GetSceneByIndex",
            "return": "handle"
        },
        {
            "desc": "( vcd file, delay ) - play specified vcd file",
            "func": "( string pszScene, float flDelay )",
            "name": "ScriptPlayScene",
            "return": "float"
        }
    ],
    "CSceneEntity": [
        {
            "desc": "在记分板列表上增加一个组（使用索引号）",
            "func": "( int_1 )",
            "name": "AddBroadcastTeamTarget",
            "return": "void"
        },
        {
            "desc": "取消场景重播",
            "func": "()",
            "name": "Cancel",
            "return": "void"
        },
        {
            "desc": "返回场景长度（秒）",
            "func": "()",
            "name": "EstimateLength",
            "return": "float"
        },
        {
            "desc": "获取镜头",
            "func": "()",
            "name": "FindCamera",
            "return": "handle"
        },
        {
            "desc": "通过一个实体参照，比如!target，获取场景物体中的实际实体",
            "func": "( string_1 )",
            "name": "FindNamedEntity",
            "return": "handle"
        },
        {
            "desc": "场景是否被暂停",
            "func": "()",
            "name": "IsPaused",
            "return": "bool"
        },
        {
            "desc": "场景是否正播放",
            "func": "()",
            "name": "IsPlayingBack",
            "return": "bool"
        },
        {
            "desc": "输入虚拟场景名和VCD字符串，载入场景",
            "func": "( string_1, string_2 )",
            "name": "LoadSceneFromString",
            "return": "bool"
        },
        {
            "desc": "从记分板列表上移除一个组（使用索引号）",
            "func": "( int_1 )",
            "name": "RemoveBroadcastTeamTarget",
            "return": "void"
        },
        {
            "desc": "开始场景重播，参数为激活者实体（activatorEntity）",
            "func": "( handle_1 )",
            "name": "Start",
            "return": "void"
        }
    ],
    "CDOTA_Ability_Lua": [
        {
            "desc": "判断一个无目标的命令是否有效",
            "func": "()",
            "name": "CastFilterResult",
            "return": "int"
        },
        {
            "desc": "(VectorvLocation)判断一个作用于某个地点的命令是否有效",
            "func": "( Vector vLocation )",
            "name": "CastFilterResultLocation",
            "return": "int"
        },
        {
            "desc": "(HSCRIPThTarget)判断一个作用于某个单位的命令是否有效",
            "func": "( handle hTarget )",
            "name": "CastFilterResultTarget",
            "return": "int"
        },
        {
            "desc": "Controls the size of the AOE casting cursor.",
            "func": "()",
            "name": "GetAOERadius",
            "return": "float"
        },
        {
            "desc": "获取相互关联的技能Returnsabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.",
            "func": "()",
            "name": "GetAssociatedPrimaryAbilities",
            "return": "string"
        },
        {
            "desc": "Returnsotherabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.Generallyhiddenabilities.",
            "func": "()",
            "name": "GetAssociatedSecondaryAbilities",
            "return": "string"
        },
        {
            "desc": "返回技能的施法动作类型",
            "func": "()",
            "name": "GetBehavior",
            "return": "uint64"
        },
        {
            "desc": "返回技能的施法动画",
            "func": "()",
            "name": "GetCastAnimation",
            "return": "int"
        },
        {
            "desc": "Return cast point of this ability.",
            "func": "()",
            "name": "GetCastPoint",
            "return": "float"
        },
        {
            "desc": "返回技能的施法范围",
            "func": "( Vector vLocation, handle hTarget )",
            "name": "GetCastRange",
            "return": "int"
        },
        {
            "desc": "返回技能的持续施法动画",
            "func": "()",
            "name": "GetChannelAnimation",
            "return": "int"
        },
        {
            "desc": "返回技能的持续施法时间",
            "func": "()",
            "name": "GetChannelTime",
            "return": "float"
        },
        {
            "desc": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
            "func": "( int iLevel )",
            "name": "GetChannelledManaCostPerSecond",
            "return": "int"
        },
        {
            "desc": "返回该技能被释放时将听到语音的单位",
            "func": "()",
            "name": "GetConceptRecipientType",
            "return": "int"
        },
        {
            "desc": "返回技能的CD",
            "func": "( int iLevel )",
            "name": "GetCooldown",
            "return": "float"
        },
        {
            "desc": "返回一条失效的无目标命令的错误信息",
            "func": "()",
            "name": "GetCustomCastError",
            "return": "string"
        },
        {
            "desc": "(VectorvLocation)返回一条失效的作用于地点的命令的错误信息",
            "func": "( Vector vLocation )",
            "name": "GetCustomCastErrorLocation",
            "return": "string"
        },
        {
            "desc": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
            "func": "( handle hTarget )",
            "name": "GetCustomCastErrorTarget",
            "return": "string"
        },
        {
            "desc": "返回某等级的金钱花费（当前为-1）",
            "func": "( int iLevel )",
            "name": "GetGoldCost",
            "return": "int"
        },
        {
            "desc": "返回被该技能被动施加的Mordifier",
            "func": "()",
            "name": "GetIntrinsicModifierName",
            "return": "string"
        },
        {
            "desc": "返回某等级的魔法消耗（当前为-1）",
            "func": "( int iLevel )",
            "name": "GetManaCost",
            "return": "int"
        },
        {
            "desc": "返回施法动画的播放速度",
            "func": "()",
            "name": "GetPlaybackRateOverride",
            "return": "float"
        },
        {
            "desc": "返回当该技能不在动作面板上时是否能使用",
            "func": "()",
            "name": "IsHiddenAbilityCastable",
            "return": "bool"
        },
        {
            "desc": "返回该技能被技能窃取后是否是隐藏的",
            "func": "()",
            "name": "IsHiddenWhenStolen",
            "return": "bool"
        },
        {
            "desc": "返回该技能是否能被刷新球刷新",
            "func": "()",
            "name": "IsRefreshable",
            "return": "bool"
        },
        {
            "desc": "返回该技能是否能被窃取",
            "func": "()",
            "name": "IsStealable",
            "return": "bool"
        },
        {
            "desc": "施法被打断",
            "func": "()",
            "name": "OnAbilityPhaseInterrupted",
            "return": "void"
        },
        {
            "desc": "施法开始（施法成功时返回True）",
            "func": "()",
            "name": "OnAbilityPhaseStart",
            "return": "bool"
        },
        {
            "desc": "The ability was pinged (nPlayerID, bCtrlHeld).",
            "func": "( int nPlayerID, bool bCtrlHeld )",
            "name": "OnAbilityPinged",
            "return": "void"
        },
        {
            "desc": "(boolbInterrupted)持续施法完成",
            "func": "( bool bInterrupted )",
            "name": "OnChannelFinish",
            "return": "void"
        },
        {
            "desc": "(floatflInterval)持续施法开始",
            "func": "( float flInterval )",
            "name": "OnChannelThink",
            "return": "void"
        },
        {
            "desc": "施法者（仅限英雄）升级，得到技能加点,或receivedanewstatbonus.",
            "func": "()",
            "name": "OnHeroCalculateStatBonus",
            "return": "void"
        },
        {
            "desc": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
            "func": "( handle unit, handle attacker, handle table )",
            "name": "OnHeroDiedNearby",
            "return": "void"
        },
        {
            "desc": "施法者升级",
            "func": "()",
            "name": "OnHeroLevelUp",
            "return": "void"
        },
        {
            "desc": "施法者物品库存发生变化",
            "func": "()",
            "name": "OnInventoryContentsChanged",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThItem)施法者装备了物品",
            "func": "( handle hItem )",
            "name": "OnItemEquipped",
            "return": "void"
        },
        {
            "desc": "施法者死亡",
            "func": "()",
            "name": "OnOwnerDied",
            "return": "void"
        },
        {
            "desc": "施法者第一次出生或重生",
            "func": "()",
            "name": "OnOwnerSpawned",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( handle hTarget, Vector vLocation )",
            "name": "OnProjectileHit",
            "return": "bool"
        },
        {
            "desc": "(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).",
            "func": "( handle hTarget, Vector vLocation, int iProjectileHandle )",
            "name": "OnProjectileHitHandle",
            "return": "bool"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation,tablekv)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( handle hTarget, Vector vLocation, handle table )",
            "name": "OnProjectileHit_ExtraData",
            "return": "bool"
        },
        {
            "desc": "(VectorvLocation)投射物正在运动",
            "func": "( Vector vLocation )",
            "name": "OnProjectileThink",
            "return": "void"
        },
        {
            "desc": "(int nProjectileHandle) Projectile is actively moving.",
            "func": "( int iProjectileHandle )",
            "name": "OnProjectileThinkHandle",
            "return": "void"
        },
        {
            "desc": "(VectorvLocation,tablekv)投射物正在运动",
            "func": "( Vector vLocation, handle table )",
            "name": "OnProjectileThink_ExtraData",
            "return": "void"
        },
        {
            "desc": "施法前摇结束，技能效果开始",
            "func": "()",
            "name": "OnSpellStart",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
            "func": "( handle hSourceAbility )",
            "name": "OnStolen",
            "return": "void"
        },
        {
            "desc": "Abilityistoggledon/off.技能被开启/关闭",
            "func": "()",
            "name": "OnToggle",
            "return": "void"
        },
        {
            "desc": "当技能未被（成功）窃取时，进行的某特殊行为",
            "func": "()",
            "name": "OnUnStolen",
            "return": "void"
        },
        {
            "desc": "技能升级",
            "func": "()",
            "name": "OnUpgrade",
            "return": "void"
        },
        {
            "desc": "返回该技能是否会增加周围单位的魔棒点数",
            "func": "()",
            "name": "ProcsMagicStick",
            "return": "bool"
        },
        {
            "desc": "Returns true if this ability should return to the default toggle state when its parent respawns.",
            "func": "()",
            "name": "ResetToggleOnRespawn",
            "return": "bool"
        },
        {
            "desc": "返回所使用的语音类型",
            "func": "()",
            "name": "SpeakTrigger",
            "return": "int"
        }
    ],
    "CPointClientUIWorldPanel": [
        {
            "desc": "Tells the panel to accept user input.",
            "func": "()",
            "name": "AcceptUserInput",
            "return": "void"
        },
        {
            "desc": "Adds CSS class(es) to the panel",
            "func": "( string pszClasses )",
            "name": "AddCSSClasses",
            "return": "void"
        },
        {
            "desc": "Tells the panel to ignore user input.",
            "func": "()",
            "name": "IgnoreUserInput",
            "return": "void"
        },
        {
            "desc": "Returns whether this entity is grabbable.",
            "func": "()",
            "name": "IsGrabbable",
            "return": "bool"
        },
        {
            "desc": "Remove CSS class(es) from the panel",
            "func": "( string pszClasses )",
            "name": "RemoveCSSClasses",
            "return": "void"
        }
    ],
    "CPointEntity": [],
    "CDOTA_Ability_Nian_Leap": [
        {
            "desc": "Overrideplaybackrate",
            "func": "( float flRate )",
            "name": "SetPlaybackRate",
            "return": "void"
        }
    ],
    "CPhysicsProp": [
        {
            "desc": "禁止该元件运动",
            "func": "()",
            "name": "DisableMotion",
            "return": "void"
        },
        {
            "desc": "允许该元件运动",
            "func": "()",
            "name": "EnableMotion",
            "return": "void"
        },
        {
            "desc": "Enable/disable dynamic vs dynamic continuous collision traces",
            "func": "( bool bIsDynamicVsDynamicContinuousEnabled )",
            "name": "SetDynamicVsDynamicContinuous",
            "return": "void"
        }
    ],
    "CDOTA_Ability_Animation_Attack": [
        {
            "desc": "重写播放速率",
            "func": "( float flRate )",
            "name": "SetPlaybackRate",
            "return": "void"
        }
    ],
    "CDOTA_PlayerResource": [
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "AddAegisPickup",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int nReason )",
            "name": "AddCandyEvent",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, float flFarmValue, bool bEarnedValue )",
            "name": "AddClaimedFarm",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iCost )",
            "name": "AddGoldSpentOnSupport",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int nTeamNumber, handle hItem )",
            "name": "AddNeutralItemToStash",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "AddRunePickup",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nUnitOwnerPlayerID, int nOtherPlayerID )",
            "name": "AreUnitsSharedWithPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "CanRepick",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ClearKillsMatrix",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ClearLastHitMultikill",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ClearLastHitStreak",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ClearRawPlayerDamageMatrix",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ClearStreak",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetAegisPickups",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetAssists",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetBroadcasterChannel",
            "return": "unsigned"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetBroadcasterChannelSlot",
            "return": "unsigned"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetClaimedDenies",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, bool bOnlyEarned )",
            "name": "GetClaimedFarm",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetClaimedMisses",
            "return": "int"
        },
        {
            "desc": "返回一个指示玩家连接状态的数字。0-无连接.1-机器人连入.2-玩家连入.3机器人/玩家断线.",
            "func": "( int iPlayerID )",
            "name": "GetConnectionState",
            "return": "<unknown>"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, bool bTotal )",
            "name": "GetCreepDamageTaken",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetCustomBuybackCooldown",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetCustomBuybackCost",
            "return": "int"
        },
        {
            "desc": "返回玩家要加入的队伍编号",
            "func": "( int iPlayerID )",
            "name": "GetCustomTeamAssignment",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iVictimID )",
            "name": "GetDamageDoneToHero",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetDeaths",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetDenies",
            "return": "int"
        },
        {
            "desc": "(nPlayerID, nActionID)",
            "func": "( int nPlayerID, unsigned unActionID )",
            "name": "GetEventGameCustomActionClaimCount",
            "return": "int"
        },
        {
            "desc": "(nPlayerID, pActionName)",
            "func": "( int nPlayerID, string pActionName )",
            "name": "GetEventGameCustomActionClaimCountByName",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int nPlayerID )",
            "name": "GetEventPointsForPlayerID",
            "return": "unsigned"
        },
        {
            "desc": "",
            "func": "( int nPlayerID )",
            "name": "GetEventPremiumPoints",
            "return": "unsigned"
        },
        {
            "desc": "",
            "func": "( int nPlayerID )",
            "name": "GetEventRanks",
            "return": "<unknown>"
        },
        {
            "desc": "返回指定玩家现有金钱量",
            "func": "( int iPlayerID )",
            "name": "GetGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldLostToDeath",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldPerMin",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldSpentOnBuybacks",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldSpentOnConsumables",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldSpentOnItems",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetGoldSpentOnSupport",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetHealing",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, bool bTotal )",
            "name": "GetHeroDamageTaken",
            "return": "int"
        },
        {
            "desc": "返回指定玩家击杀次数",
            "func": "( int iPlayerID )",
            "name": "GetKills",
            "return": "int"
        },
        {
            "desc": "返回攻击者(第一个参数)杀死指定受害者(第二个参数)的次数",
            "func": "( int iPlayerID, int iVictimID )",
            "name": "GetKillsDoneToHero",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetLastHitMultikill",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetLastHitStreak",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetLastHits",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetLevel",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetLiveSpectatorTeam",
            "return": "<unknown>"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetMisses",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetNearbyCreepDeaths",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetNetWorth",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int nCourierIndex, int nTeamNumber )",
            "name": "GetNthCourierForTeam",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "( int iTeamNumber, int iNthPlayer )",
            "name": "GetNthPlayerIDOnTeam",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetNumConsumablesPurchased",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int nTeamNumber )",
            "name": "GetNumCouriersForTeam",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetNumItemsPurchased",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetPartyID",
            "return": "uint64"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetPlayer",
            "return": "handle"
        },
        {
            "desc": "获取未加入队伍的观战者和玩家数量。",
            "func": "()",
            "name": "GetPlayerCount",
            "return": "int"
        },
        {
            "desc": "获取队伍中的玩家数量。",
            "func": "( int iTeam )",
            "name": "GetPlayerCountForTeam",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetPlayerLoadedCompletely",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetPlayerName",
            "return": "string"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetRawPlayerDamage",
            "return": "int"
        },
        {
            "desc": "返回指定玩家现有可靠金钱量",
            "func": "( int iPlayerID )",
            "name": "GetReliableGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetRespawnSeconds",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetRoshanKills",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetRunePickups",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetSelectedHeroEntity",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetSelectedHeroID",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetSelectedHeroName",
            "return": "string"
        },
        {
            "desc": "获取32位SteamID",
            "func": "( int iPlayerID )",
            "name": "GetSteamAccountID",
            "return": "unsigned"
        },
        {
            "desc": "获取64位SteamID",
            "func": "( int iPlayerID )",
            "name": "GetSteamID",
            "return": "uint64"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetStreak",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetStuns",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTeam",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iTeam )",
            "name": "GetTeamKills",
            "return": "int"
        },
        {
            "desc": "获取处于有效队伍（天辉，夜魇，或者自定义队伍）的玩家数量。",
            "func": "()",
            "name": "GetTeamPlayerCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTimeOfLastConsumablePurchase",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTimeOfLastDeath",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTimeOfLastItemPurchase",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTotalEarnedGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTotalEarnedXP",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTotalGoldSpent",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, bool bTotal )",
            "name": "GetTowerDamageTaken",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetTowerKills",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, int nOtherPlayerID )",
            "name": "GetUnitShareMaskForPlayer",
            "return": "int"
        },
        {
            "desc": "返回指定玩家现有不可靠金钱量",
            "func": "( int iPlayerID )",
            "name": "GetUnreliableGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "GetXPPerMin",
            "return": "float"
        },
        {
            "desc": "当玩家拥有通行证时返回true",
            "func": "( int iPlayerID )",
            "name": "HasCustomGameTicketForPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "HasRandomed",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "HasSelectedHero",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasSetEventGameCustomActionClaimCount",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HaveAllPlayersJoined",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iVictimID )",
            "name": "IncrementAssists",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementClaimedDenies",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementClaimedMisses",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iKillerID )",
            "name": "IncrementDeaths",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementDenies",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iVictimID )",
            "name": "IncrementKills",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementLastHitMultikill",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementLastHitStreak",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementLastHits",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementMisses",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementNearbyCreepDeaths",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IncrementStreak",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iXP, int nReason )",
            "name": "IncrementTotalEarnedXP",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsBroadcaster",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, int nOtherPlayerID )",
            "name": "IsDisableHelpSetForPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsFakeClient",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( string pHeroname, bool bIgnoreUnrevealedPick )",
            "name": "IsHeroSelected",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int nUnitOwnerPlayerID, int nOtherPlayerID )",
            "name": "IsHeroSharedWithPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsValidPlayer",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsValidPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsValidTeamPlayer",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "IsValidTeamPlayerID",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iGoldChange, bool bReliable, int nReason )",
            "name": "ModifyGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NumPlayers",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NumTeamPlayers",
            "return": "int"
        },
        {
            "desc": "Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)",
            "func": "( int iPlayerID, int item_definition_index, int nChargeIncrementOrDecrement )",
            "name": "RecordConsumableAbilityChargeChange",
            "return": "void"
        },
        {
            "desc": "(玩家ID,英雄职业名,金钱,经验值)-将玩家的英雄替换成指定的英雄、金钱和经验值",
            "func": "( int iPlayerID, string pszHeroClass, int nGold, int nXP )",
            "name": "ReplaceHeroWith",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "( int nPlayerID )",
            "name": "ResetBuybackCostTime",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "ResetTotalEarnedGold",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, float flBuybackCooldown )",
            "name": "SetBuybackCooldownTime",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, float flBuybackCooldown )",
            "name": "SetBuybackGoldLimitTime",
            "return": "void"
        },
        {
            "desc": "(玩家ID,实体)-强制玩家镜头跟随目标实体",
            "func": "( int nPlayerID, handle hTarget )",
            "name": "SetCameraTarget",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, bool bCanRepick )",
            "name": "SetCanRepick",
            "return": "void"
        },
        {
            "desc": "设置玩家买活冷却时间",
            "func": "( int iPlayerID, float flCooldownTime )",
            "name": "SetCustomBuybackCooldown",
            "return": "void"
        },
        {
            "desc": "设置玩家买活花费",
            "func": "( int iPlayerID, int iGoldCost )",
            "name": "SetCustomBuybackCost",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iParam )",
            "name": "SetCustomIntParam",
            "return": "void"
        },
        {
            "desc": "为玩家设定自定义颜色（将显示在小地图，计分板等）。",
            "func": "( int iPlayerID, int r, int g, int b )",
            "name": "SetCustomPlayerColor",
            "return": "void"
        },
        {
            "desc": "设置玩家要加入的队伍",
            "func": "( int iPlayerID, int iTeamAssignment )",
            "name": "SetCustomTeamAssignment",
            "return": "void"
        },
        {
            "desc": "设置玩家的可靠/不可靠金钱数",
            "func": "( int iPlayerID, int iGold, bool bReliable )",
            "name": "SetGold",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "SetHasRandomed",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iLastBuybackTime )",
            "name": "SetLastBuybackTime",
            "return": "void"
        },
        {
            "desc": "强制玩家选择实体。",
            "func": "( int nPlayerID, handle hEntity )",
            "name": "SetOverrideSelectionEntity",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int nPlayerID, int nOtherPlayerID, int nFlag, bool bState )",
            "name": "SetUnitShareMaskForPlayer",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iCost, int iReason )",
            "name": "SpendGold",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID, int iTeamNumber, int desiredSlot )",
            "name": "UpdateTeamSlot",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string pHeroFilename, bool bIgnoreUnrevealedPick )",
            "name": "WhoSelectedHero",
            "return": "int"
        }
    ],
    "CParticleSystem": [],
    "CDOTA_Modifier_Lua_Horizontal_Motion": [
        {
            "desc": "启动水平运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "name": "ApplyHorizontalMotionController",
            "return": "bool"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "name": "GetPriority",
            "return": "int"
        },
        {
            "desc": "当运动被打断时进行回调。",
            "func": "()",
            "name": "OnHorizontalMotionInterrupted",
            "return": "void"
        },
        {
            "desc": "设置优先级。",
            "func": "( int nMotionPriority )",
            "name": "SetPriority",
            "return": "void"
        },
        {
            "desc": "根据给定的间隔对NPC施加水平运动",
            "func": "( handle me, float dt )",
            "name": "UpdateHorizontalMotion",
            "return": "void"
        }
    ],
    "CNativeOutputs": [
        {
            "desc": "增加一个输出",
            "func": "( string_1, string_2 )",
            "name": "AddOutput",
            "return": "void"
        },
        {
            "desc": "初始化输出",
            "func": "( int_1 )",
            "name": "Init",
            "return": "void"
        }
    ],
    "CDOTA_Unit_CustomGameAnnouncer": [
        {
            "desc": "Determines whether response criteria is matched on server or client",
            "func": "( bool bIsServerAuthoritative )",
            "name": "SetServerAuthoritative",
            "return": "void"
        }
    ],
    "Convars": [
        {
            "desc": "获取指定的控制台变量（convar）的boolean值",
            "func": "( string_1 )",
            "name": "GetBool",
            "return": "table"
        },
        {
            "desc": "返回输入该控制台指令的玩家",
            "func": "()",
            "name": "GetCommandClient",
            "return": "handle"
        },
        {
            "desc": "返回输入该控制台指令的DOTA玩家",
            "func": "()",
            "name": "GetDOTACommandClient",
            "return": "handle"
        },
        {
            "desc": "将指定的控制台变量（convar）作为float返回.不存在时返回nil",
            "func": "( string_1 )",
            "name": "GetFloat",
            "return": "table"
        },
        {
            "desc": "将指定的控制台变量（convar）作为int返回.不存在时返回nil",
            "func": "( string_1 )",
            "name": "GetInt",
            "return": "table"
        },
        {
            "desc": "将指定的控制台变量（convar）作为string返回.不存在时返回nil",
            "func": "( string_1 )",
            "name": "GetStr",
            "return": "table"
        },
        {
            "desc": "注册一个控制台指令",
            "func": "( string_1, handle_2, string_3, int_4 )",
            "name": "RegisterCommand",
            "return": "void"
        },
        {
            "desc": "注册一个新的控制台变量",
            "func": "( string_1, string_2, string_3, int_4 )",
            "name": "RegisterConvar",
            "return": "void"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定bool",
            "func": "( string_1, bool_2 )",
            "name": "SetBool",
            "return": "void"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定float",
            "func": "( string_1, float_2 )",
            "name": "SetFloat",
            "return": "void"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定int",
            "func": "( string_1, int_2 )",
            "name": "SetInt",
            "return": "void"
        },
        {
            "desc": "将指定控制台变量（convar）设置为指定string",
            "func": "( string_1, string_2 )",
            "name": "SetStr",
            "return": "void"
        }
    ],
    "CDOTA_Item_Lua": [
        {
            "desc": "Returns true if this item can be picked up by the target unit.",
            "func": "( handle hUnit )",
            "name": "CanUnitPickUp",
            "return": "bool"
        },
        {
            "desc": "判断一个无目标的命令是否有效",
            "func": "()",
            "name": "CastFilterResult",
            "return": "int"
        },
        {
            "desc": "(VectorvLocation)判断一个作用于地点的命令是否有效",
            "func": "( Vector vLocation )",
            "name": "CastFilterResultLocation",
            "return": "int"
        },
        {
            "desc": "(HSCRIPThTarget)判断一个作用于目标的命令是否有效",
            "func": "( handle hTarget )",
            "name": "CastFilterResultTarget",
            "return": "int"
        },
        {
            "desc": "Returnsabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.",
            "func": "()",
            "name": "GetAssociatedPrimaryAbilities",
            "return": "string"
        },
        {
            "desc": "Returnsotherabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.Generallyhiddenabilities.",
            "func": "()",
            "name": "GetAssociatedSecondaryAbilities",
            "return": "string"
        },
        {
            "desc": "返回技能的施法动作类型",
            "func": "()",
            "name": "GetBehavior",
            "return": "int"
        },
        {
            "desc": "返回技能的施法范围",
            "func": "( Vector vLocation, handle hTarget )",
            "name": "GetCastRange",
            "return": "int"
        },
        {
            "desc": "返回技能的持续施法时间",
            "func": "()",
            "name": "GetChannelTime",
            "return": "float"
        },
        {
            "desc": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
            "func": "( int iLevel )",
            "name": "GetChannelledManaCostPerSecond",
            "return": "int"
        },
        {
            "desc": "返回该技能被释放时将听到语音的单位",
            "func": "()",
            "name": "GetConceptRecipientType",
            "return": "int"
        },
        {
            "desc": "返回技能的CD",
            "func": "( int iLevel )",
            "name": "GetCooldown",
            "return": "float"
        },
        {
            "desc": "返回一条失效的无目标命令的错误信息",
            "func": "()",
            "name": "GetCustomCastError",
            "return": "string"
        },
        {
            "desc": "(VectorvLocation)返回一条失效的作用与地点的命令的错误信息",
            "func": "( Vector vLocation )",
            "name": "GetCustomCastErrorLocation",
            "return": "string"
        },
        {
            "desc": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
            "func": "( handle hTarget )",
            "name": "GetCustomCastErrorTarget",
            "return": "string"
        },
        {
            "desc": "返回某等级的金钱花费（当前为-1）",
            "func": "( int iLevel )",
            "name": "GetGoldCost",
            "return": "int"
        },
        {
            "desc": "返回被该技能被动地施加的Mordifier",
            "func": "()",
            "name": "GetIntrinsicModifierName",
            "return": "string"
        },
        {
            "desc": "返回某等级的魔法消耗（当前为-1）",
            "func": "( int iLevel )",
            "name": "GetManaCost",
            "return": "int"
        },
        {
            "desc": "返回施法动画的播放速度",
            "func": "()",
            "name": "GetPlaybackRateOverride",
            "return": "float"
        },
        {
            "desc": "返回当该技能不在动作面板上时是否能使用",
            "func": "()",
            "name": "IsHiddenAbilityCastable",
            "return": "bool"
        },
        {
            "desc": "返回该技能被技能窃取后是否是隐藏的",
            "func": "()",
            "name": "IsHiddenWhenStolen",
            "return": "bool"
        },
        {
            "desc": "Returns whether this item is muted or not.",
            "func": "()",
            "name": "IsMuted",
            "return": "bool"
        },
        {
            "desc": "返回该技能是否能被刷新球刷新",
            "func": "()",
            "name": "IsRefreshable",
            "return": "bool"
        },
        {
            "desc": "返回该技能是否能被窃取",
            "func": "()",
            "name": "IsStealable",
            "return": "bool"
        },
        {
            "desc": "施法被打断",
            "func": "()",
            "name": "OnAbilityPhaseInterrupted",
            "return": "void"
        },
        {
            "desc": "施法开始（施法成功时返回True）",
            "func": "()",
            "name": "OnAbilityPhaseStart",
            "return": "bool"
        },
        {
            "desc": "(boolbInterrupted)持续施法完成",
            "func": "( bool bInterrupted )",
            "name": "OnChannelFinish",
            "return": "void"
        },
        {
            "desc": "(floatflInterval)持续施法开始",
            "func": "( float flInterval )",
            "name": "OnChannelThink",
            "return": "void"
        },
        {
            "desc": "Runs when item's charge count changes.",
            "func": "()",
            "name": "OnChargeCountChanged",
            "return": "void"
        },
        {
            "desc": "Caster(heroonly)gainedalevel,skilledanability,orreceivedanewstatbonus.",
            "func": "()",
            "name": "OnHeroCalculateStatBonus",
            "return": "void"
        },
        {
            "desc": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
            "func": "( handle unit, handle attacker, handle table )",
            "name": "OnHeroDiedNearby",
            "return": "void"
        },
        {
            "desc": "施法者升级",
            "func": "()",
            "name": "OnHeroLevelUp",
            "return": "void"
        },
        {
            "desc": "施法者物品库存发生变化",
            "func": "()",
            "name": "OnInventoryContentsChanged",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThItem)施法者装备了物品",
            "func": "( handle hItem )",
            "name": "OnItemEquipped",
            "return": "void"
        },
        {
            "desc": "施法者死亡",
            "func": "()",
            "name": "OnOwnerDied",
            "return": "void"
        },
        {
            "desc": "施法者第一次出生或重生",
            "func": "()",
            "name": "OnOwnerSpawned",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
            "func": "( handle hTarget, Vector vLocation )",
            "name": "OnProjectileHit",
            "return": "bool"
        },
        {
            "desc": "(VectorvLocation)投射物正在运动",
            "func": "( Vector vLocation )",
            "name": "OnProjectileThink",
            "return": "void"
        },
        {
            "desc": "施法前摇结束，技能效果开始",
            "func": "()",
            "name": "OnSpellStart",
            "return": "void"
        },
        {
            "desc": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
            "func": "( handle hSourceAbility )",
            "name": "OnStolen",
            "return": "void"
        },
        {
            "desc": "技能被开启/关闭",
            "func": "()",
            "name": "OnToggle",
            "return": "void"
        },
        {
            "desc": "当技能未被（成功）窃取时，进行的某特殊行为",
            "func": "()",
            "name": "OnUnStolen",
            "return": "void"
        },
        {
            "desc": "技能升级",
            "func": "()",
            "name": "OnUpgrade",
            "return": "void"
        },
        {
            "desc": "返回该技能是否会增加周围单位的魔棒点数",
            "func": "()",
            "name": "ProcsMagicStick",
            "return": "bool"
        },
        {
            "desc": "返回所使用的语音类型",
            "func": "()",
            "name": "SpeakTrigger",
            "return": "int"
        }
    ],
    "CDOTA_BaseNPC_Hero": [
        {
            "desc": "给单位增加经验值",
            "func": "( float flXP, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal )",
            "name": "AddExperience",
            "return": "bool"
        },
        {
            "desc": "花费金钱并买活英雄",
            "func": "()",
            "name": "Buyback",
            "return": "void"
        },
        {
            "desc": "英雄返回属性后，重新计算全部属性",
            "func": "()",
            "name": "CalculateStatBonus",
            "return": "void"
        },
        {
            "desc": "返回布尔值，买活返回金钱限制时间是否少于游戏时间（其实就是是否能够正常返回金钱.....）",
            "func": "()",
            "name": "CanEarnGold",
            "return": "bool"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "ClearLastHitMultikill",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "ClearLastHitStreak",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "ClearStreak",
            "return": "void"
        },
        {
            "desc": "返回未分配的技能点数",
            "func": "()",
            "name": "GetAbilityPoints",
            "return": "int"
        },
        {
            "desc": "返回玩家拥有的额外单位",
            "func": "()",
            "name": "GetAdditionalOwnedUnits",
            "return": "table"
        },
        {
            "desc": "返回敏捷值",
            "func": "()",
            "name": "GetAgility",
            "return": "float"
        },
        {
            "desc": "返回敏捷成长",
            "func": "()",
            "name": "GetAgilityGain",
            "return": "float"
        },
        {
            "desc": "返回助攻数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "GetAssists",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( int nIndex )",
            "name": "GetAttacker",
            "return": "int"
        },
        {
            "desc": "返回基础敏捷",
            "func": "()",
            "name": "GetBaseAgility",
            "return": "float"
        },
        {
            "desc": "返回基础攻击伤害最大值，英雄的基础攻击伤害也会受到属性影响",
            "func": "()",
            "name": "GetBaseDamageMax",
            "return": "int"
        },
        {
            "desc": "返回基础攻击伤害最小值，英雄的基础攻击伤害也会受到属性影响",
            "func": "()",
            "name": "GetBaseDamageMin",
            "return": "int"
        },
        {
            "desc": "返回基础智力",
            "func": "()",
            "name": "GetBaseIntellect",
            "return": "float"
        },
        {
            "desc": "Returns the base mana regen.",
            "func": "()",
            "name": "GetBaseManaRegen",
            "return": "float"
        },
        {
            "desc": "返回基础力量",
            "func": "()",
            "name": "GetBaseStrength",
            "return": "float"
        },
        {
            "desc": "返回来自主属性奖励的攻击伤害值",
            "func": "()",
            "name": "GetBonusDamageFromPrimaryStat",
            "return": "int"
        },
        {
            "desc": "返回该英雄买活CD的剩余时间",
            "func": "()",
            "name": "GetBuybackCooldownTime",
            "return": "float"
        },
        {
            "desc": "返回买活所需金钱",
            "func": "( bool bReturnOldValues )",
            "name": "GetBuybackCost",
            "return": "int"
        },
        {
            "desc": "返回买活所带来的金钱惩罚剩余时间",
            "func": "()",
            "name": "GetBuybackGoldLimitTime",
            "return": "float"
        },
        {
            "desc": "返回当前经验值",
            "func": "()",
            "name": "GetCurrentXP",
            "return": "int"
        },
        {
            "desc": "返回死亡损失金钱",
            "func": "()",
            "name": "GetDeathGoldCost",
            "return": "int"
        },
        {
            "desc": "返回死亡次数",
            "func": "()",
            "name": "GetDeaths",
            "return": "int"
        },
        {
            "desc": "返回反补次数",
            "func": "()",
            "name": "GetDenies",
            "return": "int"
        },
        {
            "desc": "返回该英雄拥有者所有的金钱数量",
            "func": "()",
            "name": "GetGold",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetGoldBounty",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetHeroID",
            "return": "int"
        },
        {
            "desc": "返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响",
            "func": "()",
            "name": "GetIncreasedAttackSpeed",
            "return": "float"
        },
        {
            "desc": "返回智力值",
            "func": "()",
            "name": "GetIntellect",
            "return": "float"
        },
        {
            "desc": "返回智力成长",
            "func": "()",
            "name": "GetIntellectGain",
            "return": "float"
        },
        {
            "desc": "返回击杀数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "GetKills",
            "return": "int"
        },
        {
            "desc": "返回正补数，数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "GetLastHits",
            "return": "int"
        },
        {
            "desc": "返回最近一次伤害时间",
            "func": "()",
            "name": "GetMostRecentDamageTime",
            "return": "float"
        },
        {
            "desc": "返回多杀计数",
            "func": "()",
            "name": "GetMultipleKillCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetNumAttackers",
            "return": "int"
        },
        {
            "desc": "返回玩家拥有的物品数量。",
            "func": "()",
            "name": "GetNumItemsInInventory",
            "return": "int"
        },
        {
            "desc": "返回玩家储藏处内",
            "func": "()",
            "name": "GetNumItemsInStash",
            "return": "int"
        },
        {
            "desc": "返回基础护甲值。",
            "func": "()",
            "name": "GetPhysicalArmorBaseValue",
            "return": "float"
        },
        {
            "desc": "返回英雄拥有者的ID",
            "func": "()",
            "name": "GetPlayerID",
            "return": "int"
        },
        {
            "desc": "返回英雄主要属性，0=力量,1=敏捷,2=智力.",
            "func": "()",
            "name": "GetPrimaryAttribute",
            "return": "int"
        },
        {
            "desc": "返回主属性值",
            "func": "()",
            "name": "GetPrimaryStatValue",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetReplicatingOtherHero",
            "return": "handle"
        },
        {
            "desc": "返回复活时间",
            "func": "()",
            "name": "GetRespawnTime",
            "return": "float"
        },
        {
            "desc": "返回该英雄是否被禁止复活。",
            "func": "()",
            "name": "GetRespawnsDisabled",
            "return": "bool"
        },
        {
            "desc": "返回连杀数",
            "func": "()",
            "name": "GetStreak",
            "return": "int"
        },
        {
            "desc": "返回力量值",
            "func": "()",
            "name": "GetStrength",
            "return": "float"
        },
        {
            "desc": "返回力量成长",
            "func": "()",
            "name": "GetStrengthGain",
            "return": "float"
        },
        {
            "desc": "返回复活所需的时间",
            "func": "()",
            "name": "GetTimeUntilRespawn",
            "return": "float"
        },
        {
            "desc": "返回物品栏中可佩带（可切换）的物品。",
            "func": "( int nSlotType )",
            "name": "GetTogglableWearable",
            "return": "handle"
        },
        {
            "desc": "返回是否有可用物品栏空间",
            "func": "()",
            "name": "HasAnyAvailableInventorySpace",
            "return": "bool"
        },
        {
            "desc": "返回是否拥有空中视野",
            "func": "()",
            "name": "HasFlyingVision",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasOwnerAbandoned",
            "return": "bool"
        },
        {
            "desc": "参数:constcharpItemName,boolbIncludeStashCombines,boolbAllowSelling",
            "func": "( string pItemName, bool bIncludeStashCombines, bool bAllowSelling )",
            "name": "HasRoomForItem",
            "return": "int"
        },
        {
            "desc": "升级英雄,参数决定是否播放升级效果.",
            "func": "( bool bPlayEffects )",
            "name": "HeroLevelUp",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "( int iKillerID )",
            "name": "IncrementAssists",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "( int iKillerID )",
            "name": "IncrementDeaths",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementDenies",
            "return": "void"
        },
        {
            "desc": "增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中",
            "func": "( int iVictimID )",
            "name": "IncrementKills",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementLastHitMultikill",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementLastHitStreak",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementLastHits",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementNearbyCreepDeaths",
            "return": "void"
        },
        {
            "desc": "数值存储在玩家资源(PlayerResource)中",
            "func": "()",
            "name": "IncrementStreak",
            "return": "void"
        },
        {
            "desc": "是否被死神镰刀禁止买活",
            "func": "()",
            "name": "IsBuybackDisabledByReapersScythe",
            "return": "bool"
        },
        {
            "desc": "是否处于重生中",
            "func": "()",
            "name": "IsReincarnating",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsStashEnabled",
            "return": "bool"
        },
        {
            "desc": "参数:英雄,加害者",
            "func": "( handle hHero, handle hInflictor )",
            "name": "KilledHero",
            "return": "void"
        },
        {
            "desc": "增加指定值到英雄基础敏捷，随后调用CalculateStatBonus",
            "func": "( float flNewAgility )",
            "name": "ModifyAgility",
            "return": "void"
        },
        {
            "desc": "给予英雄金钱。参数:int金钱数,bool是否为可靠金钱,int原因",
            "func": "( int iGoldChange, bool bReliable, int iReason )",
            "name": "ModifyGold",
            "return": "int"
        },
        {
            "desc": "Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason",
            "func": "( int iGoldChange, bool bReliabe, int iReason )",
            "name": "ModifyGoldFiltered",
            "return": "int"
        },
        {
            "desc": "增加指定值到英雄基础智力，随后调用CalculateStatBonus",
            "func": "( float flNewIntellect )",
            "name": "ModifyIntellect",
            "return": "void"
        },
        {
            "desc": "增加指定值到英雄基础力量，随后调用CalculateStatBonus",
            "func": "( float flNewStrength )",
            "name": "ModifyStrength",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PerformTaunt",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "RecordLastHit",
            "return": "void"
        },
        {
            "desc": "Respawn this hero.",
            "func": "( bool bBuyBack, bool bRespawnPenalty )",
            "name": "RespawnHero",
            "return": "void"
        },
        {
            "desc": "设置当前可用技能点",
            "func": "( int iPoints )",
            "name": "SetAbilityPoints",
            "return": "void"
        },
        {
            "desc": "设置基础敏捷",
            "func": "( float flAgility )",
            "name": "SetBaseAgility",
            "return": "void"
        },
        {
            "desc": "设置基础智力",
            "func": "( float flIntellect )",
            "name": "SetBaseIntellect",
            "return": "void"
        },
        {
            "desc": "设置基础力量",
            "func": "( float flStrength )",
            "name": "SetBaseStrength",
            "return": "void"
        },
        {
            "desc": "设置人机对战的难度。",
            "func": "( int nDifficulty )",
            "name": "SetBotDifficulty",
            "return": "void"
        },
        {
            "desc": "设置是否被死神镰刀禁止买活",
            "func": "( bool bBuybackDisabled )",
            "name": "SetBuyBackDisabledByReapersScythe",
            "return": "void"
        },
        {
            "desc": "设置买活冷却时间",
            "func": "( float flTime )",
            "name": "SetBuybackCooldownTime",
            "return": "void"
        },
        {
            "desc": "设置买活后金钱惩罚时间",
            "func": "( float flTime )",
            "name": "SetBuybackGoldLimitTime",
            "return": "void"
        },
        {
            "desc": "GameRulesbooleanmustbesetforthistowork!}}",
            "func": "( int iValue )",
            "name": "SetCustomDeathXP",
            "return": "void"
        },
        {
            "desc": "设置英雄拥有者的金钱",
            "func": "( int iGold, bool bReliable )",
            "name": "SetGold",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iPlayerID )",
            "name": "SetPlayerID",
            "return": "void"
        },
        {
            "desc": "设置英雄的主属性值。",
            "func": "( int nPrimaryAttribute )",
            "name": "SetPrimaryAttribute",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector vOrigin )",
            "name": "SetRespawnPosition",
            "return": "void"
        },
        {
            "desc": "禁止英雄复活。",
            "func": "( bool bDisableRespawns )",
            "name": "SetRespawnsDisabled",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bEnabled )",
            "name": "SetStashEnabled",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float time )",
            "name": "SetTimeUntilRespawn",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ShouldDoFlyHeightVisual",
            "return": "bool"
        },
        {
            "desc": "参数:int金钱,int原因",
            "func": "( int iCost, int iReason )",
            "name": "SpendGold",
            "return": "void"
        },
        {
            "desc": "升级指定技能，需要英雄拥有该技能和技能点",
            "func": "( handle hAbility )",
            "name": "UpgradeAbility",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "WillReincarnate",
            "return": "bool"
        }
    ],
    "CDOTA_Modifier_Lua_Vertical_Motion": [
        {
            "desc": "启动垂直运动控制器的特效。启动成功后返回True。",
            "func": "()",
            "name": "ApplyVerticalMotionController",
            "return": "bool"
        },
        {
            "desc": "获取优先级。",
            "func": "()",
            "name": "GetMotionPriority",
            "return": "int"
        },
        {
            "desc": "当竖直运动被打断时进行回调",
            "func": "()",
            "name": "OnVerticalMotionInterrupted",
            "return": "void"
        },
        {
            "desc": "设置优先级。",
            "func": "( int nMotionPriority )",
            "name": "SetMotionPriority",
            "return": "void"
        },
        {
            "desc": "根据给定的间隔对NPC施加竖直运动。",
            "func": "( handle me, float dt )",
            "name": "UpdateVerticalMotion",
            "return": "void"
        }
    ],
    "CDOTAVoteSystem": [
        {
            "desc": "开始投票，详细由传入的table制定",
            "func": "( handle_1 )",
            "name": "StartVote",
            "return": "void"
        }
    ],
    "CDOTA_BaseNPC_Building": [
        {
            "desc": "返回建筑无敌计数",
            "func": "()",
            "name": "GetInvulnCount",
            "return": "int"
        },
        {
            "desc": "设置建筑无敌计数",
            "func": "( int nInvulnCount )",
            "name": "SetInvulnCount",
            "return": "void"
        }
    ],
    "CDOTAGamerules": [
        {
            "desc": "Spawn a bot player of the passed hero name, player name, and team.",
            "func": "( string_1, string_2, int_3, string_4, bool_5 )",
            "name": "AddBotPlayerWithEntityScript",
            "return": "handle"
        },
        {
            "desc": "Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 )",
            "func": "( string_1, unsigned_2, unsigned_3, unsigned_4, unsigned_5, unsigned_6, unsigned_7, unsigned_8, unsigned_9 )",
            "name": "AddEventMetadataLeaderboardEntry",
            "return": "bool"
        },
        {
            "desc": "Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 )",
            "func": "( string_1, unsigned_2, unsigned_3, unsigned_4, unsigned_5, unsigned_6, unsigned_7, unsigned_8 )",
            "name": "AddEventMetadataLeaderboardEntryRawScore",
            "return": "bool"
        },
        {
            "desc": "Add an item to the whitelist",
            "func": "( string_1 )",
            "name": "AddItemToWhiteList",
            "return": "void"
        },
        {
            "desc": "Add a point on the minimap.",
            "func": "( int_1, Vector_2, int_3, int_4, int_5, int_6, float_7 )",
            "name": "AddMinimapDebugPoint",
            "return": "void"
        },
        {
            "desc": "Add a point on the minimap for a specific team.",
            "func": "( int_1, Vector_2, int_3, int_4, int_5, int_6, float_7, int_8 )",
            "name": "AddMinimapDebugPointForTeam",
            "return": "void"
        },
        {
            "desc": "Begin night stalker night.",
            "func": "( float_1 )",
            "name": "BeginNightstalkerNight",
            "return": "void"
        },
        {
            "desc": "Begin temporary night.",
            "func": "( float_1 )",
            "name": "BeginTemporaryNight",
            "return": "void"
        },
        {
            "desc": "Fills all the teams with bots if cheat mode is enabled.",
            "func": "()",
            "name": "BotPopulate",
            "return": "void"
        },
        {
            "desc": "Kills the ancient, etc.",
            "func": "()",
            "name": "Defeated",
            "return": "void"
        },
        {
            "desc": "true when we have waited some time after end of the game and not received signout",
            "func": "()",
            "name": "DidMatchSignoutTimeOut",
            "return": "bool"
        },
        {
            "desc": "Enabled (true) or disable (false) auto launch for custom game setup.",
            "func": "( bool_1 )",
            "name": "EnableCustomGameSetupAutoLaunch",
            "return": "void"
        },
        {
            "desc": "Sends a minimap ping to all players on the team",
            "func": "( int_1, float_2, float_3, handle_4, int_5 )",
            "name": "ExecuteTeamPing",
            "return": "void"
        },
        {
            "desc": "Indicate that the custom game setup phase is complete, and advance to the game.",
            "func": "()",
            "name": "FinishCustomGameSetup",
            "return": "void"
        },
        {
            "desc": "Spawn the next wave of creeps.",
            "func": "()",
            "name": "ForceCreepSpawn",
            "return": "void"
        },
        {
            "desc": "Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
            "func": "()",
            "name": "ForceGameStart",
            "return": "void"
        },
        {
            "desc": "Get the announcer for a team",
            "func": "( int_1 )",
            "name": "GetAnnouncer",
            "return": "handle"
        },
        {
            "desc": "Returns the hero unit names banned in this game, if any",
            "func": "()",
            "name": "GetBannedHeroes",
            "return": "table"
        },
        {
            "desc": "Returns the difficulty level of the custom game mode",
            "func": "()",
            "name": "GetCustomGameDifficulty",
            "return": "int"
        },
        {
            "desc": "Get whether a team is selectable during game setup",
            "func": "( int_1 )",
            "name": "GetCustomGameTeamMaxPlayers",
            "return": "int"
        },
        {
            "desc": "(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.",
            "func": "( bool_1, bool_2 )",
            "name": "GetDOTATime",
            "return": "float"
        },
        {
            "desc": "Returns difficulty level of the custom game mode",
            "func": "()",
            "name": "GetDifficulty",
            "return": "int"
        },
        {
            "desc": "Gets the Xth dropped item",
            "func": "( int_1 )",
            "name": "GetDroppedItem",
            "return": "handle"
        },
        {
            "desc": "Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused",
            "func": "()",
            "name": "GetGameFrameTime",
            "return": "float"
        },
        {
            "desc": "Get the game mode entity",
            "func": "()",
            "name": "GetGameModeEntity",
            "return": "handle"
        },
        {
            "desc": "Get a string value from the game session config (map options)",
            "func": "( string_1, string_2 )",
            "name": "GetGameSessionConfigValue",
            "return": "string"
        },
        {
            "desc": "Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused",
            "func": "()",
            "name": "GetGameTime",
            "return": "float"
        },
        {
            "desc": "Get the stock count of the item",
            "func": "( int_1, string_2, int_3 )",
            "name": "GetItemStockCount",
            "return": "int"
        },
        {
            "desc": "Get the time it takes to add a new item to stock",
            "func": "( int_1, string_2, int_3 )",
            "name": "GetItemStockDuration",
            "return": "float"
        },
        {
            "desc": "Get the time an item will be added to stock",
            "func": "( int_1, string_2, int_3 )",
            "name": "GetItemStockTime",
            "return": "float"
        },
        {
            "desc": "Get the MatchID for this game.",
            "func": "()",
            "name": "GetMatchID",
            "return": "uint64"
        },
        {
            "desc": "Have we received the post match signout message that includes reward information",
            "func": "()",
            "name": "GetMatchSignoutComplete",
            "return": "bool"
        },
        {
            "desc": "Gets next bounty rune spawn time",
            "func": "()",
            "name": "GetNextBountyRuneSpawnTime",
            "return": "float"
        },
        {
            "desc": "Gets next rune spawn time",
            "func": "()",
            "name": "GetNextRuneSpawnTime",
            "return": "float"
        },
        {
            "desc": "For New Bloom, get total damage taken by the Nian / Year Beast",
            "func": "()",
            "name": "GetNianTotalDamageTaken",
            "return": "int"
        },
        {
            "desc": "(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session",
            "func": "( int_1 )",
            "name": "GetPlayerCustomGameAccountRecord",
            "return": "table"
        },
        {
            "desc": "Get time remaining between state changes.",
            "func": "()",
            "name": "GetStateTransitionTime",
            "return": "float"
        },
        {
            "desc": "Get the time of day",
            "func": "()",
            "name": "GetTimeOfDay",
            "return": "float"
        },
        {
            "desc": "Get Weather Wind Direction Vector",
            "func": "()",
            "name": "GetWeatherWindDirection",
            "return": "Vector"
        },
        {
            "desc": "Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID .",
            "func": "( int_1, string_2, int_3, int_4 )",
            "name": "IncreaseItemStock",
            "return": "void"
        },
        {
            "desc": "Are cheats enabled on the server",
            "func": "()",
            "name": "IsCheatMode",
            "return": "bool"
        },
        {
            "desc": "Is it day time?",
            "func": "()",
            "name": "IsDaytime",
            "return": "bool"
        },
        {
            "desc": "Returns whether the game is paused.",
            "func": "()",
            "name": "IsGamePaused",
            "return": "bool"
        },
        {
            "desc": "Returns whether hero respawn is enabled.",
            "func": "()",
            "name": "IsHeroRespawnEnabled",
            "return": "bool"
        },
        {
            "desc": "Are we in the ban phase of hero pick?",
            "func": "()",
            "name": "IsInBanPhase",
            "return": "bool"
        },
        {
            "desc": "Query an item in the whitelist",
            "func": "( string_1 )",
            "name": "IsItemInWhiteList",
            "return": "bool"
        },
        {
            "desc": "Is it night stalker night-time?",
            "func": "()",
            "name": "IsNightstalkerNight",
            "return": "bool"
        },
        {
            "desc": "Is it temporarily night-time?",
            "func": "()",
            "name": "IsTemporaryNight",
            "return": "bool"
        },
        {
            "desc": "Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.",
            "func": "( bool_1 )",
            "name": "LockCustomGameSetupTeamAssignment",
            "return": "void"
        },
        {
            "desc": "Makes the specified team lose",
            "func": "( int_1 )",
            "name": "MakeTeamLose",
            "return": "void"
        },
        {
            "desc": "Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true",
            "func": "( int_1, int_2, bool_3, int_4 )",
            "name": "ModifyGoldFiltered",
            "return": "int"
        },
        {
            "desc": "Returns the number of items currently dropped on the ground",
            "func": "()",
            "name": "NumDroppedItems",
            "return": "int"
        },
        {
            "desc": "Whether a player has custom game host privileges (shuffle teams, etc.)",
            "func": "( handle_1 )",
            "name": "PlayerHasCustomGameHostPrivileges",
            "return": "bool"
        },
        {
            "desc": "Updates custom hero, unit and ability KeyValues in memory with the latest values from disk",
            "func": "()",
            "name": "Playtesting_UpdateAddOnKeyValues",
            "return": "void"
        },
        {
            "desc": "Prepare Dota lane style spawners with a given interval",
            "func": "( float_1 )",
            "name": "PrepareSpawners",
            "return": "void"
        },
        {
            "desc": "Removes a fake client",
            "func": "( int_1 )",
            "name": "RemoveFakeClient",
            "return": "void"
        },
        {
            "desc": "Remove an item from the whitelist",
            "func": "( string_1 )",
            "name": "RemoveItemFromWhiteList",
            "return": "void"
        },
        {
            "desc": "Restart after killing the ancient, etc.",
            "func": "()",
            "name": "ResetDefeated",
            "return": "void"
        },
        {
            "desc": "Restart gametime from 0",
            "func": "()",
            "name": "ResetGameTime",
            "return": "void"
        },
        {
            "desc": "Restart at custom game setup.",
            "func": "()",
            "name": "ResetToCustomGameSetup",
            "return": "void"
        },
        {
            "desc": "Restart the game at hero selection",
            "func": "()",
            "name": "ResetToHeroSelection",
            "return": "void"
        },
        {
            "desc": "Sends a message on behalf of a player.",
            "func": "( string_1, int_2, int_3 )",
            "name": "SendCustomMessage",
            "return": "void"
        },
        {
            "desc": "Sends a message on behalf of a player to the specified team.",
            "func": "( string_1, int_2, int_3, int_4 )",
            "name": "SendCustomMessageToTeam",
            "return": "void"
        },
        {
            "desc": "(flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
            "func": "( float_1 )",
            "name": "SetCreepMinimapIconScale",
            "return": "void"
        },
        {
            "desc": "Sets whether the regular Dota creeps spawn.",
            "func": "( bool_1 )",
            "name": "SetCreepSpawningEnabled",
            "return": "void"
        },
        {
            "desc": "(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)",
            "func": "( handle_1, handle_2 )",
            "name": "SetCustomGameAccountRecordSaveFunction",
            "return": "void"
        },
        {
            "desc": "Sets a flag to enable/disable the default music handling code for custom games",
            "func": "( bool_1 )",
            "name": "SetCustomGameAllowBattleMusic",
            "return": "void"
        },
        {
            "desc": "Sets a flag to enable/disable the default music handling code for custom games",
            "func": "( bool_1 )",
            "name": "SetCustomGameAllowHeroPickMusic",
            "return": "void"
        },
        {
            "desc": "Sets a flag to enable/disable the default music handling code for custom games",
            "func": "( bool_1 )",
            "name": "SetCustomGameAllowMusicAtGameStart",
            "return": "void"
        },
        {
            "desc": "Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero.",
            "func": "( bool_1 )",
            "name": "SetCustomGameAllowSecondaryAbilitiesOnOtherUnits",
            "return": "void"
        },
        {
            "desc": "Set number of hero bans each team gets",
            "func": "( int_1 )",
            "name": "SetCustomGameBansPerTeam",
            "return": "void"
        },
        {
            "desc": "Set the difficulty level of the custom game mode",
            "func": "( int_1 )",
            "name": "SetCustomGameDifficulty",
            "return": "void"
        },
        {
            "desc": "Sets the game end delay.",
            "func": "( float_1 )",
            "name": "SetCustomGameEndDelay",
            "return": "void"
        },
        {
            "desc": "Set the amount of time to wait for auto launch.",
            "func": "( float_1 )",
            "name": "SetCustomGameSetupAutoLaunchDelay",
            "return": "void"
        },
        {
            "desc": "Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever",
            "func": "( float_1 )",
            "name": "SetCustomGameSetupRemainingTime",
            "return": "void"
        },
        {
            "desc": "Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)",
            "func": "( float_1 )",
            "name": "SetCustomGameSetupTimeout",
            "return": "void"
        },
        {
            "desc": "Set whether a team is selectable during game setup",
            "func": "( int_1, int_2 )",
            "name": "SetCustomGameTeamMaxPlayers",
            "return": "void"
        },
        {
            "desc": "Sets the victory message.",
            "func": "( string_1 )",
            "name": "SetCustomVictoryMessage",
            "return": "void"
        },
        {
            "desc": "Sets the victory message duration.",
            "func": "( float_1 )",
            "name": "SetCustomVictoryMessageDuration",
            "return": "void"
        },
        {
            "desc": "Event-only ( table hMetadataTable )",
            "func": "( handle_1 )",
            "name": "SetEventMetadataCustomTable",
            "return": "bool"
        },
        {
            "desc": "Event-only ( table hMetadataTable )",
            "func": "( handle_1 )",
            "name": "SetEventSignoutCustomTable",
            "return": "bool"
        },
        {
            "desc": "Sets whether to filter more gold events than normal",
            "func": "( bool_1 )",
            "name": "SetFilterMoreGold",
            "return": "void"
        },
        {
            "desc": "Sets whether First Blood has been triggered.",
            "func": "( bool_1 )",
            "name": "SetFirstBloodActive",
            "return": "void"
        },
        {
            "desc": "Freeze the game time.",
            "func": "( bool_1 )",
            "name": "SetGameTimeFrozen",
            "return": "void"
        },
        {
            "desc": "Makes the specified team win",
            "func": "( int_1 )",
            "name": "SetGameWinner",
            "return": "void"
        },
        {
            "desc": "Set Glyph cooldown for team",
            "func": "( int_1, float_2 )",
            "name": "SetGlyphCooldown",
            "return": "void"
        },
        {
            "desc": "Set the auto gold increase per timed interval.",
            "func": "( int_1 )",
            "name": "SetGoldPerTick",
            "return": "void"
        },
        {
            "desc": "Set the time interval between auto gold increases.",
            "func": "( float_1 )",
            "name": "SetGoldTickTime",
            "return": "void"
        },
        {
            "desc": "(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
            "func": "( float_1 )",
            "name": "SetHeroMinimapIconScale",
            "return": "void"
        },
        {
            "desc": "Control if the normal DOTA hero respawn rules apply.",
            "func": "( bool_1 )",
            "name": "SetHeroRespawnEnabled",
            "return": "void"
        },
        {
            "desc": "Sets amount of penalty time before randoming a hero",
            "func": "( float_1 )",
            "name": "SetHeroSelectPenaltyTime",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time players have to pick their hero.",
            "func": "( float_1 )",
            "name": "SetHeroSelectionTime",
            "return": "void"
        },
        {
            "desc": "Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
            "func": "( bool_1 )",
            "name": "SetHideKillMessageHeaders",
            "return": "void"
        },
        {
            "desc": "Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true.",
            "func": "( bool_1 )",
            "name": "SetIgnoreLobbyTeamsInCustomGame",
            "return": "void"
        },
        {
            "desc": "Set the stock count of the item",
            "func": "( int_1, int_2, string_3, int_4 )",
            "name": "SetItemStockCount",
            "return": "void"
        },
        {
            "desc": "Sets next bounty rune spawn time",
            "func": "( float_1 )",
            "name": "SetNextBountyRuneSpawnTime",
            "return": "void"
        },
        {
            "desc": "Sets next rune spawn time",
            "func": "( float_1 )",
            "name": "SetNextRuneSpawnTime",
            "return": "void"
        },
        {
            "desc": "Show this unit's health on the overlay health bar",
            "func": "( handle_1, int_2 )",
            "name": "SetOverlayHealthBarUnit",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time players have between the game ending and the server disconnecting them.",
            "func": "( float_1 )",
            "name": "SetPostGameTime",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time players have between picking their hero and game start.",
            "func": "( float_1 )",
            "name": "SetPreGameTime",
            "return": "void"
        },
        {
            "desc": "(flMinimapRuneIconScale) - Scale the rune icons on the minimap.",
            "func": "( float_1 )",
            "name": "SetRuneMinimapIconScale",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time between rune spawns.",
            "func": "( float_1 )",
            "name": "SetRuneSpawnTime",
            "return": "void"
        },
        {
            "desc": "(bSafeToLeave) - Mark this game as safe to leave.",
            "func": "( bool_1 )",
            "name": "SetSafeToLeave",
            "return": "void"
        },
        {
            "desc": "When true, players can repeatedly pick the same hero.",
            "func": "( bool_1 )",
            "name": "SetSameHeroSelectionEnabled",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time players have between the strategy phase and entering the pre-game phase.",
            "func": "( float_1 )",
            "name": "SetShowcaseTime",
            "return": "void"
        },
        {
            "desc": "Set whether to speak a Spawn concept instead of a Respawn concept on respawn.",
            "func": "( bool_1 )",
            "name": "SetSpeechUseSpawnInsteadOfRespawnConcept",
            "return": "void"
        },
        {
            "desc": "Set the starting gold amount.",
            "func": "( int_1 )",
            "name": "SetStartingGold",
            "return": "void"
        },
        {
            "desc": "Sets the amount of time players have between the hero selection and entering the showcase phase.",
            "func": "( float_1 )",
            "name": "SetStrategyTime",
            "return": "void"
        },
        {
            "desc": "Set the time of day.",
            "func": "( float_1 )",
            "name": "SetTimeOfDay",
            "return": "void"
        },
        {
            "desc": "Sets the tree regrow time in seconds.",
            "func": "( float_1 )",
            "name": "SetTreeRegrowTime",
            "return": "void"
        },
        {
            "desc": "Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
            "func": "( bool_1 )",
            "name": "SetUseBaseGoldBountyOnHeroes",
            "return": "void"
        },
        {
            "desc": "Allows heroes in the map to give a specific amount of XP (this value must be set).",
            "func": "( bool_1 )",
            "name": "SetUseCustomHeroXPValues",
            "return": "void"
        },
        {
            "desc": "When true, all items are available at as long as any shop is in range.",
            "func": "( bool_1 )",
            "name": "SetUseUniversalShopMode",
            "return": "void"
        },
        {
            "desc": "Set Weather Wind Direction Vector",
            "func": "( Vector_1 )",
            "name": "SetWeatherWindDirection",
            "return": "void"
        },
        {
            "desc": "Item whitelist functionality enable/disable",
            "func": "( bool_1 )",
            "name": "SetWhiteListEnabled",
            "return": "void"
        },
        {
            "desc": "Spawn and release the next creep wave from Dota lane style spawners.",
            "func": "()",
            "name": "SpawnAndReleaseCreeps",
            "return": "void"
        },
        {
            "desc": "Spawn and release the next set of neutral camps.",
            "func": "()",
            "name": "SpawnNeutralCreeps",
            "return": "void"
        },
        {
            "desc": "Get the current Gamerules state",
            "func": "()",
            "name": "State_Get",
            "return": "int"
        }
    ],
    "CDOTA_BaseNPC": [
        {
            "desc": "以技能名称为该单位新增技能，并且返回该技能句柄。",
            "func": "( string pszAbilityName )",
            "name": "AddAbility",
            "return": "handle"
        },
        {
            "desc": "Add an activity modifier that affects future StartGesture calls",
            "func": "( string szName )",
            "name": "AddActivityModifier",
            "return": "void"
        },
        {
            "desc": "增加物品到该单位的库存。",
            "func": "( handle hItem )",
            "name": "AddItem",
            "return": "handle"
        },
        {
            "desc": "向玩家的库存添加一个物品。",
            "func": "( string pszItemName )",
            "name": "AddItemByName",
            "return": "handle"
        },
        {
            "desc": "为该单位增加修改器。",
            "func": "( handle hCaster, handle hAbility, string pszScriptName, handle hModifierTable )",
            "name": "AddNewModifier",
            "return": "handle"
        },
        {
            "desc": "为单位添加NoDraw的flag。",
            "func": "()",
            "name": "AddNoDraw",
            "return": "void"
        },
        {
            "desc": "为单位添加一个会话气泡（可同时存在1-4个）。",
            "func": "( int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY )",
            "name": "AddSpeechBubble",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hAttacker, handle hAbility )",
            "name": "AlertNearbyUnits",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "AngerNearbyUnits",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flTime )",
            "name": "AttackNoEarlierThan",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "AttackReady",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "BoundingRadius2D",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "CalculateGenericBonuses",
            "return": "void"
        },
        {
            "desc": "CheckFoWtoseeifanentityisvisible.",
            "func": "( handle hEntity )",
            "name": "CanEntityBeSeenByMyTeam",
            "return": "bool"
        },
        {
            "desc": "Queryifthisunitcansellitems.",
            "func": "()",
            "name": "CanSellItems",
            "return": "bool"
        },
        {
            "desc": "技能立即施法。",
            "func": "( handle hAbility, int iPlayerIndex )",
            "name": "CastAbilityImmediately",
            "return": "void"
        },
        {
            "desc": "无目标的施放技能(hAbility,iPlayerIndex)。",
            "func": "( handle hAbility, int iPlayerIndex )",
            "name": "CastAbilityNoTarget",
            "return": "void"
        },
        {
            "desc": "对一地点施放技能。",
            "func": "( Vector vPosition, handle hAbility, int iPlayerIndex )",
            "name": "CastAbilityOnPosition",
            "return": "void"
        },
        {
            "desc": "对一实体施放技能。",
            "func": "( handle hTarget, handle hAbility, int iPlayerIndex )",
            "name": "CastAbilityOnTarget",
            "return": "void"
        },
        {
            "desc": "切换技能(hAbility,iPlayerIndex)。",
            "func": "( handle hAbility, int iPlayerIndex )",
            "name": "CastAbilityToggle",
            "return": "void"
        },
        {
            "desc": "Clear Activity modifiers",
            "func": "()",
            "name": "ClearActivityModifiers",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "DestroyAllSpeechBubbles",
            "return": "void"
        },
        {
            "desc": "拆解该单位库存中过时的物品",
            "func": "( handle hItem )",
            "name": "DisassembleItem",
            "return": "void"
        },
        {
            "desc": "将物品扔在指定地点。",
            "func": "( Vector vDest, handle hItem )",
            "name": "DropItemAtPosition",
            "return": "void"
        },
        {
            "desc": "立即将物品扔在指定地点。",
            "func": "( handle hItem, Vector vPosition )",
            "name": "DropItemAtPositionImmediate",
            "return": "void"
        },
        {
            "desc": "自库存栏丢落指定的物品。",
            "func": "( handle hItem )",
            "name": "EjectItemFromStash",
            "return": "void"
        },
        {
            "desc": "This unit will be set to face the target point.",
            "func": "( Vector vTarget )",
            "name": "FaceTowards",
            "return": "void"
        },
        {
            "desc": "Fade and remove the given gesture activity.",
            "func": "( int nActivity )",
            "name": "FadeGesture",
            "return": "void"
        },
        {
            "desc": "以名称寻找技能。",
            "func": "( string pAbilityName )",
            "name": "FindAbilityByName",
            "return": "handle"
        },
        {
            "desc": "以table形式返回该单位所具有的所有Modifier。",
            "func": "()",
            "name": "FindAllModifiers",
            "return": "table"
        },
        {
            "desc": "根据Modifier的名字，以table形式返回该单位所具有的modifier。",
            "func": "( string pszScriptName )",
            "name": "FindAllModifiersByName",
            "return": "table"
        },
        {
            "desc": "Get handle to first item in inventory, else nil.",
            "func": "( string pszItemName )",
            "name": "FindItemInInventory",
            "return": "handle"
        },
        {
            "desc": "根据给定的名称，返回modifier的句柄。如果没有找到该名称，将返回nil。",
            "func": "( string pszScriptName )",
            "name": "FindModifierByName",
            "return": "handle"
        },
        {
            "desc": "根据给定的名称，返回某施法者所具有modifier的句柄。如果没有找到该名称，将返回nil。",
            "func": "( string pszScriptName, handle hCaster )",
            "name": "FindModifierByNameAndCaster",
            "return": "handle"
        },
        {
            "desc": "强制击杀该单位。",
            "func": "( bool bReincarnate )",
            "name": "ForceKill",
            "return": "void"
        },
        {
            "desc": "Play an activity once, and then go back to idle.",
            "func": "( int nActivity )",
            "name": "ForcePlayActivityOnce",
            "return": "void"
        },
        {
            "desc": "以下标值检索该单位的技能。0是第一个技能",
            "func": "( int iIndex )",
            "name": "GetAbilityByIndex",
            "return": "handle"
        },
        {
            "desc": "获取拥有的技能数量。",
            "func": "()",
            "name": "GetAbilityCount",
            "return": "int"
        },
        {
            "desc": "获取单位的自动收集距离。",
            "func": "()",
            "name": "GetAcquisitionRange",
            "return": "float"
        },
        {
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。",
            "func": "()",
            "name": "GetAdditionalBattleMusicWeight",
            "return": "float"
        },
        {
            "desc": "获取该单位的仇恨目标。",
            "func": "()",
            "name": "GetAggroTarget",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAttackAnimationPoint",
            "return": "float"
        },
        {
            "desc": "获取单位的攻击力。",
            "func": "()",
            "name": "GetAttackCapability",
            "return": "int"
        },
        {
            "desc": "获取该单位伤害最大值与最小值之间的随机整数。",
            "func": "()",
            "name": "GetAttackDamage",
            "return": "int"
        },
        {
            "desc": "获取状态增加的攻击距离。",
            "func": "()",
            "name": "GetAttackRangeBuffer",
            "return": "float"
        },
        {
            "desc": "获取该单位的攻速。",
            "func": "()",
            "name": "GetAttackSpeed",
            "return": "float"
        },
        {
            "desc": "返回该单位的攻击目标。",
            "func": "()",
            "name": "GetAttackTarget",
            "return": "handle"
        },
        {
            "desc": "获取APS值(每秒能够打几下)。",
            "func": "()",
            "name": "GetAttacksPerSecond",
            "return": "float"
        },
        {
            "desc": "获取该单位最大伤害值与最小伤害值的平均数。",
            "func": "( handle hTarget )",
            "name": "GetAverageTrueAttackDamage",
            "return": "int"
        },
        {
            "desc": "获取单位的基础攻击距离(修改器不列入计算)。",
            "func": "()",
            "name": "GetBaseAttackRange",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetBaseAttackTime",
            "return": "float"
        },
        {
            "desc": "获取最大伤害值。",
            "func": "()",
            "name": "GetBaseDamageMax",
            "return": "int"
        },
        {
            "desc": "获取最小伤害值。",
            "func": "()",
            "name": "GetBaseDamageMin",
            "return": "int"
        },
        {
            "desc": "获取单位的基础日间视野距离(修改器不列入计算)。",
            "func": "()",
            "name": "GetBaseDayTimeVisionRange",
            "return": "int"
        },
        {
            "desc": "获取单位的基础血量恢复值。",
            "func": "()",
            "name": "GetBaseHealthRegen",
            "return": "float"
        },
        {
            "desc": "获取单位的基础魔法抗性值。",
            "func": "()",
            "name": "GetBaseMagicalResistanceValue",
            "return": "float"
        },
        {
            "desc": "获取基础血量值。",
            "func": "()",
            "name": "GetBaseMaxHealth",
            "return": "float"
        },
        {
            "desc": "获取基础跑速。",
            "func": "()",
            "name": "GetBaseMoveSpeed",
            "return": "float"
        },
        {
            "desc": "获取单位基础的夜间视野距离(修改器不列入计算)。",
            "func": "()",
            "name": "GetBaseNightTimeVisionRange",
            "return": "int"
        },
        {
            "desc": "This Mana regen is derived from constant bonuses like Basilius.",
            "func": "()",
            "name": "GetBonusManaRegen",
            "return": "float"
        },
        {
            "desc": "Parameter:bAttack",
            "func": "( bool bAttack )",
            "name": "GetCastPoint",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCastRangeBonus",
            "return": "float"
        },
        {
            "desc": "获取米波的主身（如果这个单位是米波）。",
            "func": "()",
            "name": "GetCloneSource",
            "return": "handle"
        },
        {
            "desc": "返回该单位的碰撞体积。",
            "func": "()",
            "name": "GetCollisionPadding",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCooldownReduction",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCreationTime",
            "return": "float"
        },
        {
            "desc": "获取该单位正在使用中的法术。",
            "func": "()",
            "name": "GetCurrentActiveAbility",
            "return": "handle"
        },
        {
            "desc": "获取当前的视野距离。",
            "func": "()",
            "name": "GetCurrentVisionRange",
            "return": "int"
        },
        {
            "desc": "获取鼠标指定的施法目标。",
            "func": "()",
            "name": "GetCursorCastTarget",
            "return": "handle"
        },
        {
            "desc": "获取鼠标位置。",
            "func": "()",
            "name": "GetCursorPosition",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetCursorTargetingNothing",
            "return": "bool"
        },
        {
            "desc": "Get the maximum attack damage of this unit.",
            "func": "()",
            "name": "GetDamageMax",
            "return": "int"
        },
        {
            "desc": "Get the minimum attack damage of this unit.",
            "func": "()",
            "name": "GetDamageMin",
            "return": "int"
        },
        {
            "desc": "获取该单位的日间视野(将修改器并入计算)。",
            "func": "()",
            "name": "GetDayTimeVisionRange",
            "return": "int"
        },
        {
            "desc": "获取该单位的击杀经验值奖赏。",
            "func": "()",
            "name": "GetDeathXP",
            "return": "int"
        },
        {
            "desc": "Attack speed expressed as constant value",
            "func": "()",
            "name": "GetDisplayAttackSpeed",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetEvasion",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetForceAttackTarget",
            "return": "handle"
        },
        {
            "desc": "获取该单位的击杀金钱奖赏。",
            "func": "()",
            "name": "GetGoldBounty",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetHasteFactor",
            "return": "float"
        },
        {
            "desc": "返回损失的血量(最大血量-当前血量)。",
            "func": "()",
            "name": "GetHealthDeficit",
            "return": "int"
        },
        {
            "desc": "获取该单位当前的血量百分比。",
            "func": "()",
            "name": "GetHealthPercent",
            "return": "int"
        },
        {
            "desc": "获取该单位当前的血量恢复值。",
            "func": "()",
            "name": "GetHealthRegen",
            "return": "float"
        },
        {
            "desc": "获取该单位的碰撞体积半径。",
            "func": "()",
            "name": "GetHullRadius",
            "return": "float"
        },
        {
            "desc": "获取该单位的跑速(将修改器并入计算)。",
            "func": "()",
            "name": "GetIdealSpeed",
            "return": "float"
        },
        {
            "desc": "Returns speed after all modifiers, but excluding those that reduce speed.",
            "func": "()",
            "name": "GetIdealSpeedNoSlows",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetIncreasedAttackSpeed",
            "return": "float"
        },
        {
            "desc": "返回该单位初始的路径点。",
            "func": "()",
            "name": "GetInitialGoalEntity",
            "return": "handle"
        },
        {
            "desc": "Get waypoint position for this NPC.",
            "func": "()",
            "name": "GetInitialGoalPosition",
            "return": "Vector"
        },
        {
            "desc": "以下标值获取物品栏中的物品。",
            "func": "( int i )",
            "name": "GetItemInSlot",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetLastAttackTime",
            "return": "float"
        },
        {
            "desc": "Get the last time this NPC took damage",
            "func": "()",
            "name": "GetLastDamageTime",
            "return": "float"
        },
        {
            "desc": "获取该单位最后进入/离开闲置状态的时间。",
            "func": "()",
            "name": "GetLastIdleChangeTime",
            "return": "float"
        },
        {
            "desc": "返回该单位当前的等级。",
            "func": "()",
            "name": "GetLevel",
            "return": "int"
        },
        {
            "desc": "返回该单位当前的魔法抗性值。",
            "func": "()",
            "name": "GetMagicalArmorValue",
            "return": "float"
        },
        {
            "desc": "返回控制该单位的玩家ID。",
            "func": "()",
            "name": "GetMainControllingPlayer",
            "return": "int"
        },
        {
            "desc": "获取该单位的魔力值。",
            "func": "()",
            "name": "GetMana",
            "return": "float"
        },
        {
            "desc": "获取该单位的剩余魔力值百分比。",
            "func": "()",
            "name": "GetManaPercent",
            "return": "int"
        },
        {
            "desc": "获取该单位的魔力恢复值。",
            "func": "()",
            "name": "GetManaRegen",
            "return": "float"
        },
        {
            "desc": "获取单位的最大法力值。",
            "func": "()",
            "name": "GetMaxMana",
            "return": "float"
        },
        {
            "desc": "获取击杀该单位所得的最大金钱。",
            "func": "()",
            "name": "GetMaximumGoldBounty",
            "return": "int"
        },
        {
            "desc": "获取击杀该单位所得的最小金钱。",
            "func": "()",
            "name": "GetMinimumGoldBounty",
            "return": "int"
        },
        {
            "desc": "获取模型大小半径。",
            "func": "()",
            "name": "GetModelRadius",
            "return": "float"
        },
        {
            "desc": "返回该单位所拥有的修改器数量。",
            "func": "()",
            "name": "GetModifierCount",
            "return": "int"
        },
        {
            "desc": "以下标值索引修改器，并返回修改器名称字符串。",
            "func": "( int nIndex )",
            "name": "GetModifierNameByIndex",
            "return": "string"
        },
        {
            "desc": "Getsthestackcountofagivenmodifier.",
            "func": "( string pszScriptName, handle hCaster )",
            "name": "GetModifierStackCount",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( float flBaseSpeed, bool bReturnUnslowed )",
            "name": "GetMoveSpeedModifier",
            "return": "float"
        },
        {
            "desc": "该单位是否被要求走访每个路径点?",
            "func": "()",
            "name": "GetMustReachEachGoalEntity",
            "return": "bool"
        },
        {
            "desc": "Get the name of this camp's neutral spawner.",
            "func": "()",
            "name": "GetNeutralSpawnerName",
            "return": "string"
        },
        {
            "desc": "If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
            "func": "()",
            "name": "GetNeverMoveToClearSpace",
            "return": "bool"
        },
        {
            "desc": "返回夜间视野距离(将修改器并入计算)。",
            "func": "()",
            "name": "GetNightTimeVisionRange",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetOpposingTeamNumber",
            "return": "int"
        },
        {
            "desc": "获取单位碰撞体积半径。",
            "func": "()",
            "name": "GetPaddedCollisionRadius",
            "return": "float"
        },
        {
            "desc": "返回基础护甲值。",
            "func": "()",
            "name": "GetPhysicalArmorBaseValue",
            "return": "float"
        },
        {
            "desc": "返回当前的护甲值。",
            "func": "( bool bIgnoreBase )",
            "name": "GetPhysicalArmorValue",
            "return": "float"
        },
        {
            "desc": "获取拥有此单位的玩家实体。",
            "func": "()",
            "name": "GetPlayerOwner",
            "return": "handle"
        },
        {
            "desc": "获取拥有此单位的玩家ID。",
            "func": "()",
            "name": "GetPlayerOwnerID",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetProjectileSpeed",
            "return": "int"
        },
        {
            "desc": "",
            "func": "( handle hNPC )",
            "name": "GetRangeToUnit",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetRangedProjectileName",
            "return": "string"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetSecondsPerAttack",
            "return": "float"
        },
        {
            "desc": "",
            "func": "( bool bBaseOnly )",
            "name": "GetSpellAmplification",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetStatusResistance",
            "return": "float"
        },
        {
            "desc": "获取用在升级的金钱。",
            "func": "()",
            "name": "GetTotalPurchasedUpgradeGoldCost",
            "return": "int"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetUnitLabel",
            "return": "string"
        },
        {
            "desc": "获取单位名称。",
            "func": "()",
            "name": "GetUnitName",
            "return": "string"
        },
        {
            "desc": "给予此单位指定的魔法值。(Giffmemana!)",
            "func": "( float flMana )",
            "name": "GiveMana",
            "return": "void"
        },
        {
            "desc": "以技能名称搜寻该单位是否拥有此技能。",
            "func": "( string pszAbilityName )",
            "name": "HasAbility",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasAnyActiveAbilities",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasAttackCapability",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasFlyMovementCapability",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasFlyingVision",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasGroundMovementCapability",
            "return": "bool"
        },
        {
            "desc": "Does this unit have an inventory.",
            "func": "()",
            "name": "HasInventory",
            "return": "bool"
        },
        {
            "desc": "以物品名称搜寻该单位是否拥有此物品。",
            "func": "( string pItemName )",
            "name": "HasItemInInventory",
            "return": "bool"
        },
        {
            "desc": "以修改器名称搜寻该单位是否拥有此修改器。",
            "func": "( string pszScriptName )",
            "name": "HasModifier",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasMovementCapability",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "HasScepter",
            "return": "bool"
        },
        {
            "desc": "治疗该单位。",
            "func": "( float flAmount, handle hInflictor )",
            "name": "Heal",
            "return": "void"
        },
        {
            "desc": "命令单位在原地待命。",
            "func": "()",
            "name": "Hold",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "Interrupt",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "InterruptChannel",
            "return": "void"
        },
        {
            "desc": "Parameterbooleandeterminesfindingclearspace.",
            "func": "( bool bFindClearSpace )",
            "name": "InterruptMotionControllers",
            "return": "void"
        },
        {
            "desc": "此单位是否还活着?",
            "func": "()",
            "name": "IsAlive",
            "return": "bool"
        },
        {
            "desc": "该生物是否为远古野怪?",
            "func": "()",
            "name": "IsAncient",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsAttackImmune",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsAttacking",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( handle hEntity )",
            "name": "IsAttackingEntity",
            "return": "bool"
        },
        {
            "desc": "Is this unit a Barracks?",
            "func": "()",
            "name": "IsBarracks",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsBlind",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsBlockDisabled",
            "return": "bool"
        },
        {
            "desc": "Is this unit a boss?",
            "func": "()",
            "name": "IsBoss",
            "return": "bool"
        },
        {
            "desc": "Is this unit a building?",
            "func": "()",
            "name": "IsBuilding",
            "return": "bool"
        },
        {
            "desc": "Is this unit currently channeling a spell?",
            "func": "()",
            "name": "IsChanneling",
            "return": "bool"
        },
        {
            "desc": "Is this unit a clone? (Meepo)",
            "func": "()",
            "name": "IsClone",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsCommandRestricted",
            "return": "bool"
        },
        {
            "desc": "Is this unit a considered a hero for targeting purposes?",
            "func": "()",
            "name": "IsConsideredHero",
            "return": "bool"
        },
        {
            "desc": "该单位是否为非Bot玩家所控制?",
            "func": "()",
            "name": "IsControllableByAnyPlayer",
            "return": "bool"
        },
        {
            "desc": "Is this unit a courier?",
            "func": "()",
            "name": "IsCourier",
            "return": "bool"
        },
        {
            "desc": "此单位是否为怪物类型单位?",
            "func": "()",
            "name": "IsCreature",
            "return": "bool"
        },
        {
            "desc": "Is this unit a creep?",
            "func": "()",
            "name": "IsCreep",
            "return": "bool"
        },
        {
            "desc": "Is this unit a creep hero?",
            "func": "()",
            "name": "IsCreepHero",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsCurrentlyHorizontalMotionControlled",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsCurrentlyVerticalMotionControlled",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsDisarmed",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsDominated",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsEvadeDisabled",
            "return": "bool"
        },
        {
            "desc": "Is this unit an Ancient?",
            "func": "()",
            "name": "IsFort",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsFrozen",
            "return": "bool"
        },
        {
            "desc": "此单位是否为英雄或英雄幻象?",
            "func": "()",
            "name": "IsHero",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsHexed",
            "return": "bool"
        },
        {
            "desc": "该生物是否处于闲置状态?",
            "func": "()",
            "name": "IsIdle",
            "return": "bool"
        },
        {
            "desc": "该单位是否为幻象单位?",
            "func": "()",
            "name": "IsIllusion",
            "return": "bool"
        },
        {
            "desc": "Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear",
            "func": "( int nShopType, bool bPhysical )",
            "name": "IsInRangeOfShop",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsInvisible",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsInvulnerable",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsLowAttackPriority",
            "return": "bool"
        },
        {
            "desc": "该单位是否魔法免疫?",
            "func": "()",
            "name": "IsMagicImmune",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsMovementImpaired",
            "return": "bool"
        },
        {
            "desc": "Is this unit moving?",
            "func": "()",
            "name": "IsMoving",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsMuted",
            "return": "bool"
        },
        {
            "desc": "该单位是否为野怪?",
            "func": "()",
            "name": "IsNeutralUnitType",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsNightmared",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( int nTeam )",
            "name": "IsOpposingTeam",
            "return": "bool"
        },
        {
            "desc": "Is this unit a ward-type unit?",
            "func": "()",
            "name": "IsOther",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsOutOfGame",
            "return": "bool"
        },
        {
            "desc": "该单位是否为非Bot之玩家所有?",
            "func": "()",
            "name": "IsOwnedByAnyPlayer",
            "return": "bool"
        },
        {
            "desc": "该单位是否为幻象单位?",
            "func": "()",
            "name": "IsPhantom",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsPhantomBlocker",
            "return": "bool"
        },
        {
            "desc": "是否在相位状态?",
            "func": "()",
            "name": "IsPhased",
            "return": "bool"
        },
        {
            "desc": "是否在某点的范围内",
            "func": "( Vector vPosition, float flRange )",
            "name": "IsPositionInRange",
            "return": "bool"
        },
        {
            "desc": "该单位攻击类型是否为远程攻击?",
            "func": "()",
            "name": "IsRangedAttacker",
            "return": "bool"
        },
        {
            "desc": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。",
            "func": "()",
            "name": "IsRealHero",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsReincarnating",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsRooted",
            "return": "bool"
        },
        {
            "desc": "Is this a shrine?",
            "func": "()",
            "name": "IsShrine",
            "return": "bool"
        },
        {
            "desc": "该单位是否被沉默?",
            "func": "()",
            "name": "IsSilenced",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsSpeciallyDeniable",
            "return": "bool"
        },
        {
            "desc": "该单位是否被晕眩了?",
            "func": "()",
            "name": "IsStunned",
            "return": "bool"
        },
        {
            "desc": "此单位是否为召唤物?",
            "func": "()",
            "name": "IsSummoned",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsTempestDouble",
            "return": "bool"
        },
        {
            "desc": "此单位是否为塔?",
            "func": "()",
            "name": "IsTower",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsUnableToMiss",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsUnselectable",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsUntargetable",
            "return": "bool"
        },
        {
            "desc": "杀死一个单位，参数为使用的技能与攻击者。",
            "func": "( handle hAbility, handle hAttacker )",
            "name": "Kill",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "MakeIllusion",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "MakePhantomBlocker",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iTeam, float flRadius )",
            "name": "MakeVisibleDueToAttack",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iTeam, float flDuration )",
            "name": "MakeVisibleToTeam",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ManageModelChanges",
            "return": "void"
        },
        {
            "desc": "设置血量为所指定的值",
            "func": "( int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags )",
            "name": "ModifyHealth",
            "return": "void"
        },
        {
            "desc": "移动至指定的单位。",
            "func": "( handle hNPC )",
            "name": "MoveToNPC",
            "return": "void"
        },
        {
            "desc": "将身上的物品丢给指定的单位。",
            "func": "( handle hNPC, handle hItem )",
            "name": "MoveToNPCToGiveItem",
            "return": "void"
        },
        {
            "desc": "移动到指定的位置。",
            "func": "( Vector vDest )",
            "name": "MoveToPosition",
            "return": "void"
        },
        {
            "desc": "移动到指定的位置。",
            "func": "( Vector vDest )",
            "name": "MoveToPositionAggressive",
            "return": "void"
        },
        {
            "desc": "移动至指定的单位，并且发动攻击。",
            "func": "( handle hTarget )",
            "name": "MoveToTargetToAttack",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NoHealthBar",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NoTeamMoveTo",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NoTeamSelect",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NoUnitCollision",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NotOnMinimap",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NotOnMinimapForEnemies",
            "return": "bool"
        },
        {
            "desc": "通知模型的可穿戴性发生了改变。",
            "func": "( bool bOriginalModel )",
            "name": "NotifyWearablesOfModelChange",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "PassivesDisabled",
            "return": "bool"
        },
        {
            "desc": "Issue a Patrol-To command.",
            "func": "( Vector vDest )",
            "name": "PatrolToPosition",
            "return": "void"
        },
        {
            "desc": "对一单位执行攻击。",
            "func": "( handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss )",
            "name": "PerformAttack",
            "return": "void"
        },
        {
            "desc": "捡起掉落的物品。",
            "func": "( handle hItem )",
            "name": "PickupDroppedItem",
            "return": "void"
        },
        {
            "desc": "捡起神符。",
            "func": "( handle hItem )",
            "name": "PickupRune",
            "return": "void"
        },
        {
            "desc": "Play a VCD on the NPC.",
            "func": "( string pVCD )",
            "name": "PlayVCD",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ProvidesVision",
            "return": "bool"
        },
        {
            "desc": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。",
            "func": "( bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions )",
            "name": "Purge",
            "return": "void"
        },
        {
            "desc": "Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay.",
            "func": "( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
            "name": "QueueConcept",
            "return": "void"
        },
        {
            "desc": "Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on.",
            "func": "( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
            "name": "QueueTeamConcept",
            "return": "void"
        },
        {
            "desc": "Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators.",
            "func": "( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
            "name": "QueueTeamConceptNoSpectators",
            "return": "void"
        },
        {
            "desc": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。",
            "func": "( float flAmount )",
            "name": "ReduceMana",
            "return": "void"
        },
        {
            "desc": "以技能名称移除该单位相应的技能。",
            "func": "( string pszAbilityName )",
            "name": "RemoveAbility",
            "return": "void"
        },
        {
            "desc": "Remove the passed ability from this unit.",
            "func": "( handle hAbility )",
            "name": "RemoveAbilityByHandle",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string pszAbilityName )",
            "name": "RemoveAbilityFromIndexByName",
            "return": "void"
        },
        {
            "desc": "(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath)",
            "func": "( int targets, bool bNow, bool bPermanent, bool bDeath )",
            "name": "RemoveAllModifiers",
            "return": "void"
        },
        {
            "desc": "移除某个动作。",
            "func": "( int nActivity )",
            "name": "RemoveGesture",
            "return": "void"
        },
        {
            "desc": "移除水平方向上的运动控制器。",
            "func": "( handle hBuff )",
            "name": "RemoveHorizontalMotionController",
            "return": "void"
        },
        {
            "desc": "将该单位库存中的过期物品移除。",
            "func": "( handle hItem )",
            "name": "RemoveItem",
            "return": "void"
        },
        {
            "desc": "以名称移除修改器。",
            "func": "( string pszScriptName )",
            "name": "RemoveModifierByName",
            "return": "void"
        },
        {
            "desc": "以施法者与修改器名称移除修改器。",
            "func": "( string pszScriptName, handle hCaster )",
            "name": "RemoveModifierByNameAndCaster",
            "return": "void"
        },
        {
            "desc": "Removethenodrawflag.",
            "func": "()",
            "name": "RemoveNoDraw",
            "return": "void"
        },
        {
            "desc": "移除垂直方向上的运动控制器。",
            "func": "( handle hBuff )",
            "name": "RemoveVerticalMotionController",
            "return": "void"
        },
        {
            "desc": "复活该单位。",
            "func": "()",
            "name": "RespawnUnit",
            "return": "void"
        },
        {
            "desc": "Gets this unit's attack range after all modifiers.",
            "func": "()",
            "name": "Script_GetAttackRange",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "Script_IsDeniable",
            "return": "bool"
        },
        {
            "desc": "卖出该单位的物品。",
            "func": "( handle hItem )",
            "name": "SellItem",
            "return": "void"
        },
        {
            "desc": "改变技能Index",
            "func": "( handle hAbility, int iIndex )",
            "name": "SetAbilityByIndex",
            "return": "void"
        },
        {
            "desc": "Setsacquisitionrange",
            "func": "( int nRange )",
            "name": "SetAcquisitionRange",
            "return": "void"
        },
        {
            "desc": "获取当与该单位战斗时将会计算的战斗音乐权重。",
            "func": "( float flWeight )",
            "name": "SetAdditionalBattleMusicWeight",
            "return": "void"
        },
        {
            "desc": "将这个单位的仇恨目标设为某个单位。",
            "func": "( handle hAggroTarget )",
            "name": "SetAggroTarget",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iAttackCapabilities )",
            "name": "SetAttackCapability",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hAttackTarget )",
            "name": "SetAttacking",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flBaseAttackTime )",
            "name": "SetBaseAttackTime",
            "return": "void"
        },
        {
            "desc": "设置基础最大攻击力。",
            "func": "( int nMax )",
            "name": "SetBaseDamageMax",
            "return": "void"
        },
        {
            "desc": "设置基础最小攻击力。",
            "func": "( int nMin )",
            "name": "SetBaseDamageMin",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flHealthRegen )",
            "name": "SetBaseHealthRegen",
            "return": "void"
        },
        {
            "desc": "设置基础魔法抗性值。",
            "func": "( float flMagicalResistanceValue )",
            "name": "SetBaseMagicalResistanceValue",
            "return": "void"
        },
        {
            "desc": "设置基础魔力恢复值。",
            "func": "( float flManaRegen )",
            "name": "SetBaseManaRegen",
            "return": "void"
        },
        {
            "desc": "设置基础最大血量。",
            "func": "( float flBaseMaxHealth )",
            "name": "SetBaseMaxHealth",
            "return": "void"
        },
        {
            "desc": "设置基础跑速。",
            "func": "( int iMoveSpeed )",
            "name": "SetBaseMoveSpeed",
            "return": "void"
        },
        {
            "desc": "设置这个单位是否能出售物品。",
            "func": "( bool bCanSell )",
            "name": "SetCanSellItems",
            "return": "void"
        },
        {
            "desc": "以玩家ID设置该单位的控制权。",
            "func": "( int iIndex, bool bSkipAdjustingPosition )",
            "name": "SetControllableByPlayer",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hEntity )",
            "name": "SetCursorCastTarget",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector vLocation )",
            "name": "SetCursorPosition",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bTargetingNothing )",
            "name": "SetCursorTargetingNothing",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string pLabel, int r, int g, int b )",
            "name": "SetCustomHealthLabel",
            "return": "void"
        },
        {
            "desc": "设置基础的视间视野距离。",
            "func": "( int iRange )",
            "name": "SetDayTimeVisionRange",
            "return": "void"
        },
        {
            "desc": "SettheXPbountyonthisunit",
            "func": "( int iXPBounty )",
            "name": "SetDeathXP",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hNPC )",
            "name": "SetForceAttackTarget",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( handle hNPC )",
            "name": "SetForceAttackTargetAlly",
            "return": "void"
        },
        {
            "desc": "Set if this unit has an inventory.",
            "func": "( bool bHasInventory )",
            "name": "SetHasInventory",
            "return": "void"
        },
        {
            "desc": "设置该单位的碰撞半径。",
            "func": "( float flHullRadius )",
            "name": "SetHullRadius",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bIdleAcquire )",
            "name": "SetIdleAcquire",
            "return": "void"
        },
        {
            "desc": "设置该单位的初始路径点。",
            "func": "( handle hGoal )",
            "name": "SetInitialGoalEntity",
            "return": "void"
        },
        {
            "desc": "Set waypoint position for this NPC.",
            "func": "( Vector vPosition )",
            "name": "SetInitialGoalPosition",
            "return": "void"
        },
        {
            "desc": "设置该单位的魔力值。",
            "func": "( float flMana )",
            "name": "SetMana",
            "return": "void"
        },
        {
            "desc": "Set the maximum mana of this unit.",
            "func": "( float flMaxMana )",
            "name": "SetMaxMana",
            "return": "void"
        },
        {
            "desc": "设置该单位的最高赏金。",
            "func": "( int iGoldBountyMax )",
            "name": "SetMaximumGoldBounty",
            "return": "void"
        },
        {
            "desc": "设置该单位的最低赏金。",
            "func": "( int iGoldBountyMin )",
            "name": "SetMinimumGoldBounty",
            "return": "void"
        },
        {
            "desc": "Setsthestackcountofagivenmodifier.",
            "func": "( string pszScriptName, handle hCaster, int nStackCount )",
            "name": "SetModifierStackCount",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iMoveCapabilities )",
            "name": "SetMoveCapability",
            "return": "void"
        },
        {
            "desc": "设置该单位是否要走访每个路径点。",
            "func": "( bool must )",
            "name": "SetMustReachEachGoalEntity",
            "return": "void"
        },
        {
            "desc": "如果设置为True，则不会将该单位移动到净空的地方。",
            "func": "( bool neverMoveToClearSpace )",
            "name": "SetNeverMoveToClearSpace",
            "return": "void"
        },
        {
            "desc": "设置基础夜间视野距离。",
            "func": "( int iRange )",
            "name": "SetNightTimeVisionRange",
            "return": "void"
        },
        {
            "desc": "设置单位位置。",
            "func": "( Vector vLocation )",
            "name": "SetOrigin",
            "return": "void"
        },
        {
            "desc": "设置单位原模型。",
            "func": "( string pszModelName )",
            "name": "SetOriginalModel",
            "return": "void"
        },
        {
            "desc": "设置基础护甲值。",
            "func": "( float flPhysicalArmorValue )",
            "name": "SetPhysicalArmorBaseValue",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string pProjectileName )",
            "name": "SetRangedProjectileName",
            "return": "void"
        },
        {
            "desc": "sets the client side map reveal radius for this unit",
            "func": "( float revealRadius )",
            "name": "SetRevealRadius",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bShouldVisuallyFly )",
            "name": "SetShouldDoFlyHeightVisual",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bStolenScepter )",
            "name": "SetStolenScepter",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( bool bCanRespawn )",
            "name": "SetUnitCanRespawn",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string pName )",
            "name": "SetUnitName",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "ShouldIdleAcquire",
            "return": "bool"
        },
        {
            "desc": "Speak a response system concept with the TLK_DOTA_CUSTOM concept.",
            "func": "( handle hCriteriaTable )",
            "name": "SpeakConcept",
            "return": "void"
        },
        {
            "desc": "消耗魔力，可以用在技能消耗或使用物品。",
            "func": "( float flManaSpent, handle hAbility )",
            "name": "SpendMana",
            "return": "void"
        },
        {
            "desc": "向单位添加给定的动作。",
            "func": "( int nActivity )",
            "name": "StartGesture",
            "return": "void"
        },
        {
            "desc": "Add the given gesture activity faded according to its sequence settings.",
            "func": "( int nActivity )",
            "name": "StartGestureFadeWithSequenceSettings",
            "return": "void"
        },
        {
            "desc": "Add the given gesture activity faded according to to the parameters.",
            "func": "( int nActivity, float fFadeIn, float fFadeOut )",
            "name": "StartGestureWithFade",
            "return": "void"
        },
        {
            "desc": "向单位添加给定的动作，带有自定义的动作速度。",
            "func": "( int nActivity, float flRate )",
            "name": "StartGestureWithPlaybackRate",
            "return": "void"
        },
        {
            "desc": "使该单位暂停当前动作。",
            "func": "()",
            "name": "Stop",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "StopFacing",
            "return": "void"
        },
        {
            "desc": "交换两个技能的字段，并设置其是否生效。",
            "func": "( string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2 )",
            "name": "SwapAbilities",
            "return": "void"
        },
        {
            "desc": "交换两个物品的位置。",
            "func": "( int nSlot1, int nSlot2 )",
            "name": "SwapItems",
            "return": "void"
        },
        {
            "desc": "隐藏物品",
            "func": "( handle hItem )",
            "name": "TakeItem",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "TimeUntilNextAttack",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "TriggerModifierDodge",
            "return": "bool"
        },
        {
            "desc": "判断传递的技能是否会触发该单位的技能吸收",
            "func": "( handle hAbility )",
            "name": "TriggerSpellAbsorb",
            "return": "bool"
        },
        {
            "desc": "触发类似于清莲宝珠一样的效果。",
            "func": "( handle hAbility )",
            "name": "TriggerSpellReflect",
            "return": "void"
        },
        {
            "desc": "Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot.",
            "func": "( string pszAbilityName, string pszReplacedAbilityName )",
            "name": "UnHideAbilityToSlot",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "UnitCanRespawn",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "WasKilledPassively",
            "return": "bool"
        }
    ],
    "CInfoData": [
        {
            "desc": "查询该键值颜色数据",
            "func": "( utlstringtoken tok, Vector vDefault )",
            "name": "QueryColor",
            "return": "Vector"
        },
        {
            "desc": "查询该键值浮点（float）数据",
            "func": "( utlstringtoken tok, float flDefault )",
            "name": "QueryFloat",
            "return": "float"
        },
        {
            "desc": "查询该键值整型（int）数据",
            "func": "( utlstringtoken tok, int nDefault )",
            "name": "QueryInt",
            "return": "int"
        },
        {
            "desc": "查询该键值数值数据",
            "func": "( utlstringtoken tok, float flDefault )",
            "name": "QueryNumber",
            "return": "float"
        },
        {
            "desc": "查询该键值字符串（string）数据",
            "func": "( utlstringtoken tok, string pDefault )",
            "name": "QueryString",
            "return": "string"
        },
        {
            "desc": "查询该键值矢量（vector）数据",
            "func": "( utlstringtoken tok, Vector vDefault )",
            "name": "QueryVector",
            "return": "Vector"
        }
    ],
    "CScriptParticleManager": [
        {
            "desc": "创建一个新的粒子特效",
            "func": "( string_1, int_2, handle_3 )",
            "name": "CreateParticle",
            "return": "int"
        },
        {
            "desc": "创建一个只对指定玩家播放的粒子特效",
            "func": "( string_1, int_2, handle_3, handle_4 )",
            "name": "CreateParticleForPlayer",
            "return": "int"
        },
        {
            "desc": "创建一个仅为某方队伍播放的粒子特效。",
            "func": "( string_1, int_2, handle_3, int_4 )",
            "name": "CreateParticleForTeam",
            "return": "int"
        },
        {
            "desc": "清除粒子。",
            "func": "( int_1, bool_2 )",
            "name": "DestroyParticle",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( string_1, handle_2 )",
            "name": "GetParticleReplacement",
            "return": "string"
        },
        {
            "desc": "施放指定粒子特效索引号",
            "func": "( int_1 )",
            "name": "ReleaseParticleIndex",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int_1 )",
            "name": "SetParticleAlwaysSimulate",
            "return": "void"
        },
        {
            "desc": "设置控制粒子特效的控制点数据",
            "func": "( int_1, int_2, Vector_3 )",
            "name": "SetParticleControl",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
            "name": "SetParticleControlEnt",
            "return": "void"
        },
        {
            "desc": "(int iIndex, int iPoint, Vector vecPosition)",
            "func": "( int_1, int_2, Vector_3 )",
            "name": "SetParticleControlFallback",
            "return": "void"
        },
        {
            "desc": "设置粒子的前进运动",
            "func": "( int_1, int_2, Vector_3 )",
            "name": "SetParticleControlForward",
            "return": "void"
        },
        {
            "desc": "设置粒子的三向运动。",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "name": "SetParticleControlOrientation",
            "return": "void"
        },
        {
            "desc": "(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
            "func": "( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
            "name": "SetParticleControlOrientationFLU",
            "return": "void"
        },
        {
            "desc": "int nfxindex, int nPoint, int nPoint2, float flRadius",
            "func": "( int_1, int_2, int_3, float_4 )",
            "name": "SetParticleFoWProperties",
            "return": "void"
        },
        {
            "desc": "int nfxindex, bool bCheckFoW",
            "func": "( int_1, bool_2 )",
            "name": "SetParticleShouldCheckFoW",
            "return": "bool"
        }
    ],
    "CDOTA_BaseNPC_NeutralItemStash": [],
    "CEntities": [
        {
            "desc": "用类名来创建一个实体",
            "func": "( string_1 )",
            "name": "CreateByClassname",
            "return": "handle"
        },
        {
            "desc": "通过类名来寻找所有实体.返回被找到实体的数组或表.",
            "func": "( string_1 )",
            "name": "FindAllByClassname",
            "return": "table"
        },
        {
            "desc": "在一个半径范围内通过类名寻找实体.",
            "func": "( string_1, Vector_2, float_3 )",
            "name": "FindAllByClassnameWithin",
            "return": "table"
        },
        {
            "desc": "通过模型名字来找到对象.",
            "func": "( string_1 )",
            "name": "FindAllByModel",
            "return": "table"
        },
        {
            "desc": "通过名字来寻找所有实体.返回被找到实体的数组或表.",
            "func": "( string_1 )",
            "name": "FindAllByName",
            "return": "table"
        },
        {
            "desc": "在半径范围内通过名字来寻找实体.",
            "func": "( string_1, Vector_2, float_3 )",
            "name": "FindAllByNameWithin",
            "return": "table"
        },
        {
            "desc": "通过目标名字来寻找实体",
            "func": "( string_1 )",
            "name": "FindAllByTarget",
            "return": "table"
        },
        {
            "desc": "在(球形)范围内寻找实体",
            "func": "( Vector_1, float_2 )",
            "name": "FindAllInSphere",
            "return": "table"
        },
        {
            "desc": "通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "name": "FindByClassname",
            "return": "handle"
        },
        {
            "desc": "在最近一个点通过类名寻找实体",
            "func": "( string_1, Vector_2, float_3 )",
            "name": "FindByClassnameNearest",
            "return": "handle"
        },
        {
            "desc": "在半径范围内通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "name": "FindByClassnameWithin",
            "return": "handle"
        },
        {
            "desc": "通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "name": "FindByModel",
            "return": "handle"
        },
        {
            "desc": "在半径范围内通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "name": "FindByModelWithin",
            "return": "handle"
        },
        {
            "desc": "通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "name": "FindByName",
            "return": "handle"
        },
        {
            "desc": "通过名字寻找最近原点的实体",
            "func": "( string_1, Vector_2, float_3 )",
            "name": "FindByNameNearest",
            "return": "handle"
        },
        {
            "desc": "在半径范围内通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2, Vector_3, float_4 )",
            "name": "FindByNameWithin",
            "return": "handle"
        },
        {
            "desc": "通过目标名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, string_2 )",
            "name": "FindByTarget",
            "return": "handle"
        },
        {
            "desc": "在半径范围内寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
            "func": "( handle_1, Vector_2, float_3 )",
            "name": "FindInSphere",
            "return": "handle"
        },
        {
            "desc": "在实体数组或表中开始一个迭代程序",
            "func": "()",
            "name": "First",
            "return": "handle"
        },
        {
            "desc": "Get the local player.",
            "func": "()",
            "name": "GetLocalPlayer",
            "return": "handle"
        },
        {
            "desc": "从指定列表中的实体开始迭代",
            "func": "( handle_1 )",
            "name": "Next",
            "return": "handle"
        }
    ],
    "CDOTA_BaseNPC_Shop": [
        {
            "desc": "Get the DOTA_SHOP_TYPE",
            "func": "()",
            "name": "GetShopType",
            "return": "int"
        },
        {
            "desc": "Set the DOTA_SHOP_TYPE.",
            "func": "( int eShopType )",
            "name": "SetShopType",
            "return": "void"
        }
    ],
    "SteamInfo": [
        {
            "desc": "Is the script connected to the public Steam universe",
            "func": "()",
            "name": "IsPublicUniverse",
            "return": "bool"
        }
    ],
    "CCustomGameEventManager": [
        {
            "desc": "(stringEventName,funcCallbackFunction)-监听指定自定义事件，注册一个回调函数，在指定事件触发时被调用。返回一个监听者ID用来在以后取消监听。",
            "func": "( string_1, handle_2 )",
            "name": "RegisterListener",
            "return": "int"
        },
        {
            "desc": "(stringEventName,tableEventData)",
            "func": "( string_1, handle_2 )",
            "name": "Send_ServerToAllClients",
            "return": "void"
        },
        {
            "desc": "(EntityPlayer,stringEventName,tableEventData)",
            "func": "( handle_1, string_2, handle_3 )",
            "name": "Send_ServerToPlayer",
            "return": "void"
        },
        {
            "desc": "(intTeamNumber,stringEventName,tableEventData)",
            "func": "( int_1, string_2, handle_3 )",
            "name": "Send_ServerToTeam",
            "return": "void"
        },
        {
            "desc": "(intListnerID)-对指定的监听者取消监听。",
            "func": "( int_1 )",
            "name": "UnregisterListener",
            "return": "void"
        }
    ],
    "CDOTABaseGameMode": [
        {
            "desc": "( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop.",
            "func": "( string pszItemName, string pszShopName, string pszCategory )",
            "name": "AddItemToCustomShop",
            "return": "void"
        },
        {
            "desc": "Begin tracking a sequence of events using the real time combat analyzer.",
            "func": "( handle hQueryTable, handle hPlayer, string pszQueryName )",
            "name": "AddRealTimeCombatAnalyzerQuery",
            "return": "int"
        },
        {
            "desc": "Allocates an entity which can be used by custom games to control FoW occlusion volumes",
            "func": "( float flMinX, float flMinY, float flMaxX, float flMaxY, float flGridSize )",
            "name": "AllocateFowBlockerRegion",
            "return": "handle"
        },
        {
            "desc": "Get if weather effects are disabled on the client.",
            "func": "()",
            "name": "AreWeatherEffectsDisabled",
            "return": "bool"
        },
        {
            "desc": "清除脚本过滤器--控制触发赏金符时的行为的",
            "func": "()",
            "name": "ClearBountyRunePickupFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制单位造成伤害",
            "func": "()",
            "name": "ClearDamageFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--在单位捡起物品时生效的",
            "func": "()",
            "name": "ClearExecuteOrderFilter",
            "return": "void"
        },
        {
            "desc": "Clear the script filter that controls how a unit heals.",
            "func": "()",
            "name": "ClearHealingFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--在物品放入物品栏时生效的",
            "func": "()",
            "name": "ClearItemAddedToInventoryFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制Modifier控制器的",
            "func": "()",
            "name": "ClearModifierGainedFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制单位的经验机制的",
            "func": "()",
            "name": "ClearModifyExperienceFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制英雄金钱机制的",
            "func": "()",
            "name": "ClearModifyGoldFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制神符刷新的",
            "func": "()",
            "name": "ClearRuneSpawnFilter",
            "return": "void"
        },
        {
            "desc": "清除脚本过滤器--控制追踪投射物的",
            "func": "()",
            "name": "ClearTrackingProjectileFilter",
            "return": "void"
        },
        {
            "desc": "Disable npc_dota_creature clumping behavior by default.",
            "func": "( bool bDisabled )",
            "name": "DisableClumpingBehaviorByDefault",
            "return": "void"
        },
        {
            "desc": "Use to disable hud flip for this mod",
            "func": "( bool bDisable )",
            "name": "DisableHudFlip",
            "return": "void"
        },
        {
            "desc": "返回是否不论任何单位被选中，始终在HUD上显示英雄的物品库存",
            "func": "()",
            "name": "GetAlwaysShowPlayerInventory",
            "return": "bool"
        },
        {
            "desc": "Get whether player names are always shown, regardless of client setting.",
            "func": "()",
            "name": "GetAlwaysShowPlayerNames",
            "return": "bool"
        },
        {
            "desc": "返回游戏内播音员是否被禁用",
            "func": "()",
            "name": "GetAnnouncerDisabled",
            "return": "bool"
        },
        {
            "desc": "返回是否设置摄像机距离Dota内的默认值为1134",
            "func": "()",
            "name": "GetCameraDistanceOverride",
            "return": "float"
        },
        {
            "desc": "Get current derived stat value constant.",
            "func": "( int nDerivedStatType, handle hHero )",
            "name": "GetCustomAttributeDerivedStatValue",
            "return": "float"
        },
        {
            "desc": "Get the current rate cooldown ticks down for items in the backpack.",
            "func": "()",
            "name": "GetCustomBackpackCooldownPercent",
            "return": "float"
        },
        {
            "desc": "Get the current custom backpack swap cooldown.",
            "func": "()",
            "name": "GetCustomBackpackSwapCooldown",
            "return": "float"
        },
        {
            "desc": "返回是否允许自定义的买活CD",
            "func": "()",
            "name": "GetCustomBuybackCooldownEnabled",
            "return": "bool"
        },
        {
            "desc": "返回是否允许自定义的买活金钱",
            "func": "()",
            "name": "GetCustomBuybackCostEnabled",
            "return": "bool"
        },
        {
            "desc": "Get the topbar score display value for dire.",
            "func": "()",
            "name": "GetCustomDireScore",
            "return": "int"
        },
        {
            "desc": "Get the current custom glyph cooldown.",
            "func": "()",
            "name": "GetCustomGlyphCooldown",
            "return": "float"
        },
        {
            "desc": "返回是否允许改变英雄的最高等级（默认25）",
            "func": "()",
            "name": "GetCustomHeroMaxLevel",
            "return": "int"
        },
        {
            "desc": "Get the topbar score display value for radiant.",
            "func": "()",
            "name": "GetCustomRadiantScore",
            "return": "int"
        },
        {
            "desc": "Get the current custom scan cooldown.",
            "func": "()",
            "name": "GetCustomScanCooldown",
            "return": "float"
        },
        {
            "desc": "Get the Game Seed passed from the GC.",
            "func": "()",
            "name": "GetEventGameSeed",
            "return": "int"
        },
        {
            "desc": "Get the Event Window Start Time passed from the GC.",
            "func": "()",
            "name": "GetEventWindowStartTime",
            "return": "unsigned"
        },
        {
            "desc": "返回是否返回固定的复活时间",
            "func": "()",
            "name": "GetFixedRespawnTime",
            "return": "float"
        },
        {
            "desc": "返回是否关闭/开启战争迷雾",
            "func": "()",
            "name": "GetFogOfWarDisabled",
            "return": "bool"
        },
        {
            "desc": "返回是否开启/关闭获得金钱时的音效",
            "func": "()",
            "name": "GetGoldSoundDisabled",
            "return": "bool"
        },
        {
            "desc": "Returns the HUD element visibility.",
            "func": "( int iElement )",
            "name": "GetHUDVisible",
            "return": "bool"
        },
        {
            "desc": "获取单位的最大攻击速度",
            "func": "()",
            "name": "GetMaximumAttackSpeed",
            "return": "int"
        },
        {
            "desc": "获取单位的最小攻击速度",
            "func": "()",
            "name": "GetMinimumAttackSpeed",
            "return": "int"
        },
        {
            "desc": "返回是否开启/关闭推荐出装在商店中的显示",
            "func": "()",
            "name": "GetRecommendedItemsDisabled",
            "return": "bool"
        },
        {
            "desc": "Returns the scale applied to non-fixed respawn times.",
            "func": "()",
            "name": "GetRespawnTimeScale",
            "return": "float"
        },
        {
            "desc": "返回是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
            "func": "()",
            "name": "GetStashPurchasingDisabled",
            "return": "bool"
        },
        {
            "desc": "返回是否隐藏快速购买处的物品",
            "func": "()",
            "name": "GetStickyItemDisabled",
            "return": "bool"
        },
        {
            "desc": "返回是否覆盖游戏界面顶部的队伍比分",
            "func": "()",
            "name": "GetTopBarTeamValuesOverride",
            "return": "bool"
        },
        {
            "desc": "返回是否关闭/开启游戏界面顶部的队伍比分",
            "func": "()",
            "name": "GetTopBarTeamValuesVisible",
            "return": "bool"
        },
        {
            "desc": "返回是否启用/禁用偷塔保护",
            "func": "()",
            "name": "GetTowerBackdoorProtectionEnabled",
            "return": "bool"
        },
        {
            "desc": "返回自定义经验机制是否被使用",
            "func": "()",
            "name": "GetUseCustomHeroLevels",
            "return": "bool"
        },
        {
            "desc": "返回是否启用/禁用买活",
            "func": "()",
            "name": "IsBuybackEnabled",
            "return": "bool"
        },
        {
            "desc": "Is the day/night cycle disabled?",
            "func": "()",
            "name": "IsDaynightCycleDisabled",
            "return": "bool"
        },
        {
            "desc": "Set function and context for real time combat analyzer query failed.",
            "func": "( handle hFunction, handle hContext )",
            "name": "ListenForQueryFailed",
            "return": "void"
        },
        {
            "desc": "Set function and context for real time combat analyzer query progress changed.",
            "func": "( handle hFunction, handle hContext )",
            "name": "ListenForQueryProgressChanged",
            "return": "void"
        },
        {
            "desc": "Set function and context for real time combat analyzer query succeeded.",
            "func": "( handle hFunction, handle hContext )",
            "name": "ListenForQuerySucceeded",
            "return": "void"
        },
        {
            "desc": "( pszItem, pszShop ) Remove an item to purchase at a custom shop.",
            "func": "( string pszItemName, string pszShopName )",
            "name": "RemoveItemFromCustomShop",
            "return": "void"
        },
        {
            "desc": "Stop tracking a combat analyzer query.",
            "func": "( int nQueryID )",
            "name": "RemoveRealTimeCombatAnalyzerQuery",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制技能所用到的调整值(修改数据table并返回True来使用新值，,返回False来使用旧值)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetAbilityTuningValueFilter",
            "return": "void"
        },
        {
            "desc": "If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped.",
            "func": "( bool bEnabled )",
            "name": "SetAllowNeutralItemDrops",
            "return": "void"
        },
        {
            "desc": "不论任何单位被选中，始终在HUD上显示英雄的物品库存",
            "func": "( bool bAlwaysShow )",
            "name": "SetAlwaysShowPlayerInventory",
            "return": "void"
        },
        {
            "desc": "Set whether player names are always shown, regardless of client setting.",
            "func": "( bool bEnabled )",
            "name": "SetAlwaysShowPlayerNames",
            "return": "void"
        },
        {
            "desc": "禁用播音员",
            "func": "( bool bDisabled )",
            "name": "SetAnnouncerDisabled",
            "return": "void"
        },
        {
            "desc": "允许/禁止机器人思考，需要与DotaPvP高度相似的三路线地图、商店等",
            "func": "( bool bEnabled )",
            "name": "SetBotThinkingEnabled",
            "return": "void"
        },
        {
            "desc": "设置Bot玩家是否总是跟从人类玩家进行推进",
            "func": "( bool bAlwaysPush )",
            "name": "SetBotsAlwaysPushWithHuman",
            "return": "void"
        },
        {
            "desc": "Setifbotsshouldenabletheirlategamebehavior.",
            "func": "( bool bLateGame )",
            "name": "SetBotsInLateGame",
            "return": "void"
        },
        {
            "desc": "设置Bot玩家将推进到哪一级别的防御塔（-1代表不推进）",
            "func": "( int nMaxTier )",
            "name": "SetBotsMaxPushTier",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制触发赏金符时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetBountyRunePickupFilter",
            "return": "void"
        },
        {
            "desc": "Set bounty rune spawn rate",
            "func": "( float flInterval )",
            "name": "SetBountyRuneSpawnInterval",
            "return": "void"
        },
        {
            "desc": "完全允许/禁止买活",
            "func": "( bool bEnabled )",
            "name": "SetBuybackEnabled",
            "return": "void"
        },
        {
            "desc": "设置默认的镜头距离Dota默认为1134",
            "func": "( float flCameraDistanceOverride )",
            "name": "SetCameraDistanceOverride",
            "return": "void"
        },
        {
            "desc": "Set a different camera smooth count; dota default is 8.",
            "func": "( int nSmoothCount )",
            "name": "SetCameraSmoothCountOverride",
            "return": "void"
        },
        {
            "desc": "Sets the camera Z range",
            "func": "( float flMinZ, float flMaxZ )",
            "name": "SetCameraZRange",
            "return": "void"
        },
        {
            "desc": "Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue.",
            "func": "( int nStatType, float flNewValue )",
            "name": "SetCustomAttributeDerivedStatValue",
            "return": "void"
        },
        {
            "desc": "Set the rate cooldown ticks down for items in the backpack.",
            "func": "( float flPercent )",
            "name": "SetCustomBackpackCooldownPercent",
            "return": "void"
        },
        {
            "desc": "Set a custom cooldown for swapping items into the backpack.",
            "func": "( float flCooldown )",
            "name": "SetCustomBackpackSwapCooldown",
            "return": "void"
        },
        {
            "desc": "开启该选项来允许自定义买活冷却时间",
            "func": "( bool bEnabled )",
            "name": "SetCustomBuybackCooldownEnabled",
            "return": "void"
        },
        {
            "desc": "开启该选项来允许自定义买活花费",
            "func": "( bool bEnabled )",
            "name": "SetCustomBuybackCostEnabled",
            "return": "void"
        },
        {
            "desc": "Sets the topbar score display value for dire.",
            "func": "( int nScore )",
            "name": "SetCustomDireScore",
            "return": "void"
        },
        {
            "desc": "强制单人游戏英雄的选择",
            "func": "( string pHeroName )",
            "name": "SetCustomGameForceHero",
            "return": "void"
        },
        {
            "desc": "Set a custom cooldown for team Glyph ability.",
            "func": "( float flCooldown )",
            "name": "SetCustomGlyphCooldown",
            "return": "void"
        },
        {
            "desc": "定义最大英雄等级（默认为25）",
            "func": "( int_1 )",
            "name": "SetCustomHeroMaxLevel",
            "return": "void"
        },
        {
            "desc": "Sets the topbar score display value for radiant.",
            "func": "( int nScore )",
            "name": "SetCustomRadiantScore",
            "return": "void"
        },
        {
            "desc": "Set a custom cooldown for team Scan ability.",
            "func": "( float flCooldown )",
            "name": "SetCustomScanCooldown",
            "return": "void"
        },
        {
            "desc": "Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode.",
            "func": "( string pszEffectName )",
            "name": "SetCustomTerrainWeatherEffect",
            "return": "void"
        },
        {
            "desc": "定义英雄经验值表(table)",
            "func": "( handle hTable )",
            "name": "SetCustomXPRequiredToReachNextLevel",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制单位受到伤害时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetDamageFilter",
            "return": "void"
        },
        {
            "desc": "Enable or disable the day/night cycle.",
            "func": "( bool bDisable )",
            "name": "SetDaynightCycleDisabled",
            "return": "void"
        },
        {
            "desc": "Specify whether the full screen death overlay effect plays when the selected hero dies.",
            "func": "( bool bDisabled )",
            "name": "SetDeathOverlayDisabled",
            "return": "void"
        },
        {
            "desc": "Sets the default sticky item in the quickbuy",
            "func": "( string pItem )",
            "name": "SetDefaultStickyItem",
            "return": "void"
        },
        {
            "desc": "Set drafting hero banning time",
            "func": "( float flValue )",
            "name": "SetDraftingBanningTimeOverride",
            "return": "void"
        },
        {
            "desc": "Set drafting hero pick time",
            "func": "( float flValue )",
            "name": "SetDraftingHeroPickSelectTimeOverride",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制单位捡起物品时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetExecuteOrderFilter",
            "return": "void"
        },
        {
            "desc": "Setsthedotarespawntime.-1fordefaultbehavior",
            "func": "( float flFixedRespawnTime )",
            "name": "SetFixedRespawnTime",
            "return": "void"
        },
        {
            "desc": "开关战争迷雾",
            "func": "( bool bDisabled )",
            "name": "SetFogOfWarDisabled",
            "return": "void"
        },
        {
            "desc": "Prevent users from using the right click deny setting.",
            "func": "( bool bDisabled )",
            "name": "SetForceRightClickAttackDisabled",
            "return": "void"
        },
        {
            "desc": "设定泉水给予的固定魔法的恢复速率(默认为-1)",
            "func": "( float flConstantManaRegen )",
            "name": "SetFountainConstantManaRegen",
            "return": "void"
        },
        {
            "desc": "设定泉水给予的的百分比生命恢复速率(默认为-1)",
            "func": "( float flPercentageHealthRegen )",
            "name": "SetFountainPercentageHealthRegen",
            "return": "void"
        },
        {
            "desc": "设定泉水给予的百分比魔法恢复速率(默认为-1)",
            "func": "( float flPercentageManaRegen )",
            "name": "SetFountainPercentageManaRegen",
            "return": "void"
        },
        {
            "desc": "If set to true, enable 7.23 free courier mode.",
            "func": "( bool bEnabled )",
            "name": "SetFreeCourierModeEnabled",
            "return": "void"
        },
        {
            "desc": "Allows clicks on friendly buildings to be handled normally.",
            "func": "( bool bEnabled )",
            "name": "SetFriendlyBuildingMoveToEnabled",
            "return": "void"
        },
        {
            "desc": "是否禁止获取金钱时的声音提示",
            "func": "( bool bDisabled )",
            "name": "SetGoldSoundDisabled",
            "return": "void"
        },
        {
            "desc": "设置HUD元素是否可见",
            "func": "( int iHUDElement, bool bVisible )",
            "name": "SetHUDVisible",
            "return": "void"
        },
        {
            "desc": "Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetHealingFilter",
            "return": "void"
        },
        {
            "desc": "Specify whether the default combat events will show in the HUD.",
            "func": "( bool bDisabled )",
            "name": "SetHudCombatEventsDisabled",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制物品被放入物品栏时的行为。",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetItemAddedToInventoryFilter",
            "return": "void"
        },
        {
            "desc": "Set whether tombstones can be channeled to be removed by enemy heroes.",
            "func": "( bool bEnabled )",
            "name": "SetKillableTombstones",
            "return": "void"
        },
        {
            "desc": "Mutes the in-game killing spree announcer.",
            "func": "( bool bDisabled )",
            "name": "SetKillingSpreeAnnouncerDisabled",
            "return": "void"
        },
        {
            "desc": "设置禁用死亡时损失金钱",
            "func": "( bool bEnabled )",
            "name": "SetLoseGoldOnDeath",
            "return": "void"
        },
        {
            "desc": "设置单位的最大攻击速度",
            "func": "( int nMaxSpeed )",
            "name": "SetMaximumAttackSpeed",
            "return": "void"
        },
        {
            "desc": "设置单位的最小攻击速度",
            "func": "( int nMinSpeed )",
            "name": "SetMinimumAttackSpeed",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制Modifier的获得,返回Flase来删除Modifier",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetModifierGainedFilter",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制英雄经验值被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetModifyExperienceFilter",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制英雄的金钱被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetModifyGoldFilter",
            "return": "void"
        },
        {
            "desc": "When enabled, undiscovered items in the neutral item stash are hidden.",
            "func": "( bool bEnable )",
            "name": "SetNeutralItemHideUndiscoveredEnabled",
            "return": "void"
        },
        {
            "desc": "Allow items to be sent to the neutral stash.",
            "func": "( bool bEnable )",
            "name": "SetNeutralStashEnabled",
            "return": "void"
        },
        {
            "desc": "When enabled, the all neutral items tab cannot be viewed.",
            "func": "( bool bEnable )",
            "name": "SetNeutralStashTeamViewOnlyEnabled",
            "return": "void"
        },
        {
            "desc": "覆盖默认选择实体，替代所有玩家的英雄",
            "func": "( handle hOverrideEntity )",
            "name": "SetOverrideSelectionEntity",
            "return": "void"
        },
        {
            "desc": "Set pausing enabled/disabled",
            "func": "( bool bEnabled )",
            "name": "SetPauseEnabled",
            "return": "void"
        },
        {
            "desc": "Set power rune spawn rate",
            "func": "( float flInterval )",
            "name": "SetPowerRuneSpawnInterval",
            "return": "void"
        },
        {
            "desc": "Disables bonus items for randoming a hero.",
            "func": "( bool bDisabled )",
            "name": "SetRandomHeroBonusItemGrantDisabled",
            "return": "void"
        },
        {
            "desc": "是否禁止显示商店中的推荐购买物品",
            "func": "( bool bDisabled )",
            "name": "SetRecommendedItemsDisabled",
            "return": "void"
        },
        {
            "desc": "使幻象死亡时立即消失，而不是延迟数秒",
            "func": "( bool bRemove )",
            "name": "SetRemoveIllusionsOnDeath",
            "return": "void"
        },
        {
            "desc": "Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations.",
            "func": "( float flValue )",
            "name": "SetRespawnTimeScale",
            "return": "void"
        },
        {
            "desc": "设定某种神符是否启用",
            "func": "( int nRune, bool bEnabled )",
            "name": "SetRuneEnabled",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetRuneSpawnFilter",
            "return": "void"
        },
        {
            "desc": "Enable/disable gold penalty for late picking.",
            "func": "( bool bEnabled )",
            "name": "SetSelectionGoldPenaltyEnabled",
            "return": "void"
        },
        {
            "desc": "Allow items to be sent to the stash.",
            "func": "( bool bEnable )",
            "name": "SetSendToStashEnabled",
            "return": "void"
        },
        {
            "desc": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
            "func": "( bool bDisabled )",
            "name": "SetStashPurchasingDisabled",
            "return": "void"
        },
        {
            "desc": "隐藏快速购买处的物品",
            "func": "( bool bDisabled )",
            "name": "SetStickyItemDisabled",
            "return": "void"
        },
        {
            "desc": "Sets the item which goes in the TP scroll slot",
            "func": "( string pItemName )",
            "name": "SetTPScrollSlotItemOverride",
            "return": "void"
        },
        {
            "desc": "设置顶端的队伍数值",
            "func": "( int iTeam, int nValue )",
            "name": "SetTopBarTeamValue",
            "return": "void"
        },
        {
            "desc": "是否覆盖顶端的队伍数值",
            "func": "( bool bOverride )",
            "name": "SetTopBarTeamValuesOverride",
            "return": "void"
        },
        {
            "desc": "开关顶端的队伍数值",
            "func": "( bool bVisible )",
            "name": "SetTopBarTeamValuesVisible",
            "return": "void"
        },
        {
            "desc": "开关偷塔保护",
            "func": "( bool bEnabled )",
            "name": "SetTowerBackdoorProtectionEnabled",
            "return": "void"
        },
        {
            "desc": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)",
            "func": "( handle hFunction, handle hContext )",
            "name": "SetTrackingProjectileFilter",
            "return": "void"
        },
        {
            "desc": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖",
            "func": "( bool bEnabled )",
            "name": "SetUnseenFogOfWarEnabled",
            "return": "void"
        },
        {
            "desc": "开关自定义英雄英雄经验表，该表必须提前被定义",
            "func": "( bool bEnabled )",
            "name": "SetUseCustomHeroLevels",
            "return": "void"
        },
        {
            "desc": "If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals.",
            "func": "( bool bEnabled )",
            "name": "SetUseDefaultDOTARuneSpawnLogic",
            "return": "void"
        },
        {
            "desc": "Set if weather effects are disabled.",
            "func": "( bool bDisable )",
            "name": "SetWeatherEffectsDisabled",
            "return": "void"
        }
    ],
    "CDOTA_Modifier_Lua": [
        {
            "desc": "幻象是否继承这个Mordifier",
            "func": "()",
            "name": "AllowIllusionDuplicate",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "CanParentBeAutoAttacked",
            "return": "bool"
        },
        {
            "desc": "Buff是否会在Mordifier到期时被移除",
            "func": "()",
            "name": "DestroyOnExpire",
            "return": "bool"
        },
        {
            "desc": "返回被应用到Mordifier上的属性类别",
            "func": "()",
            "name": "GetAttributes",
            "return": "int"
        },
        {
            "desc": "Returns aura stickiness",
            "func": "()",
            "name": "GetAuraDuration",
            "return": "float"
        },
        {
            "desc": "返回实体是否在某些条件下获得光环",
            "func": "( handle hEntity )",
            "name": "GetAuraEntityReject",
            "return": "bool"
        },
        {
            "desc": "返回光环半径",
            "func": "()",
            "name": "GetAuraRadius",
            "return": "int"
        },
        {
            "desc": "返回光环施加效果时的Flag",
            "func": "()",
            "name": "GetAuraSearchFlags",
            "return": "int"
        },
        {
            "desc": "返回光环效果将施加的队伍",
            "func": "()",
            "name": "GetAuraSearchTeam",
            "return": "int"
        },
        {
            "desc": "返回光环效果将施加的单位类型",
            "func": "()",
            "name": "GetAuraSearchType",
            "return": "int"
        },
        {
            "desc": "通过GetEffectName获取将添加的粒子特效类型",
            "func": "()",
            "name": "GetEffectAttachType",
            "return": "int"
        },
        {
            "desc": "返回Mordifier运行时所产生的粒子特效的名称",
            "func": "()",
            "name": "GetEffectName",
            "return": "string"
        },
        {
            "desc": "返回Mordifier运行时所产生的英雄粒子特效的名称",
            "func": "()",
            "name": "GetHeroEffectName",
            "return": "string"
        },
        {
            "desc": "返回这个Mordifier将施加的二级Mordifier名称(如果一级Mordifier是光环)",
            "func": "()",
            "name": "GetModifierAura",
            "return": "string"
        },
        {
            "desc": "Return the priority order this modifier will be applied over others.",
            "func": "()",
            "name": "GetPriority",
            "return": "int"
        },
        {
            "desc": "返回Mordifier运行时所产生的状态粒子特效的名称",
            "func": "()",
            "name": "GetStatusEffectName",
            "return": "string"
        },
        {
            "desc": "返回Mordifier的图标",
            "func": "()",
            "name": "GetTexture",
            "return": "string"
        },
        {
            "desc": "英雄特效的显示优先级(更高的数字在Buff栏中被优先显示)",
            "func": "()",
            "name": "HeroEffectPriority",
            "return": "int"
        },
        {
            "desc": "这个Mordifier是否是光环",
            "func": "()",
            "name": "IsAura",
            "return": "bool"
        },
        {
            "desc": "返回携带单位死后其光环是否有效",
            "func": "()",
            "name": "IsAuraActiveOnDeath",
            "return": "bool"
        },
        {
            "desc": "返回这个Mordifier是否是Debuff",
            "func": "()",
            "name": "IsDebuff",
            "return": "bool"
        },
        {
            "desc": "返回这个Mordifier是否在状态栏中显示",
            "func": "()",
            "name": "IsHidden",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "IsPermanent",
            "return": "bool"
        },
        {
            "desc": "返回这个Mordifier是否能被清除",
            "func": "()",
            "name": "IsPurgable",
            "return": "bool"
        },
        {
            "desc": "返回这个Mordifier是否能被强力驱散清除",
            "func": "()",
            "name": "IsPurgeException",
            "return": "bool"
        },
        {
            "desc": "返回这个Mordifier是否是眩晕类Debuff",
            "func": "()",
            "name": "IsStunDebuff",
            "return": "bool"
        },
        {
            "desc": "在Mordifier被创建时运行",
            "func": "( handle table )",
            "name": "OnCreated",
            "return": "void"
        },
        {
            "desc": "在Mordifier清楚时运行",
            "func": "()",
            "name": "OnDestroy",
            "return": "void"
        },
        {
            "desc": "当计时器间隔开始时",
            "func": "()",
            "name": "OnIntervalThink",
            "return": "void"
        },
        {
            "desc": "当Mordifier被刷新时运行",
            "func": "( handle table )",
            "name": "OnRefresh",
            "return": "void"
        },
        {
            "desc": "Runs when the modifier is destroyed (before unit loses modifier).",
            "func": "()",
            "name": "OnRemoved",
            "return": "void"
        },
        {
            "desc": "Runs when stack count changes (param is old count).",
            "func": "( int iStackCount )",
            "name": "OnStackCountChanged",
            "return": "void"
        },
        {
            "desc": "返回持有者死亡时Mordifier是否被移除",
            "func": "()",
            "name": "RemoveOnDeath",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "( bool bHasCustomData )",
            "name": "SetHasCustomTransmitterData",
            "return": "void"
        },
        {
            "desc": "Apply the overhead offset to the attached effect.",
            "func": "()",
            "name": "ShouldUseOverheadOffset",
            "return": "bool"
        },
        {
            "desc": "状态特效的显示优先级(更高的数字在Buff栏中被优先显示)",
            "func": "()",
            "name": "StatusEffectPriority",
            "return": "int"
        }
    ],
    "CDotaSubquestBase": [
        {
            "desc": "完成子任务",
            "func": "()",
            "name": "CompleteSubquest",
            "return": "void"
        },
        {
            "desc": "设置该任务的文本取代字符串",
            "func": "( string pszString )",
            "name": "SetTextReplaceString",
            "return": "void"
        },
        {
            "desc": "设置任务数值",
            "func": "( int valueSlot, int value )",
            "name": "SetTextReplaceValue",
            "return": "void"
        }
    ],
    "CBaseEntity": [
        {
            "desc": "AddEffects( int ): Adds the render effect flag.",
            "func": "( int nFlags )",
            "name": "AddEffects",
            "return": "void"
        },
        {
            "desc": "添加一个速度冲击",
            "func": "( Vector vecImpulse )",
            "name": "ApplyAbsVelocityImpulse",
            "return": "void"
        },
        {
            "desc": "添加一个角速度的冲击",
            "func": "( Vector angImpulse )",
            "name": "ApplyLocalAngularVelocityImpulse",
            "return": "void"
        },
        {
            "desc": "Get float value for an entity attribute.",
            "func": "( string pName, float flDefault )",
            "name": "Attribute_GetFloatValue",
            "return": "float"
        },
        {
            "desc": "Get int value for an entity attribute.",
            "func": "( string pName, int nDefault )",
            "name": "Attribute_GetIntValue",
            "return": "int"
        },
        {
            "desc": "Set float value for an entity attribute.",
            "func": "( string pName, float flValue )",
            "name": "Attribute_SetFloatValue",
            "return": "void"
        },
        {
            "desc": "Set int value for an entity attribute.",
            "func": "( string pName, int nValue )",
            "name": "Attribute_SetIntValue",
            "return": "void"
        },
        {
            "desc": "Delete an entity attribute.",
            "func": "( string pName )",
            "name": "DeleteAttribute",
            "return": "void"
        },
        {
            "desc": "Plays a sound from this entity.",
            "func": "( string soundname )",
            "name": "EmitSound",
            "return": "void"
        },
        {
            "desc": "播放/修改这个实体的声音.当音调,音量或播放时间大于零时改变声音",
            "func": "( string soundname, int nPitch, float flVolume, float flDelay )",
            "name": "EmitSoundParams",
            "return": "void"
        },
        {
            "desc": "获得这个实体的视角qangles",
            "func": "()",
            "name": "EyeAngles",
            "return": "QAngle"
        },
        {
            "desc": "获得指向视角位置的矢量,位置为绝对坐标",
            "func": "()",
            "name": "EyePosition",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "FirstMoveChild",
            "return": "handle"
        },
        {
            "desc": "hEntity to follow, bool bBoneMerge",
            "func": "( handle hEnt, bool bBoneMerge )",
            "name": "FollowEntity",
            "return": "void"
        },
        {
            "desc": "返回一个表包含用在这个实体的判定的标准.这个表等同于传入脚本方法的调用.",
            "func": "( handle hResult )",
            "name": "GatherCriteria",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbsOrigin",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAbsScale",
            "return": "float"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetAngles",
            "return": "QAngle"
        },
        {
            "desc": "获得实体的颠簸,偏航,摇晃的矢量",
            "func": "()",
            "name": "GetAnglesAsVector",
            "return": "Vector"
        },
        {
            "desc": "获得当前角速度,返回颠簸,偏航,摇晃的矢量",
            "func": "()",
            "name": "GetAngularVelocity",
            "return": "Vector"
        },
        {
            "desc": "获得基础速度",
            "func": "()",
            "name": "GetBaseVelocity",
            "return": "Vector"
        },
        {
            "desc": "获得一个包含最大范围,以物体为中心的矢量",
            "func": "()",
            "name": "GetBoundingMaxs",
            "return": "Vector"
        },
        {
            "desc": "获得一个包含最小范围,以物体为中心的矢量",
            "func": "()",
            "name": "GetBoundingMins",
            "return": "Vector"
        },
        {
            "desc": "获得一个以物体为中心,包含“Mins”和“Maxs”矢量的表",
            "func": "()",
            "name": "GetBounds",
            "return": "table"
        },
        {
            "desc": "获得指向物体中心的矢量,以绝对坐标的形式",
            "func": "()",
            "name": "GetCenter",
            "return": "Vector"
        },
        {
            "desc": "获得继承这个实体的实体",
            "func": "()",
            "name": "GetChildren",
            "return": "handle"
        },
        {
            "desc": "GetContext(name):检查一个对象的状态然后返回对象是否可用.可能返回string,float,或nil(如果对象没有找到)",
            "func": "( string name )",
            "name": "GetContext",
            "return": "table"
        },
        {
            "desc": "获得这个实体的前进矢量",
            "func": "()",
            "name": "GetForwardVector",
            "return": "Vector"
        },
        {
            "desc": "Get the health of this entity.",
            "func": "()",
            "name": "GetHealth",
            "return": "int"
        },
        {
            "desc": "Get entity local pitch, yaw, roll as a QAngle",
            "func": "()",
            "name": "GetLocalAngles",
            "return": "QAngle"
        },
        {
            "desc": "可能为当前角速度",
            "func": "()",
            "name": "GetLocalAngularVelocity",
            "return": "QAngle"
        },
        {
            "desc": "Get entity local origin as a Vector",
            "func": "()",
            "name": "GetLocalOrigin",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetLocalScale",
            "return": "float"
        },
        {
            "desc": "获得实体相对速度",
            "func": "()",
            "name": "GetLocalVelocity",
            "return": "Vector"
        },
        {
            "desc": "Get the mass of an entity. (returns 0 if it doesn't have a physics object)",
            "func": "()",
            "name": "GetMass",
            "return": "float"
        },
        {
            "desc": "Get the maximum health of this entity.",
            "func": "()",
            "name": "GetMaxHealth",
            "return": "int"
        },
        {
            "desc": "获得模型的名字",
            "func": "()",
            "name": "GetModelName",
            "return": "string"
        },
        {
            "desc": "如果在有继承对象,恢复实体所继承的对象",
            "func": "()",
            "name": "GetMoveParent",
            "return": "handle"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetOrigin",
            "return": "Vector"
        },
        {
            "desc": "获得实体的所有者",
            "func": "()",
            "name": "GetOwner",
            "return": "handle"
        },
        {
            "desc": "获得拥有者的实体,如果有的话",
            "func": "()",
            "name": "GetOwnerEntity",
            "return": "handle"
        },
        {
            "desc": "获得实体的右方矢量",
            "func": "()",
            "name": "GetRightVector",
            "return": "Vector"
        },
        {
            "desc": "如果在继承关系里,在继承关系中寻找所继承的根源对象",
            "func": "()",
            "name": "GetRootMoveParent",
            "return": "handle"
        },
        {
            "desc": "返回声音的播放时间.传入声音名字和可选的应用模型名字.",
            "func": "( string soundname, string actormodel )",
            "name": "GetSoundDuration",
            "return": "float"
        },
        {
            "desc": "Returns the spawn group handle of this entity",
            "func": "()",
            "name": "GetSpawnGroupHandle",
            "return": "int"
        },
        {
            "desc": "Get the team number of this entity.",
            "func": "()",
            "name": "GetTeam",
            "return": "int"
        },
        {
            "desc": "Get the team number of this entity.",
            "func": "()",
            "name": "GetTeamNumber",
            "return": "int"
        },
        {
            "desc": "获得实体的上方矢量",
            "func": "()",
            "name": "GetUpVector",
            "return": "Vector"
        },
        {
            "desc": "",
            "func": "()",
            "name": "GetVelocity",
            "return": "Vector"
        },
        {
            "desc": "See if an entity has a particular attribute.",
            "func": "( string pName )",
            "name": "HasAttribute",
            "return": "bool"
        },
        {
            "desc": ".",
            "func": "()",
            "name": "IsAlive",
            "return": "bool"
        },
        {
            "desc": "Is this entity an CAI_BaseNPC?",
            "func": "()",
            "name": "IsNPC",
            "return": "bool"
        },
        {
            "desc": "是否为玩家的实体",
            "func": "()",
            "name": "IsPlayer",
            "return": "bool"
        },
        {
            "desc": "",
            "func": "()",
            "name": "Kill",
            "return": "void"
        },
        {
            "desc": "",
            "func": "()",
            "name": "NextMovePeer",
            "return": "handle"
        },
        {
            "desc": "暂时重设阻力的持续时间和值",
            "func": "( float duration, float friction )",
            "name": "OverrideFriction",
            "return": "void"
        },
        {
            "desc": "预载声音文件",
            "func": "( string soundname )",
            "name": "PrecacheScriptSound",
            "return": "void"
        },
        {
            "desc": "RemoveEffects( int ): Removes the render effect flag.",
            "func": "( int nFlags )",
            "name": "RemoveEffects",
            "return": "void"
        },
        {
            "desc": "Set entity pitch, yaw, roll by component.",
            "func": "( float fPitch, float fYaw, float fRoll )",
            "name": "SetAbsAngles",
            "return": "void"
        },
        {
            "desc": "设置绝对来源",
            "func": "( Vector origin )",
            "name": "SetAbsOrigin",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flScale )",
            "name": "SetAbsScale",
            "return": "void"
        },
        {
            "desc": "设置实体的颠簸,偏航,摇晃",
            "func": "( float fPitch, float fYaw, float fRoll )",
            "name": "SetAngles",
            "return": "void"
        },
        {
            "desc": "设置当前角速度,使用实数颠簸,偏航,摇晃速度",
            "func": "( float pitchVel, float yawVel, float rollVel )",
            "name": "SetAngularVelocity",
            "return": "void"
        },
        {
            "desc": "Set the position of the constraint.",
            "func": "( Vector vPos )",
            "name": "SetConstraint",
            "return": "void"
        },
        {
            "desc": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个字符串.持续一段时间.(0代表永久)",
            "func": "( string pName, string pValue, float duration )",
            "name": "SetContext",
            "return": "void"
        },
        {
            "desc": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个数字(int或者float).持续一段时间.(0代表永久)",
            "func": "( string pName, float fValue, float duration )",
            "name": "SetContextNum",
            "return": "void"
        },
        {
            "desc": "在这个实体上设置一个计时器（a:标示字符,b:执行函数c:延迟执行的时间）",
            "func": "( string pszContextName, handle hThinkFunc, float flInterval )",
            "name": "SetContextThink",
            "return": "void"
        },
        {
            "desc": "Set the name of an entity.",
            "func": "( string pName )",
            "name": "SetEntityName",
            "return": "void"
        },
        {
            "desc": "设置实体的方向为前进矢量",
            "func": "( Vector v )",
            "name": "SetForwardVector",
            "return": "void"
        },
        {
            "desc": "设置玩家阻力,无视物体",
            "func": "( float flFriction )",
            "name": "SetFriction",
            "return": "void"
        },
        {
            "desc": "设置玩家引力,无视物体",
            "func": "( float flGravity )",
            "name": "SetGravity",
            "return": "void"
        },
        {
            "desc": "Set the health of this entity.",
            "func": "( int nHealth )",
            "name": "SetHealth",
            "return": "void"
        },
        {
            "desc": "Set entity local pitch, yaw, roll by component",
            "func": "( float fPitch, float fYaw, float fRoll )",
            "name": "SetLocalAngles",
            "return": "void"
        },
        {
            "desc": "Set entity local origin from a Vector",
            "func": "( Vector origin )",
            "name": "SetLocalOrigin",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( float flScale )",
            "name": "SetLocalScale",
            "return": "void"
        },
        {
            "desc": "Set the mass of an entity. (does nothing if it doesn't have a physics object)",
            "func": "( float flMass )",
            "name": "SetMass",
            "return": "void"
        },
        {
            "desc": "Set the maximum health of this entity.",
            "func": "( int amt )",
            "name": "SetMaxHealth",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector v )",
            "name": "SetOrigin",
            "return": "void"
        },
        {
            "desc": "设定实体的所有者",
            "func": "( handle pOwner )",
            "name": "SetOwner",
            "return": "void"
        },
        {
            "desc": "设定这个实体的所继承的父实体",
            "func": "( handle hParent, string pAttachmentname )",
            "name": "SetParent",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( int iTeamNum )",
            "name": "SetTeam",
            "return": "void"
        },
        {
            "desc": "",
            "func": "( Vector vecVelocity )",
            "name": "SetVelocity",
            "return": "void"
        },
        {
            "desc": "停止播放这个实体的特定的声音",
            "func": "( string soundname )",
            "name": "StopSound",
            "return": "void"
        },
        {
            "desc": "Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object.",
            "func": "( handle hInfo )",
            "name": "TakeDamage",
            "return": "int"
        },
        {
            "desc": "Returns the input Vector transformed from entity to world space",
            "func": "( Vector vPoint )",
            "name": "TransformPointEntityToWorld",
            "return": "Vector"
        },
        {
            "desc": "Returns the input Vector transformed from world to entity space",
            "func": "( Vector vPoint )",
            "name": "TransformPointWorldToEntity",
            "return": "Vector"
        },
        {
            "desc": "触发这个实体的触发器",
            "func": "()",
            "name": "Trigger",
            "return": "void"
        },
        {
            "desc": "Validates the private script scope and creates it if one doesn't exist.",
            "func": "()",
            "name": "ValidatePrivateScriptScope",
            "return": "void"
        }
    ],
    "CDOTATutorial": [
        {
            "desc": "Add a computer controlled bot.",
            "func": "( string_1, string_2, string_3, bool_4 )",
            "name": "AddBot",
            "return": "bool"
        },
        {
            "desc": "Add a quest to the quest log",
            "func": "( string_1, int_2, string_3, string_4 )",
            "name": "AddQuest",
            "return": "void"
        },
        {
            "desc": "Add an item to the shop whitelist.",
            "func": "( string_1 )",
            "name": "AddShopWhitelistItem",
            "return": "void"
        },
        {
            "desc": "Complete a quest,",
            "func": "( string_1 )",
            "name": "CompleteQuest",
            "return": "void"
        },
        {
            "desc": "Add a task to move to a specific location",
            "func": "( Vector_1 )",
            "name": "CreateLocationTask",
            "return": "void"
        },
        {
            "desc": "Alert the player when a creep becomes agro to their hero.",
            "func": "( bool_1 )",
            "name": "EnableCreepAggroViz",
            "return": "void"
        },
        {
            "desc": "Enable the tip to alert players how to find their hero.",
            "func": "( bool_1 )",
            "name": "EnablePlayerOffscreenTip",
            "return": "void"
        },
        {
            "desc": "Alert the player when a tower becomes agro to their hero.",
            "func": "( bool_1 )",
            "name": "EnableTowerAggroViz",
            "return": "void"
        },
        {
            "desc": "End the tutorial.",
            "func": "()",
            "name": "FinishTutorial",
            "return": "void"
        },
        {
            "desc": "Force the start of the game.",
            "func": "()",
            "name": "ForceGameStart",
            "return": "void"
        },
        {
            "desc": "Is our time frozen?",
            "func": "()",
            "name": "GetTimeFrozen",
            "return": "bool"
        },
        {
            "desc": "Is this item currently in the white list.",
            "func": "( string_1 )",
            "name": "IsItemInWhiteList",
            "return": "bool"
        },
        {
            "desc": "Remove an item from the shop whitelist.",
            "func": "( string_1 )",
            "name": "RemoveShopWhitelistItem",
            "return": "void"
        },
        {
            "desc": "Select a hero for the local player",
            "func": "( string_1 )",
            "name": "SelectHero",
            "return": "void"
        },
        {
            "desc": "Select the team for the local player",
            "func": "( string_1 )",
            "name": "SelectPlayerTeam",
            "return": "void"
        },
        {
            "desc": "Set the current item guide.",
            "func": "( string_1 )",
            "name": "SetItemGuide",
            "return": "void"
        },
        {
            "desc": "Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify",
            "func": "( int_1, bool_2 )",
            "name": "SetOrModifyPlayerGold",
            "return": "void"
        },
        {
            "desc": "Set players quick buy item.",
            "func": "( string_1 )",
            "name": "SetQuickBuy",
            "return": "void"
        },
        {
            "desc": "Set the shop open or closed.",
            "func": "( bool_1 )",
            "name": "SetShopOpen",
            "return": "void"
        },
        {
            "desc": "Set if we should freeze time or not.",
            "func": "( bool_1 )",
            "name": "SetTimeFrozen",
            "return": "void"
        },
        {
            "desc": "Set a tutorial convar",
            "func": "( string_1, string_2 )",
            "name": "SetTutorialConvar",
            "return": "void"
        },
        {
            "desc": "Set the UI to use a reduced version to focus attention to specific elements.",
            "func": "( int_1 )",
            "name": "SetTutorialUI",
            "return": "void"
        },
        {
            "desc": "Set if we should whitelist shop items.",
            "func": "( bool_1 )",
            "name": "SetWhiteListEnabled",
            "return": "void"
        },
        {
            "desc": "Initialize Tutorial Mode",
            "func": "()",
            "name": "StartTutorialMode",
            "return": "void"
        },
        {
            "desc": "Upgrade a specific ability for the local hero",
            "func": "( string_1 )",
            "name": "UpgradePlayerAbility",
            "return": "void"
        }
    ]
}