{
  "CDOTA_Ability_Nian_Roar":[{
      "desc":"Number of times Nian has used the roar",
      "func":"()",
      "name":"GetCastCount",
      "return":"int"
    }],
  "Globals":[{
      "desc":"Add temporary vision for a given team, returns a ViewerID ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)",
      "func":"( int_1, Vector_2, float_3, float_4, bool_5 )",
      "name":"AddFOWViewer",
      "return":"int"
    },{
      "desc":"Returns the number of degrees difference between two yaw angles",
      "func":"( float_1, float_2 )",
      "name":"AngleDiff",
      "return":"float"
    },{
      "desc":"Generate a vector given a QAngles",
      "func":"( QAngle_1 )",
      "name":"AnglesToVector",
      "return":"Vector"
    },{
      "desc":"AppendToLogFile is deprecated. Print to the console for logging instead.",
      "func":"( string_1, string_2 )",
      "name":"AppendToLogFile",
      "return":"void"
    },{
      "desc":"Damage an npc.",
      "func":"( handle_1 )",
      "name":"ApplyDamage",
      "return":"float"
    },{
      "desc":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis",
      "func":"( Vector_1, float_2 )",
      "name":"AxisAngleToQuaternion",
      "return":"Quaternion"
    },{
      "desc":"Compute the closest point on the OBB of an entity.",
      "func":"( handle_1, Vector_2 )",
      "name":"CalcClosestPointOnEntityOBB",
      "return":"Vector"
    },{
      "desc":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping.",
      "func":"( handle_1, handle_2 )",
      "name":"CalcDistanceBetweenEntityOBB",
      "return":"float"
    },{
      "desc":"",
      "func":"( Vector_1, Vector_2, Vector_3 )",
      "name":"CalcDistanceToLineSegment2D",
      "return":"float"
    },{
      "desc":"Create all I/O events for a particular entity",
      "func":"( ehandle_1 )",
      "name":"CancelEntityIOEvents",
      "return":"void"
    },{
      "desc":"CenterCameraOnUnit( nPlayerId, hUnit ): Centers each players' camera on a unit.",
      "func":"( int_1, handle_2 )",
      "name":"CenterCameraOnUnit",
      "return":"void"
    },{
      "desc":"( teamNumber )",
      "func":"( int_1 )",
      "name":"ClearTeamCustomHealthbarColor",
      "return":"void"
    },{
      "desc":"(hInflictor, hAttacker, flDamage) - Allocate a damageinfo object, used as an argument to TakeDamage(). Call DestroyDamageInfo( hInfo ) to free the object.",
      "func":"( handle_1, handle_2, Vector_3, Vector_4, float_5, int_6 )",
      "name":"CreateDamageInfo",
      "return":"handle"
    },{
      "desc":"Pass table - Inputs: entity, effect",
      "func":"( handle_1 )",
      "name":"CreateEffect",
      "return":"bool"
    },{
      "desc":"Create an HTTP request.",
      "func":"( string_1, string_2 )",
      "name":"CreateHTTPRequest",
      "return":"handle"
    },{
      "desc":"Create an HTTP request.",
      "func":"( string_1, string_2 )",
      "name":"CreateHTTPRequestScriptVM",
      "return":"handle"
    },{
      "desc":"Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero",
      "func":"( string_1, handle_2 )",
      "name":"CreateHeroForPlayer",
      "return":"handle"
    },{
      "desc":"Create illusions of the passed hero that belong to passed unit using passed modifier data. ( hOwner, hHeroToCopy, hModiiferKeys, nNumIllusions, nPadding, bScramblePosition, bFindClearSpace ) Supported keys: outgoing_damageincoming_damagebounty_basebounty_growthoutgoing_damage_structureoutgoing_damage_roshan",
      "func":"( handle_1, handle_2, handle_3, int_4, int_5, bool_6, bool_7 )",
      "name":"CreateIllusions",
      "return":"table"
    },{
      "desc":"Create a DOTA item",
      "func":"( string_1, handle_2, handle_3 )",
      "name":"CreateItem",
      "return":"handle"
    },{
      "desc":"Create a physical item at a given location, can start in air (but doesn't clear a space)",
      "func":"( Vector_1, handle_2 )",
      "name":"CreateItemOnPositionForLaunch",
      "return":"handle"
    },{
      "desc":"Create a physical item at a given location",
      "func":"( Vector_1, handle_2 )",
      "name":"CreateItemOnPositionSync",
      "return":"handle"
    },{
      "desc":"Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )",
      "func":"( handle_1, handle_2, string_3, handle_4, Vector_5, int_6, bool_7 )",
      "name":"CreateModifierThinker",
      "return":"handle"
    },{
      "desc":"Create a rune of the specified type (vLocation, iRuneType).",
      "func":"( Vector_1, int_2 )",
      "name":"CreateRune",
      "return":"handle"
    },{
      "desc":"Create a scene entity to play the specified scene.",
      "func":"( string_1 )",
      "name":"CreateSceneEntity",
      "return":"handle"
    },{
      "desc":"Create a temporary tree, uses a default tree model. (vLocation, flDuration).",
      "func":"( Vector_1, float_2 )",
      "name":"CreateTempTree",
      "return":"handle"
    },{
      "desc":"Create a temporary tree, specifying the tree model name. (vLocation, flDuration, szModelName).",
      "func":"( Vector_1, float_2, string_3 )",
      "name":"CreateTempTreeWithModel",
      "return":"handle"
    },{
      "desc":"CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger",
      "func":"( Vector_1, Vector_2, Vector_3 )",
      "name":"CreateTrigger",
      "return":"handle"
    },{
      "desc":"CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided",
      "func":"( Vector_1, float_2 )",
      "name":"CreateTriggerRadiusApproximate",
      "return":"handle"
    },{
      "desc":"( iSeed ) - Creates a separate random number stream.",
      "func":"( int_1 )",
      "name":"CreateUniformRandomStream",
      "return":"handle"
    },{
      "desc":"Creates a DOTA unit by its dota_npc_units.txt name",
      "func":"( string_1, Vector_2, bool_3, handle_4, handle_5, int_6 )",
      "name":"CreateUnitByName",
      "return":"handle"
    },{
      "desc":"Creates a DOTA unit by its dota_npc_units.txt name",
      "func":"( string_1, Vector_2, bool_3, handle_4, handle_5, int_6, handle_7 )",
      "name":"CreateUnitByNameAsync",
      "return":"int"
    },{
      "desc":"Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at.",
      "func":"( handle_1, Vector_2 )",
      "name":"CreateUnitFromTable",
      "return":"handle"
    },{
      "desc":"(vector,vector) cross product between two vectors",
      "func":"( Vector_1, Vector_2 )",
      "name":"CrossVectors",
      "return":"Vector"
    },{
      "desc":"Spawn a .vmap at the target location.",
      "func":"( string_1, Vector_2, bool_3, handle_4, handle_5, handle_6 )",
      "name":"DOTA_SpawnMapAtPosition",
      "return":"int"
    },{
      "desc":"Breaks in the debugger",
      "func":"()",
      "name":"DebugBreak",
      "return":"void"
    },{
      "desc":"Creates a test unit controllable by the specified player.",
      "func":"( handle_1, string_2, int_3, bool_4, handle_5 )",
      "name":"DebugCreateUnit",
      "return":"int"
    },{
      "desc":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )",
      "func":"( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
      "name":"DebugDrawBox",
      "return":"void"
    },{
      "desc":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)",
      "func":"( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
      "name":"DebugDrawBoxDirection",
      "return":"void"
    },{
      "desc":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)",
      "func":"( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
      "name":"DebugDrawCircle",
      "return":"void"
    },{
      "desc":"Try to clear all the debug overlay info",
      "func":"()",
      "name":"DebugDrawClear",
      "return":"void"
    },{
      "desc":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)",
      "func":"( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
      "name":"DebugDrawLine",
      "return":"void"
    },{
      "desc":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)",
      "func":"( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
      "name":"DebugDrawLine_vCol",
      "return":"void"
    },{
      "desc":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)",
      "func":"( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
      "name":"DebugDrawScreenTextLine",
      "return":"void"
    },{
      "desc":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)",
      "func":"( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
      "name":"DebugDrawSphere",
      "return":"void"
    },{
      "desc":"Draw text in 3d (origin, text, bViewCheck, duration)",
      "func":"( Vector_1, string_2, bool_3, float_4 )",
      "name":"DebugDrawText",
      "return":"void"
    },{
      "desc":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)",
      "func":"( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
      "name":"DebugScreenTextPretty",
      "return":"void"
    },{
      "desc":"Free a damageinfo object that was created with CreateDamageInfo().",
      "func":"( handle_1 )",
      "name":"DestroyDamageInfo",
      "return":"void"
    },{
      "desc":"(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)",
      "func":"( handle_1, handle_2, handle_3, float_4, float_5, float_6, float_7, string_8 )",
      "name":"DoCleaveAttack",
      "return":"int"
    },{
      "desc":"#EntFire:Generate and entity i/o event",
      "func":"( string_1, string_2, string_3, float_4, handle_5, handle_6 )",
      "name":"DoEntFire",
      "return":"void"
    },{
      "desc":"#EntFireByHandle:Generate and entity i/o event",
      "func":"( handle_1, string_2, string_3, float_4, handle_5, handle_6 )",
      "name":"DoEntFireByInstanceHandle",
      "return":"void"
    },{
      "desc":"Execute a script (internal)",
      "func":"( string_1, handle_2 )",
      "name":"DoIncludeScript",
      "return":"bool"
    },{
      "desc":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.",
      "func":"( bool_1, string_2 )",
      "name":"DoScriptAssert",
      "return":"void"
    },{
      "desc":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.",
      "func":"( string_1 )",
      "name":"DoUniqueString",
      "return":"string"
    },{
      "desc":"",
      "func":"( Vector_1, Vector_2 )",
      "name":"DotProduct",
      "return":"float"
    },{
      "desc":"Drop a neutral item for the team of the hero at the given tier.",
      "func":"( string_1, Vector_2, handle_3, int_4, bool_5 )",
      "name":"DropNeutralItemAtPositionForHero",
      "return":"handle"
    },{
      "desc":"Emit an announcer sound for all players.",
      "func":"( string_1 )",
      "name":"EmitAnnouncerSound",
      "return":"void"
    },{
      "desc":"Emit an announcer sound for a player.",
      "func":"( string_1, int_2 )",
      "name":"EmitAnnouncerSoundForPlayer",
      "return":"void"
    },{
      "desc":"Emit an announcer sound for a team.",
      "func":"( string_1, int_2 )",
      "name":"EmitAnnouncerSoundForTeam",
      "return":"void"
    },{
      "desc":"Emit an announcer sound for a team at a specific location.",
      "func":"( string_1, int_2, Vector_3 )",
      "name":"EmitAnnouncerSoundForTeamOnLocation",
      "return":"void"
    },{
      "desc":"Play named sound for all players",
      "func":"( string_1 )",
      "name":"EmitGlobalSound",
      "return":"void"
    },{
      "desc":"Play named sound on Entity",
      "func":"( string_1, handle_2 )",
      "name":"EmitSoundOn",
      "return":"void"
    },{
      "desc":"Play named sound only on the client for the passed in player",
      "func":"( string_1, handle_2 )",
      "name":"EmitSoundOnClient",
      "return":"void"
    },{
      "desc":"Emit a sound on an entity for only a specific player",
      "func":"( string_1, handle_2, int_3 )",
      "name":"EmitSoundOnEntityForPlayer",
      "return":"void"
    },{
      "desc":"Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster",
      "func":"( Vector_1, string_2, handle_3 )",
      "name":"EmitSoundOnLocationForAllies",
      "return":"void"
    },{
      "desc":"Emit a sound on a location for only a specific player",
      "func":"( string_1, Vector_2, int_3 )",
      "name":"EmitSoundOnLocationForPlayer",
      "return":"void"
    },{
      "desc":"Emit a sound on a location from a unit. (vLocation, soundName, hCaster).",
      "func":"( Vector_1, string_2, handle_3 )",
      "name":"EmitSoundOnLocationWithCaster",
      "return":"void"
    },{
      "desc":"Turn an entity index integer to an HScript representing that entity's script instance.",
      "func":"( int_1 )",
      "name":"EntIndexToHScript",
      "return":"handle"
    },{
      "desc":"Issue an order from a script table",
      "func":"( handle_1 )",
      "name":"ExecuteOrderFromTable",
      "return":"void"
    },{
      "desc":"Smooth curve decreasing slower as it approaches zero",
      "func":"( float_1, float_2, float_3 )",
      "name":"ExponentialDecay",
      "return":"float"
    },{
      "desc":"Finds a clear random position around a given target unit, using the target unit's padded collision radius.",
      "func":"( handle_1, handle_2, int_3 )",
      "name":"FindClearRandomPositionAroundUnit",
      "return":"bool"
    },{
      "desc":"Place a unit somewhere not already occupied.",
      "func":"( handle_1, Vector_2, bool_3 )",
      "name":"FindClearSpaceForUnit",
      "return":"bool"
    },{
      "desc":"Find a spawn point for the given team.",
      "func":"( int_1 )",
      "name":"FindSpawnEntityForTeam",
      "return":"handle"
    },{
      "desc":"Find units that intersect the given line with the given flags.",
      "func":"( int_1, Vector_2, Vector_3, handle_4, float_5, int_6, int_7, int_8 )",
      "name":"FindUnitsInLine",
      "return":"table"
    },{
      "desc":"Finds the units in a given radius with the given flags.",
      "func":"( int_1, Vector_2, handle_3, float_4, int_5, int_6, int_7, int_8, bool_9 )",
      "name":"FindUnitsInRadius",
      "return":"table"
    },{
      "desc":"Fire Entity's Action Input w/no data",
      "func":"( ehandle_1, string_2 )",
      "name":"FireEntityIOInputNameOnly",
      "return":"void"
    },{
      "desc":"Fire Entity's Action Input with passed String - you own the memory",
      "func":"( ehandle_1, string_2, string_3 )",
      "name":"FireEntityIOInputString",
      "return":"void"
    },{
      "desc":"Fire Entity's Action Input with passed Vector - you own the memory",
      "func":"( ehandle_1, string_2, Vector_3 )",
      "name":"FireEntityIOInputVec",
      "return":"void"
    },{
      "desc":"Fire a game event.",
      "func":"( string_1, handle_2 )",
      "name":"FireGameEvent",
      "return":"void"
    },{
      "desc":"Fire a game event without broadcasting to the client.",
      "func":"( string_1, handle_2 )",
      "name":"FireGameEventLocal",
      "return":"void"
    },{
      "desc":"Get the time spent on the server in the last frame",
      "func":"()",
      "name":"FrameTime",
      "return":"float"
    },{
      "desc":"Gets the ability texture name for an ability",
      "func":"( string_1 )",
      "name":"GetAbilityTextureNameForAbility",
      "return":"string"
    },{
      "desc":"Returns the currently active spawn group handle",
      "func":"()",
      "name":"GetActiveSpawnGroupHandle",
      "return":"int"
    },{
      "desc":"( version )",
      "func":"( string_1 )",
      "name":"GetDedicatedServerKey",
      "return":"string"
    },{
      "desc":"( version )",
      "func":"( string_1 )",
      "name":"GetDedicatedServerKeyV2",
      "return":"string"
    },{
      "desc":"Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE.",
      "func":"( unsigned_1 )",
      "name":"GetEntityIndexForTreeId",
      "return":"<unknown>"
    },{
      "desc":"Returns the engines current frame count",
      "func":"()",
      "name":"GetFrameCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( Vector_1, handle_2 )",
      "name":"GetGroundHeight",
      "return":"float"
    },{
      "desc":"Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.",
      "func":"( Vector_1, handle_2 )",
      "name":"GetGroundPosition",
      "return":"Vector"
    },{
      "desc":"Get the cost of an item by name.",
      "func":"( string_1 )",
      "name":"GetItemCost",
      "return":"int"
    },{
      "desc":"",
      "func":"( int_1, int_2 )",
      "name":"GetItemDefOwnedCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( int_1, int_2 )",
      "name":"GetItemDefQuantity",
      "return":"int"
    },{
      "desc":"Get the local player on a listen server.",
      "func":"()",
      "name":"GetListenServerHost",
      "return":"handle"
    },{
      "desc":"( )",
      "func":"()",
      "name":"GetLobbyEventGameDetails",
      "return":"table"
    },{
      "desc":"Get the name of the map.",
      "func":"()",
      "name":"GetMapName",
      "return":"string"
    },{
      "desc":"Get the longest delay for all events attached to an output",
      "func":"( ehandle_1, string_2 )",
      "name":"GetMaxOutputDelay",
      "return":"float"
    },{
      "desc":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
      "func":"( handle_1 )",
      "name":"GetPhysAngularVelocity",
      "return":"Vector"
    },{
      "desc":"Get Velocity for VPHYS or normal object",
      "func":"( handle_1 )",
      "name":"GetPhysVelocity",
      "return":"Vector"
    },{
      "desc":"Given the item tier and the team, roll for the name of a valid neutral item drop, considering previous drops and consumables.",
      "func":"( int_1, int_2 )",
      "name":"GetPotentialNeutralItemDrop",
      "return":"string"
    },{
      "desc":"Get the current real world date",
      "func":"()",
      "name":"GetSystemDate",
      "return":"string"
    },{
      "desc":"Get the current real world time",
      "func":"()",
      "name":"GetSystemTime",
      "return":"string"
    },{
      "desc":"Get system time in milliseconds",
      "func":"()",
      "name":"GetSystemTimeMS",
      "return":"double"
    },{
      "desc":"",
      "func":"( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
      "name":"GetTargetAOELocation",
      "return":"Vector"
    },{
      "desc":"",
      "func":"( int_1, int_2, int_3, Vector_4, int_5, int_6, int_7 )",
      "name":"GetTargetLinearLocation",
      "return":"Vector"
    },{
      "desc":"( int teamID )",
      "func":"( int_1 )",
      "name":"GetTeamHeroKills",
      "return":"int"
    },{
      "desc":"( int teamID )",
      "func":"( int_1 )",
      "name":"GetTeamName",
      "return":"string"
    },{
      "desc":"Given and entity index of a tree, get the tree id for use for use with with unit orders.",
      "func":"( int_1 )",
      "name":"GetTreeIdForEntityIndex",
      "return":"int"
    },{
      "desc":"Gets the world's maximum X position.",
      "func":"()",
      "name":"GetWorldMaxX",
      "return":"float"
    },{
      "desc":"Gets the world's maximum Y position.",
      "func":"()",
      "name":"GetWorldMaxY",
      "return":"float"
    },{
      "desc":"Gets the world's minimum X position.",
      "func":"()",
      "name":"GetWorldMinX",
      "return":"float"
    },{
      "desc":"Gets the world's minimum Y position.",
      "func":"()",
      "name":"GetWorldMinY",
      "return":"float"
    },{
      "desc":"Get amount of XP required to reach the next level.",
      "func":"( int_1 )",
      "name":"GetXPNeededToReachNextLevel",
      "return":"int"
    },{
      "desc":"InitLogFile is deprecated. Print to the console for logging instead.",
      "func":"( string_1, string_2 )",
      "name":"InitLogFile",
      "return":"void"
    },{
      "desc":"Returns true if this is lua running from the client.dll.",
      "func":"()",
      "name":"IsClient",
      "return":"bool"
    },{
      "desc":"Returns true if this server is a dedicated server.",
      "func":"()",
      "name":"IsDedicatedServer",
      "return":"bool"
    },{
      "desc":"Returns true if this is lua running within tools mode.",
      "func":"()",
      "name":"IsInToolsMode",
      "return":"bool"
    },{
      "desc":"Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation).",
      "func":"( int_1, Vector_2 )",
      "name":"IsLocationVisible",
      "return":"bool"
    },{
      "desc":"Is this entity a mango tree? (hEntity).",
      "func":"( handle_1 )",
      "name":"IsMangoTree",
      "return":"bool"
    },{
      "desc":"Returns true if the entity is valid and marked for deletion.",
      "func":"( handle_1 )",
      "name":"IsMarkedForDeletion",
      "return":"bool"
    },{
      "desc":"Returns true if this is lua running from the server.dll.",
      "func":"()",
      "name":"IsServer",
      "return":"bool"
    },{
      "desc":"Returns true if the unit is in a valid position in the gridnav.",
      "func":"( handle_1 )",
      "name":"IsUnitInValidPosition",
      "return":"bool"
    },{
      "desc":"Checks to see if the given hScript is a valid entity",
      "func":"( handle_1 )",
      "name":"IsValidEntity",
      "return":"bool"
    },{
      "desc":"(vector,vector,float) lerp between two vectors by a float factor returning new vector",
      "func":"( Vector_1, Vector_2, float_3 )",
      "name":"LerpVectors",
      "return":"Vector"
    },{
      "desc":"Set the limit on the pathfinding search space.",
      "func":"( float_1 )",
      "name":"LimitPathingSearchDepth",
      "return":"void"
    },{
      "desc":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType).",
      "func":"( string_1, string_2, int_3 )",
      "name":"LinkLuaModifier",
      "return":"void"
    },{
      "desc":"Register as a listener for a game event from script.",
      "func":"( string_1, handle_2, handle_3 )",
      "name":"ListenToGameEvent",
      "return":"int"
    },{
      "desc":"Creates a table from the specified keyvalues text file",
      "func":"( string_1 )",
      "name":"LoadKeyValues",
      "return":"table"
    },{
      "desc":"Creates a table from the specified keyvalues string",
      "func":"( string_1 )",
      "name":"LoadKeyValuesFromString",
      "return":"table"
    },{
      "desc":"Get the current local time",
      "func":"()",
      "name":"LocalTime",
      "return":"table"
    },{
      "desc":"Checks to see if the given hScript is a valid entity",
      "func":"( string_1 )",
      "name":"MakeStringToken",
      "return":"int"
    },{
      "desc":"Triggers the creation of entities in a manually-completed spawn group",
      "func":"( int_1 )",
      "name":"ManuallyTriggerSpawnGroupCompletion",
      "return":"void"
    },{
      "desc":"Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration).",
      "func":"( int_1, handle_2, int_3, int_4, int_5, int_6 )",
      "name":"MinimapEvent",
      "return":"void"
    },{
      "desc":"Print a message",
      "func":"( string_1 )",
      "name":"Msg",
      "return":"void"
    },{
      "desc":"Pause or unpause the game.",
      "func":"( bool_1 )",
      "name":"PauseGame",
      "return":"void"
    },{
      "desc":"Get a script instance of a player by index.",
      "func":"( int_1 )",
      "name":"PlayerInstanceFromIndex",
      "return":"handle"
    },{
      "desc":"Precache an entity from KeyValues in table",
      "func":"( string_1, handle_2, handle_3 )",
      "name":"PrecacheEntityFromTable",
      "return":"void"
    },{
      "desc":"Precache a list of entity KeyValues tables",
      "func":"( handle_1, handle_2 )",
      "name":"PrecacheEntityListFromTable",
      "return":"void"
    },{
      "desc":"Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished.",
      "func":"( string_1, handle_2 )",
      "name":"PrecacheItemByNameAsync",
      "return":"void"
    },{
      "desc":"Precaches a DOTA item by its dota_npc_items.txt name",
      "func":"( string_1, handle_2 )",
      "name":"PrecacheItemByNameSync",
      "return":"void"
    },{
      "desc":"( modelName, context ) - Manually precache a single model",
      "func":"( string_1, handle_2 )",
      "name":"PrecacheModel",
      "return":"void"
    },{
      "desc":"Manually precache a single resource",
      "func":"( string_1, string_2, handle_3 )",
      "name":"PrecacheResource",
      "return":"void"
    },{
      "desc":"Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished.",
      "func":"( string_1, handle_2, int_3 )",
      "name":"PrecacheUnitByNameAsync",
      "return":"void"
    },{
      "desc":"Precaches a DOTA unit by its dota_npc_units.txt name",
      "func":"( string_1, handle_2, int_3 )",
      "name":"PrecacheUnitByNameSync",
      "return":"void"
    },{
      "desc":"Precaches a DOTA unit from a table of entity key values.",
      "func":"( handle_1, handle_2 )",
      "name":"PrecacheUnitFromTableAsync",
      "return":"void"
    },{
      "desc":"Precaches a DOTA unit from a table of entity key values.",
      "func":"( handle_1, handle_2 )",
      "name":"PrecacheUnitFromTableSync",
      "return":"void"
    },{
      "desc":"Print a console message with a linked console command",
      "func":"( string_1, string_2 )",
      "name":"PrintLinkedConsoleMessage",
      "return":"void"
    },{
      "desc":"Get a random float within a range",
      "func":"( float_1, float_2 )",
      "name":"RandomFloat",
      "return":"float"
    },{
      "desc":"Get a random int within a range",
      "func":"( int_1, int_2 )",
      "name":"RandomInt",
      "return":"int"
    },{
      "desc":"Get a random 2D vector of the given length.",
      "func":"( float_1 )",
      "name":"RandomVector",
      "return":"Vector"
    },{
      "desc":"Register a custom animation script to run when a model loads",
      "func":"( string_1, string_2 )",
      "name":"RegisterCustomAnimationScriptForModel",
      "return":"void"
    },{
      "desc":"Create a C proxy for a script-based spawn group filter",
      "func":"( string_1 )",
      "name":"RegisterSpawnGroupFilterProxy",
      "return":"void"
    },{
      "desc":"Reloads the MotD file",
      "func":"()",
      "name":"ReloadMOTD",
      "return":"void"
    },{
      "desc":"Remove temporary vision for a given team ( nTeamID, nViewerID )",
      "func":"( int_1, int_2 )",
      "name":"RemoveFOWViewer",
      "return":"void"
    },{
      "desc":"Remove the C proxy for a script-based spawn group filter",
      "func":"( string_1 )",
      "name":"RemoveSpawnGroupFilterProxy",
      "return":"void"
    },{
      "desc":"Check and fix units that have been assigned a position inside collision radius of other NPCs.",
      "func":"( Vector_1, float_2 )",
      "name":"ResolveNPCPositions",
      "return":"void"
    },{
      "desc":"(int nPct)",
      "func":"( int_1 )",
      "name":"RollPercentage",
      "return":"bool"
    },{
      "desc":"( chance, pseudo random id, unit.",
      "func":"( unsigned_1, int_2, handle_3 )",
      "name":"RollPseudoRandomPercentage",
      "return":"bool"
    },{
      "desc":"Rotate a QAngle by another QAngle.",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotateOrientation",
      "return":"QAngle"
    },{
      "desc":"Rotate a Vector around a point.",
      "func":"( Vector_1, QAngle_2, Vector_3 )",
      "name":"RotatePosition",
      "return":"Vector"
    },{
      "desc":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis",
      "func":"( Quaternion_1, Vector_2, float_3 )",
      "name":"RotateQuaternionByAxisAngle",
      "return":"Quaternion"
    },{
      "desc":"Find the delta between two QAngles.",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotationDelta",
      "return":"QAngle"
    },{
      "desc":"converts delta QAngle to an angular velocity Vector",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotationDeltaAsAngularVelocity",
      "return":"Vector"
    },{
      "desc":"Have Entity say string, and teamOnly or not",
      "func":"( handle_1, string_2, bool_3 )",
      "name":"Say",
      "return":"void"
    },{
      "desc":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake",
      "func":"( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
      "name":"ScreenShake",
      "return":"void"
    },{
      "desc":"( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*",
      "func":"( handle_1, int_2, handle_3, int_4, handle_5 )",
      "name":"SendOverheadEventMessage",
      "return":"void"
    },{
      "desc":"Send a string to the console as a client command",
      "func":"( string_1 )",
      "name":"SendToConsole",
      "return":"void"
    },{
      "desc":"Send a string to the console as a server command",
      "func":"( string_1 )",
      "name":"SendToServerConsole",
      "return":"void"
    },{
      "desc":"Sets an opvar value for all players",
      "func":"( string_1, string_2, string_3, float_4 )",
      "name":"SetOpvarFloatAll",
      "return":"void"
    },{
      "desc":"Sets an opvar value for a single player",
      "func":"( string_1, string_2, string_3, float_4, handle_5 )",
      "name":"SetOpvarFloatPlayer",
      "return":"void"
    },{
      "desc":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
      "func":"( handle_1, Vector_2 )",
      "name":"SetPhysAngularVelocity",
      "return":"void"
    },{
      "desc":"Set the current quest name.",
      "func":"( string_1 )",
      "name":"SetQuestName",
      "return":"void"
    },{
      "desc":"Set the current quest phase.",
      "func":"( int_1 )",
      "name":"SetQuestPhase",
      "return":"void"
    },{
      "desc":"Set rendering on/off for an ehandle",
      "func":"( ehandle_1, bool_2 )",
      "name":"SetRenderingEnabled",
      "return":"void"
    },{
      "desc":"( teamNumber, r, g, b )",
      "func":"( int_1, int_2, int_3, int_4 )",
      "name":"SetTeamCustomHealthbarColor",
      "return":"void"
    },{
      "desc":"( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName",
      "func":"( string_1, int_2, int_3, float_4 )",
      "name":"ShowCustomHeaderMessage",
      "return":"void"
    },{
      "desc":"Show a generic popup dialog for all players.",
      "func":"( string_1, string_2, string_3, string_4, int_5 )",
      "name":"ShowGenericPopup",
      "return":"void"
    },{
      "desc":"Show a generic popup dialog to a specific player.",
      "func":"( handle_1, string_2, string_3, string_4, string_5, int_6 )",
      "name":"ShowGenericPopupToPlayer",
      "return":"void"
    },{
      "desc":"Print a hud message on all clients",
      "func":"( string_1 )",
      "name":"ShowMessage",
      "return":"void"
    },{
      "desc":"(Vector vOrigin, float flRadius )",
      "func":"( Vector_1, float_2 )",
      "name":"SpawnDOTAShopTriggerRadiusApproximate",
      "return":"handle"
    },{
      "desc":"Asynchronously spawns a single entity from a table",
      "func":"( string_1, handle_2, handle_3, handle_4 )",
      "name":"SpawnEntityFromTableAsynchronous",
      "return":"void"
    },{
      "desc":"Synchronously spawns a single entity from a table",
      "func":"( string_1, handle_2 )",
      "name":"SpawnEntityFromTableSynchronous",
      "return":"handle"
    },{
      "desc":"Hierarchically spawn an entity group from a set of spawn tables.",
      "func":"( handle_1, bool_2, handle_3 )",
      "name":"SpawnEntityGroupFromTable",
      "return":"bool"
    },{
      "desc":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete",
      "func":"( handle_1, handle_2 )",
      "name":"SpawnEntityListFromTableAsynchronous",
      "return":"int"
    },{
      "desc":"Synchronously spawn an entity group from a list of spawn tables.",
      "func":"( handle_1 )",
      "name":"SpawnEntityListFromTableSynchronous",
      "return":"handle"
    },{
      "desc":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]",
      "func":"( Quaternion_1, Quaternion_2, float_3 )",
      "name":"SplineQuaternions",
      "return":"Quaternion"
    },{
      "desc":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]",
      "func":"( Vector_1, Vector_2, float_3 )",
      "name":"SplineVectors",
      "return":"Vector"
    },{
      "desc":"Start a sound event",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEvent",
      "return":"void"
    },{
      "desc":"Start a sound event from position",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPosition",
      "return":"void"
    },{
      "desc":"Start a sound event from position with reliable delivery",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPositionReliable",
      "return":"void"
    },{
      "desc":"Start a sound event from position with optional delivery",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPositionUnreliable",
      "return":"void"
    },{
      "desc":"Start a sound event with reliable delivery",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEventReliable",
      "return":"void"
    },{
      "desc":"Start a sound event with optional delivery",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEventUnreliable",
      "return":"void"
    },{
      "desc":"Pass entity and effect name",
      "func":"( handle_1, string_2 )",
      "name":"StopEffect",
      "return":"void"
    },{
      "desc":"Stop named sound for all players",
      "func":"( string_1 )",
      "name":"StopGlobalSound",
      "return":"void"
    },{
      "desc":"Stop listening to all game events within a specific context.",
      "func":"( handle_1 )",
      "name":"StopListeningToAllGameEvents",
      "return":"void"
    },{
      "desc":"Stop listening to a particular game event.",
      "func":"( int_1 )",
      "name":"StopListeningToGameEvent",
      "return":"bool"
    },{
      "desc":"Stops a sound event with optional delivery",
      "func":"( string_1, handle_2 )",
      "name":"StopSoundEvent",
      "return":"void"
    },{
      "desc":"Stop named sound on Entity",
      "func":"( string_1, handle_2 )",
      "name":"StopSoundOn",
      "return":"void"
    },{
      "desc":"Get the current server time",
      "func":"()",
      "name":"Time",
      "return":"float"
    },{
      "desc":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal",
      "func":"( handle_1 )",
      "name":"TraceCollideable",
      "return":"bool"
    },{
      "desc":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
      "func":"( handle_1 )",
      "name":"TraceHull",
      "return":"bool"
    },{
      "desc":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
      "func":"( handle_1 )",
      "name":"TraceLine",
      "return":"bool"
    },{
      "desc":"Returns the number of degrees difference between two yaw angles",
      "func":"( float_1, float_2 )",
      "name":"UTIL_AngleDiff",
      "return":"float"
    },{
      "desc":"Sends colored text to one client.",
      "func":"( int_1, string_2, int_3, int_4, int_5, int_6 )",
      "name":"UTIL_MessageText",
      "return":"void"
    },{
      "desc":"Sends colored text to all clients.",
      "func":"( string_1, int_2, int_3, int_4, int_5 )",
      "name":"UTIL_MessageTextAll",
      "return":"void"
    },{
      "desc":"Sends colored text to all clients. (Valid context keys: player_id, value, team_id)",
      "func":"( string_1, int_2, int_3, int_4, int_5, handle_6 )",
      "name":"UTIL_MessageTextAll_WithContext",
      "return":"void"
    },{
      "desc":"Sends colored text to one client. (Valid context keys: player_id, value, team_id)",
      "func":"( int_1, string_2, int_3, int_4, int_5, int_6, handle_7 )",
      "name":"UTIL_MessageText_WithContext",
      "return":"void"
    },{
      "desc":"Removes the specified entity",
      "func":"( handle_1 )",
      "name":"UTIL_Remove",
      "return":"void"
    },{
      "desc":"Immediately removes the specified entity",
      "func":"( handle_1 )",
      "name":"UTIL_RemoveImmediate",
      "return":"void"
    },{
      "desc":"Clear all message text on one client.",
      "func":"( int_1 )",
      "name":"UTIL_ResetMessageText",
      "return":"void"
    },{
      "desc":"Clear all message text from all clients.",
      "func":"()",
      "name":"UTIL_ResetMessageTextAll",
      "return":"void"
    },{
      "desc":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam",
      "func":"( handle_1, int_2, int_3, int_4, int_5 )",
      "name":"UnitFilter",
      "return":"int"
    },{
      "desc":"Unload a spawn group by name",
      "func":"( string_1 )",
      "name":"UnloadSpawnGroup",
      "return":"void"
    },{
      "desc":"Unload a spawn group by handle",
      "func":"( int_1 )",
      "name":"UnloadSpawnGroupByHandle",
      "return":"void"
    },{
      "desc":"( hEventPointData )",
      "func":"( handle_1 )",
      "name":"UpdateEventPoints",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector_1 )",
      "name":"VectorAngles",
      "return":"QAngle"
    },{
      "desc":"Get Qangles (with no roll) for a Vector.",
      "func":"( Vector_1 )",
      "name":"VectorToAngles",
      "return":"QAngle"
    },{
      "desc":"Print a warning",
      "func":"( string_1 )",
      "name":"Warning",
      "return":"void"
    },{
      "desc":"Gets the value of the given cvar, as a float.",
      "func":"( string_1 )",
      "name":"cvar_getf",
      "return":"float"
    },{
      "desc":"Sets the value of the given cvar, as a float.",
      "func":"( string_1, float_2 )",
      "name":"cvar_setf",
      "return":"bool"
    },{
      "desc":"Add a rule to the decision database.",
      "func":"( handle_1 )",
      "name":"rr_AddDecisionRule",
      "return":"bool"
    },{
      "desc":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)",
      "func":"( handle_1, handle_2 )",
      "name":"rr_CommitAIResponse",
      "return":"bool"
    },{
      "desc":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }.",
      "func":"()",
      "name":"rr_GetResponseTargets",
      "return":"handle"
    },{
      "desc":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found).",
      "func":"( handle_1, handle_2, handle_3 )",
      "name":"rr_QueryBestResponse",
      "return":"bool"
    }],
  "HTTPRequest":[{
      "desc":"Send a HTTP request.",
      "func":"( handle_1 )",
      "name":"Send",
      "return":"bool"
    },{
      "desc":"Set the total timeout on the request.",
      "func":"( unsigned_1 )",
      "name":"SetHTTPRequestAbsoluteTimeoutMS",
      "return":"bool"
    },{
      "desc":"Set a POST or GET parameter on the request.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestGetOrPostParameter",
      "return":"bool"
    },{
      "desc":"Set a header value on the request.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestHeaderValue",
      "return":"bool"
    },{
      "desc":"Set the network timeout on the request - this timer is reset when any data is received.",
      "func":"( unsigned_1 )",
      "name":"SetHTTPRequestNetworkActivityTimeout",
      "return":"bool"
    },{
      "desc":"Set the literal body of a post - invalid after setting a post parameter.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestRawPostBody",
      "return":"bool"
    }],
  "CEntityInstance":[{
      "desc":"Adds an I/O connection that will call the named function on this entity when the specified output fires.",
      "func":"( string_1, string_2 )",
      "name":"ConnectOutput",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"Destroy",
      "return":"void"
    },{
      "desc":"Removes a connected script function from an I/O event on this entity.",
      "func":"( string_1, string_2 )",
      "name":"DisconnectOutput",
      "return":"void"
    },{
      "desc":"Removes a connected script function from an I/O event on the passed entity.",
      "func":"( string_1, string_2, handle_3 )",
      "name":"DisconnectRedirectedOutput",
      "return":"void"
    },{
      "desc":"Fire an entity output",
      "func":"( string_1, handle_2, handle_3, table_4, float_5 )",
      "name":"FireOutput",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"GetClassname",
      "return":"string"
    },{
      "desc":"Get the entity name w/help if not defined (i.e. classname/etc)",
      "func":"()",
      "name":"GetDebugName",
      "return":"string"
    },{
      "desc":"Get the entity as an EHANDLE",
      "func":"()",
      "name":"GetEntityHandle",
      "return":"ehandle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetEntityIndex",
      "return":"int"
    },{
      "desc":"Get Integer Attribute",
      "func":"( string_1 )",
      "name":"GetIntAttr",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetName",
      "return":"string"
    },{
      "desc":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity",
      "func":"()",
      "name":"GetOrCreatePrivateScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve, creating if necessary, the public script-side data associated with an entity",
      "func":"()",
      "name":"GetOrCreatePublicScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve the private per-instance script-side data associated with an entity",
      "func":"()",
      "name":"GetPrivateScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve the public script-side data associated with an entity",
      "func":"()",
      "name":"GetPublicScriptScope",
      "return":"handle"
    },{
      "desc":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires.",
      "func":"( string_1, string_2, handle_3 )",
      "name":"RedirectOutput",
      "return":"void"
    },{
      "desc":"Delete this entity",
      "func":"()",
      "name":"RemoveSelf",
      "return":"void"
    },{
      "desc":"Set Integer Attribute",
      "func":"( string_1, int_2 )",
      "name":"SetIntAttr",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"entindex",
      "return":"int"
    }],
  "CDOTA_Item":[{
      "desc":"",
      "func":"()",
      "name":"CanBeUsedOutOfInventory",
      "return":"bool"
    },{
      "desc":"Get the container for this item.",
      "func":"()",
      "name":"GetContainer",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCost",
      "return":"int"
    },{
      "desc":"Get the number of charges this item currently has.",
      "func":"()",
      "name":"GetCurrentCharges",
      "return":"int"
    },{
      "desc":"Get the initial number of charges this item has.",
      "func":"()",
      "name":"GetInitialCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetItemSlot",
      "return":"int"
    },{
      "desc":"Gets whether item is unequipped or ready.",
      "func":"()",
      "name":"GetItemState",
      "return":"int"
    },{
      "desc":"Get the parent for this item.",
      "func":"()",
      "name":"GetParent",
      "return":"handle"
    },{
      "desc":"Get the purchase time of this item",
      "func":"()",
      "name":"GetPurchaseTime",
      "return":"float"
    },{
      "desc":"Get the purchaser for this item.",
      "func":"()",
      "name":"GetPurchaser",
      "return":"handle"
    },{
      "desc":"Get the number of secondary charges this item currently has.",
      "func":"()",
      "name":"GetSecondaryCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetShareability",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAlertableItem",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCastOnPickup",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCombinable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDisassemblable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDroppable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInBackpack",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsItem",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsKillable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsNeutralDrop",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPermanent",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPurchasable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRecipe",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRecipeGenerated",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSellable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStackable",
      "return":"bool"
    },{
      "desc":"",
      "func":"( bool bAutoUse, float flHeight, float flDuration, Vector vEndPoint )",
      "name":"LaunchLoot",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bAutoUse, float flInitialHeight, float flLaunchHeight, float flDuration, Vector vEndPoint )",
      "name":"LaunchLootInitialHeight",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bAutoUse, float flRequiredHeight, float flHeight, float flDuration, Vector vEndPoint )",
      "name":"LaunchLootRequiredHeight",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnEquip",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnUnequip",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"RequiresCharges",
      "return":"bool"
    },{
      "desc":"",
      "func":"( bool bValue )",
      "name":"SetCanBeUsedOutOfInventory",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bCastOnPickUp )",
      "name":"SetCastOnPickup",
      "return":"void"
    },{
      "desc":"Set the number of charges on this item",
      "func":"( int iCharges )",
      "name":"SetCurrentCharges",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bDroppable )",
      "name":"SetDroppable",
      "return":"void"
    },{
      "desc":"Sets whether item is unequipped or ready.",
      "func":"( int iState )",
      "name":"SetItemState",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bOnlyPlayerHero )",
      "name":"SetOnlyPlayerHeroPickup",
      "return":"void"
    },{
      "desc":"Set the purchase time of this item",
      "func":"( float flTime )",
      "name":"SetPurchaseTime",
      "return":"void"
    },{
      "desc":"Set the purchaser of record for this item.",
      "func":"( handle hPurchaser )",
      "name":"SetPurchaser",
      "return":"void"
    },{
      "desc":"Set the number of secondary charges on this item",
      "func":"( int iCharges )",
      "name":"SetSecondaryCharges",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bSellable )",
      "name":"SetSellable",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iShareability )",
      "name":"SetShareability",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bStacksWithOtherOwners )",
      "name":"SetStacksWithOtherOwners",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"SpendCharge",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"StacksWithOtherOwners",
      "return":"bool"
    },{
      "desc":"Think this item",
      "func":"()",
      "name":"Think",
      "return":"void"
    }],
  "CDOTABaseAbility":[{
      "desc":"",
      "func":"()",
      "name":"CanAbilityBeUpgraded",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"()",
      "name":"CastAbility",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"ContinueCasting",
      "return":"bool"
    },{
      "desc":"",
      "func":"( Vector vLocation, float fRadius, float fDuration )",
      "name":"CreateVisibilityNode",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"DecrementModifierRefCount",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bInterrupted )",
      "name":"EndChannel",
      "return":"void"
    },{
      "desc":"Clear the cooldown remaining on this ability.",
      "func":"()",
      "name":"EndCooldown",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAOERadius",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityDamage",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityDamageType",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityIndex",
      "return":"int"
    },{
      "desc":"Gets the key values definition for this ability.",
      "func":"()",
      "name":"GetAbilityKeyValues",
      "return":"table"
    },{
      "desc":"Returns the name of this ability.",
      "func":"()",
      "name":"GetAbilityName",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityTargetFlags",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityTargetTeam",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityTargetType",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityType",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAnimationIgnoresModelScale",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAssociatedPrimaryAbilities",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAssociatedSecondaryAbilities",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAutoCastState",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBackswingTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBehavior",
      "return":"int"
    },{
      "desc":"Get ability behavior flags as an int for compatability.",
      "func":"()",
      "name":"GetBehaviorInt",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCastPoint",
      "return":"float"
    },{
      "desc":"Gets the cast range of the ability.",
      "func":"( Vector vLocation, handle hTarget )",
      "name":"GetCastRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCaster",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetChannelStartTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetChannelTime",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iLevel )",
      "name":"GetChannelledManaCostPerSecond",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCloneSource",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetConceptRecipientType",
      "return":"int"
    },{
      "desc":"Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left.",
      "func":"( int iLevel )",
      "name":"GetCooldown",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCooldownTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCooldownTimeRemaining",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCurrentAbilityCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorPosition",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorTarget",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorTargetingNothing",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iLevel )",
      "name":"GetEffectiveCooldown",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iLevel )",
      "name":"GetGoldCost",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iLevel )",
      "name":"GetGoldCostForUpgrade",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetHeroLevelRequiredToUpgrade",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIntrinsicModifierName",
      "return":"string"
    },{
      "desc":"Get the current level of the ability.",
      "func":"()",
      "name":"GetLevel",
      "return":"int"
    },{
      "desc":"",
      "func":"( string szName, int nLevel )",
      "name":"GetLevelSpecialValueFor",
      "return":"table"
    },{
      "desc":"",
      "func":"( string szName, int nLevel )",
      "name":"GetLevelSpecialValueNoOverride",
      "return":"table"
    },{
      "desc":"",
      "func":"( int iLevel )",
      "name":"GetManaCost",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetMaxLevel",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetModifierValue",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetModifierValueBonus",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetPlaybackRateOverride",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSharedCooldownName",
      "return":"string"
    },{
      "desc":"Gets a value from this ability's special value block for its current level.",
      "func":"( string szName )",
      "name":"GetSpecialValueFor",
      "return":"table"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStolenActivityModifier",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetToggleState",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"GetUpgradeRecommended",
      "return":"bool"
    },{
      "desc":"",
      "func":"( float flXP )",
      "name":"HeroXPChange",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IncrementModifierRefCount",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"IsActivated",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAttributeBonus",
      "return":"bool"
    },{
      "desc":"Returns whether the ability is currently channeling.",
      "func":"()",
      "name":"IsChanneling",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCooldownReady",
      "return":"bool"
    },{
      "desc":"",
      "func":"( handle hEntity )",
      "name":"IsCosmetic",
      "return":"bool"
    },{
      "desc":"Returns whether the ability can be cast.",
      "func":"()",
      "name":"IsFullyCastable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHidden",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHiddenAsSecondaryAbility",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHiddenWhenStolen",
      "return":"bool"
    },{
      "desc":"Returns whether the ability is currently casting.",
      "func":"()",
      "name":"IsInAbilityPhase",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsItem",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int nIssuerPlayerID )",
      "name":"IsOwnersGoldEnough",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsOwnersGoldEnoughForUpgrade",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsOwnersManaEnough",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPassive",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRefreshable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSharedWithTeammates",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStealable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStolen",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsToggle",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsTrained",
      "return":"bool"
    },{
      "desc":"Mark the ability button for this ability as needing a refresh.",
      "func":"()",
      "name":"MarkAbilityButtonDirty",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"NumModifiersUsingAbility",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"OnAbilityPhaseInterrupted",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnAbilityPhaseStart",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int nPlayerID, bool bCtrlHeld )",
      "name":"OnAbilityPinged",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bInterrupted )",
      "name":"OnChannelFinish",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flInterval )",
      "name":"OnChannelThink",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnHeroCalculateStatBonus",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnHeroLevelUp",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnOwnerDied",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnOwnerSpawned",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnSpellStart",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnToggle",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"OnUpgrade",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PayGoldCost",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PayGoldCostForUpgrade",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PayManaCost",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PlaysDefaultAnimWhenStolen",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"ProcsMagicStick",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"RefCountsModifiers",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"RefreshCharges",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"RefreshIntrinsicModifier",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"()",
      "name":"RefundManaCost",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ResetToggleOnRespawn",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iIndex )",
      "name":"SetAbilityIndex",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bActivated )",
      "name":"SetActivated",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bChanneling )",
      "name":"SetChanneling",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nCharges )",
      "name":"SetCurrentAbilityCharges",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bFrozenCooldown )",
      "name":"SetFrozenCooldown",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bHidden )",
      "name":"SetHidden",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bInAbilityPhase )",
      "name":"SetInAbilityPhase",
      "return":"void"
    },{
      "desc":"Sets the level of this ability.",
      "func":"( int iLevel )",
      "name":"SetLevel",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flCastPoint )",
      "name":"SetOverrideCastPoint",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bRefCounts )",
      "name":"SetRefCountsModifiers",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bStealable )",
      "name":"SetStealable",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bStolen )",
      "name":"SetStolen",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bUpgradeRecommended )",
      "name":"SetUpgradeRecommended",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ShouldUseResources",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iConcept )",
      "name":"SpeakAbilityConcept",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"SpeakTrigger",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"( float flCooldown )",
      "name":"StartCooldown",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ToggleAbility",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ToggleAutoCast",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bSupressSpeech )",
      "name":"UpgradeAbility",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bMana, bool bGold, bool bCooldown )",
      "name":"UseResources",
      "return":"void"
    }],
  "CBaseModelEntity":[{
      "desc":"Get the attachment id's angles as a p,y,r vector.",
      "func":"( int iAttachment )",
      "name":"GetAttachmentAngles",
      "return":"Vector"
    },{
      "desc":"Get the attachment id's forward vector.",
      "func":"( int iAttachment )",
      "name":"GetAttachmentForward",
      "return":"Vector"
    },{
      "desc":"Get the attachment id's origin vector.",
      "func":"( int iAttachment )",
      "name":"GetAttachmentOrigin",
      "return":"Vector"
    },{
      "desc":"GetMaterialGroupHash(): Get the material group hash of this entity.",
      "func":"()",
      "name":"GetMaterialGroupHash",
      "return":"unsigned"
    },{
      "desc":"GetMaterialGroupMask(): Get the mesh group mask of this entity.",
      "func":"()",
      "name":"GetMaterialGroupMask",
      "return":"uint64"
    },{
      "desc":"Get scale of entity's model.",
      "func":"()",
      "name":"GetModelScale",
      "return":"float"
    },{
      "desc":"GetRenderAlpha(): Get the alpha modulation of this entity.",
      "func":"()",
      "name":"GetRenderAlpha",
      "return":"int"
    },{
      "desc":"GetRenderColor(): Get the render color of the entity.",
      "func":"()",
      "name":"GetRenderColor",
      "return":"Vector"
    },{
      "desc":"Get the named attachment id.",
      "func":"( string pAttachmentName )",
      "name":"ScriptLookupAttachment",
      "return":"int"
    },{
      "desc":"Sets a bodygroup.",
      "func":"( int iGroup, int iValue )",
      "name":"SetBodygroup",
      "return":"void"
    },{
      "desc":"Sets a bodygroup by name.",
      "func":"( string pName, int iValue )",
      "name":"SetBodygroupByName",
      "return":"void"
    },{
      "desc":"SetLightGroup( string ): Sets the light group of the entity.",
      "func":"( string pLightGroup )",
      "name":"SetLightGroup",
      "return":"void"
    },{
      "desc":"SetMaterialGroup( string ): Set the material group of this entity.",
      "func":"( string pMaterialGroup )",
      "name":"SetMaterialGroup",
      "return":"void"
    },{
      "desc":"SetMaterialGroupHash( uint32 ): Set the material group hash of this entity.",
      "func":"( unsigned nHash )",
      "name":"SetMaterialGroupHash",
      "return":"void"
    },{
      "desc":"SetMaterialGroupMask( uint64 ): Set the mesh group mask of this entity.",
      "func":"( uint64 nMeshGroupMask )",
      "name":"SetMaterialGroupMask",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pModelName )",
      "name":"SetModel",
      "return":"void"
    },{
      "desc":"Set scale of entity's model.",
      "func":"( float flScale )",
      "name":"SetModelScale",
      "return":"void"
    },{
      "desc":"SetRenderAlpha( int ): Set the alpha modulation of this entity.",
      "func":"( int nAlpha )",
      "name":"SetRenderAlpha",
      "return":"void"
    },{
      "desc":"SetRenderColor( r, g, b ): Sets the render color of the entity.",
      "func":"( int r, int g, int b )",
      "name":"SetRenderColor",
      "return":"void"
    },{
      "desc":"SetRenderMode( int ): Sets the render mode of the entity.",
      "func":"( int nMode )",
      "name":"SetRenderMode",
      "return":"void"
    },{
      "desc":"SetSingleMeshGroup( string ): Set a single mesh group for this entity.",
      "func":"( string pMeshGroupName )",
      "name":"SetSingleMeshGroup",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector mins, Vector maxs )",
      "name":"SetSize",
      "return":"void"
    },{
      "desc":"Set skin (int).",
      "func":"( int iSkin )",
      "name":"SetSkin",
      "return":"void"
    }],
  "CInfoPlayerStartDota":[{
      "desc":"Returns whether the object is currently active",
      "func":"()",
      "name":"IsEnabled",
      "return":"bool"
    },{
      "desc":"Enable or disable the obstruction",
      "func":"( bool bEnabled )",
      "name":"SetEnabled",
      "return":"void"
    }],
  "CScriptPrecacheContext":[{
      "desc":"Precaches a specific resource",
      "func":"( string_1 )",
      "name":"AddResource",
      "return":"void"
    },{
      "desc":"Reads a spawn key",
      "func":"( string_1 )",
      "name":"GetValue",
      "return":"table"
    }],
  "CDOTA_ShopTrigger":[{
      "desc":"Get the DOTA_SHOP_TYPE",
      "func":"()",
      "name":"GetShopType",
      "return":"int"
    },{
      "desc":"Set the DOTA_SHOP_TYPE.",
      "func":"( int eShopType )",
      "name":"SetShopType",
      "return":"void"
    }],
  "CPointWorldText":[{
      "desc":"Set the message on this entity.",
      "func":"( string pMessage )",
      "name":"SetMessage",
      "return":"void"
    }],
  "CEnvEntityMaker":[{
      "desc":"Create an entity at the location of the maker",
      "func":"()",
      "name":"SpawnEntity",
      "return":"void"
    },{
      "desc":"Create an entity at the location of a specified entity instance",
      "func":"( handle hEntity )",
      "name":"SpawnEntityAtEntityOrigin",
      "return":"void"
    },{
      "desc":"Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)",
      "func":"( Vector vecAlternateOrigin, Vector vecAlternateAngles )",
      "name":"SpawnEntityAtLocation",
      "return":"void"
    },{
      "desc":"Create an entity at the location of a named entity",
      "func":"( string pszName )",
      "name":"SpawnEntityAtNamedEntityOrigin",
      "return":"void"
    }],
  "CDOTA_BaseNPC_Creature":[{
      "desc":"Add the specified item drop to this creature.",
      "func":"( handle hDropData )",
      "name":"AddItemDrop",
      "return":"void"
    },{
      "desc":"Level the creature up by the specified number of levels",
      "func":"( int iLevels )",
      "name":"CreatureLevelUp",
      "return":"void"
    },{
      "desc":"Set creature's current disable resistance",
      "func":"()",
      "name":"GetDisableResistance",
      "return":"float"
    },{
      "desc":"Set creature's current disable resistance from ultimates",
      "func":"()",
      "name":"GetUltimateDisableResistance",
      "return":"float"
    },{
      "desc":"Is this unit a champion?",
      "func":"()",
      "name":"IsChampion",
      "return":"bool"
    },{
      "desc":"Is this creature respawning?",
      "func":"()",
      "name":"IsReincarnating",
      "return":"bool"
    },{
      "desc":"Remove all item drops from this creature.",
      "func":"()",
      "name":"RemoveAllItemDrops",
      "return":"void"
    },{
      "desc":"Set the armor gained per level on this creature.",
      "func":"( float flArmorGain )",
      "name":"SetArmorGain",
      "return":"void"
    },{
      "desc":"Set the attack time gained per level on this creature.",
      "func":"( float flAttackTimeGain )",
      "name":"SetAttackTimeGain",
      "return":"void"
    },{
      "desc":"Set the bounty gold gained per level on this creature.",
      "func":"( int nBountyGain )",
      "name":"SetBountyGain",
      "return":"void"
    },{
      "desc":"Flag this unit as a champion creature.",
      "func":"( bool bIsChampion )",
      "name":"SetChampion",
      "return":"void"
    },{
      "desc":"Set the damage gained per level on this creature.",
      "func":"( int nDamageGain )",
      "name":"SetDamageGain",
      "return":"void"
    },{
      "desc":"Set creature's current disable resistance",
      "func":"( float flDisableResistance )",
      "name":"SetDisableResistance",
      "return":"void"
    },{
      "desc":"Set the disable resistance gained per level on this creature.",
      "func":"( float flDisableResistanceGain )",
      "name":"SetDisableResistanceGain",
      "return":"void"
    },{
      "desc":"Set the hit points gained per level on this creature.",
      "func":"( int nHPGain )",
      "name":"SetHPGain",
      "return":"void"
    },{
      "desc":"Set the hit points regen gained per level on this creature.",
      "func":"( float flHPRegenGain )",
      "name":"SetHPRegenGain",
      "return":"void"
    },{
      "desc":"Set the magic resistance gained per level on this creature.",
      "func":"( float flMagicResistanceGain )",
      "name":"SetMagicResistanceGain",
      "return":"void"
    },{
      "desc":"Set the mana points gained per level on this creature.",
      "func":"( int nManaGain )",
      "name":"SetManaGain",
      "return":"void"
    },{
      "desc":"Set the mana points regen gained per level on this creature.",
      "func":"( float flManaRegenGain )",
      "name":"SetManaRegenGain",
      "return":"void"
    },{
      "desc":"Set the move speed gained per level on this creature.",
      "func":"( int nMoveSpeedGain )",
      "name":"SetMoveSpeedGain",
      "return":"void"
    },{
      "desc":"Set whether creatures require reaching their end path before becoming idle",
      "func":"( bool bRequiresReachingEndPath )",
      "name":"SetRequiresReachingEndPath",
      "return":"void"
    },{
      "desc":"Set creature's current disable resistance from ultimates",
      "func":"( float flUltDisableResistance )",
      "name":"SetUltimateDisableResistance",
      "return":"void"
    },{
      "desc":"Set the XP gained per level on this creature.",
      "func":"( int nXPGain )",
      "name":"SetXPGain",
      "return":"void"
    }],
  "CDOTA_Ability_DataDriven":[{
      "desc":"Applies a data driven modifier to the target",
      "func":"( handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable )",
      "name":"ApplyDataDrivenModifier",
      "return":"handle"
    },{
      "desc":"Applies a data driven thinker at the location",
      "func":"( handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable )",
      "name":"ApplyDataDrivenThinker",
      "return":"handle"
    }],
  "CDOTA_Unit_Nian":[{
      "desc":"Is the Nian horn?",
      "func":"()",
      "name":"GetHorn",
      "return":"handle"
    },{
      "desc":"Is the Nian's tail broken?",
      "func":"()",
      "name":"GetTail",
      "return":"handle"
    },{
      "desc":"Is the Nian's horn broken?",
      "func":"()",
      "name":"IsHornAlive",
      "return":"bool"
    },{
      "desc":"Is the Nian's tail broken?",
      "func":"()",
      "name":"IsTailAlive",
      "return":"bool"
    }],
  "CTakeDamageInfo":[{
      "desc":"",
      "func":"( float flAddAmount )",
      "name":"AddDamage",
      "return":"void"
    },{
      "desc":"",
      "func":"( int bitsDamageType )",
      "name":"AddDamageType",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"AllowFriendlyFire",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"BaseDamageIsValid",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"CanBeBlocked",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAmmoType",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttacker",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseDamage",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamage",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamageCustom",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamageForce",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamagePosition",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamageTaken",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDamageType",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetInflictor",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetMaxDamage",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetOriginalDamage",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetRadius",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetReportedPosition",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStabilityDamage",
      "return":"float"
    },{
      "desc":"",
      "func":"( int bitsToTest )",
      "name":"HasDamageType",
      "return":"bool"
    },{
      "desc":"",
      "func":"( float flScaleAmount )",
      "name":"ScaleDamage",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bAllow )",
      "name":"SetAllowFriendlyFire",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iAmmoType )",
      "name":"SetAmmoType",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hAttacker )",
      "name":"SetAttacker",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bBlock )",
      "name":"SetCanBeBlocked",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flDamage )",
      "name":"SetDamage",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iDamageCustom )",
      "name":"SetDamageCustom",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector damageForce )",
      "name":"SetDamageForce",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector damagePosition )",
      "name":"SetDamagePosition",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nDamageTaken )",
      "name":"SetDamageTaken",
      "return":"void"
    },{
      "desc":"",
      "func":"( int bitsDamageType )",
      "name":"SetDamageType",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flMaxDamage )",
      "name":"SetMaxDamage",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flOriginalDamage )",
      "name":"SetOriginalDamage",
      "return":"void"
    },{
      "desc":"",
      "func":"( float fRadius )",
      "name":"SetRadius",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector reportedPosition )",
      "name":"SetReportedPosition",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flStabilityDamage )",
      "name":"SetStabilityDamage",
      "return":"void"
    }],
  "CDOTA_CustomUIManager":[{
      "desc":"Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )",
      "func":"( int_1, string_2, string_3, handle_4 )",
      "name":"DynamicHud_Create",
      "return":"void"
    },{
      "desc":"Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )",
      "func":"( int_1, string_2 )",
      "name":"DynamicHud_Destroy",
      "return":"void"
    },{
      "desc":"Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )",
      "func":"( int_1, string_2, handle_3 )",
      "name":"DynamicHud_SetDialogVariables",
      "return":"void"
    },{
      "desc":"Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )",
      "func":"( int_1, string_2, bool_3 )",
      "name":"DynamicHud_SetVisible",
      "return":"void"
    }],
  "CDOTAGameManager":[{
      "desc":"Get the hero unit ",
      "func":"( string_1 )",
      "name":"GetHeroDataByName_Script",
      "return":"table"
    },{
      "desc":"Get the hero ID given the hero name.",
      "func":"( string_1 )",
      "name":"GetHeroIDByName",
      "return":"int"
    },{
      "desc":"Get the hero name given a hero ID.",
      "func":"( int_1 )",
      "name":"GetHeroNameByID",
      "return":"string"
    },{
      "desc":"Get the hero name given a unit name.",
      "func":"( string_1 )",
      "name":"GetHeroNameForUnitName",
      "return":"string"
    },{
      "desc":"Get the hero unit name given the hero ID.",
      "func":"( int_1 )",
      "name":"GetHeroUnitNameByID",
      "return":"string"
    }],
  "CDOTA_MapTree":[{
      "desc":"Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)",
      "func":"( int nTeamNumberKnownTo )",
      "name":"CutDown",
      "return":"void"
    },{
      "desc":"Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)",
      "func":"( float flRegrowAfter, int nTeamNumberKnownTo )",
      "name":"CutDownRegrowAfter",
      "return":"void"
    },{
      "desc":"Grows back the tree if it was cut down.",
      "func":"()",
      "name":"GrowBack",
      "return":"void"
    },{
      "desc":"Returns true if the tree is standing, false if it has been cut down",
      "func":"()",
      "name":"IsStanding",
      "return":"bool"
    }],
  "CEnvProjectedTexture":[{
      "desc":"Set light maximum range",
      "func":"( float flRange )",
      "name":"SetFarRange",
      "return":"void"
    },{
      "desc":"Set light linear attenuation value",
      "func":"( float flAtten )",
      "name":"SetLinearAttenuation",
      "return":"void"
    },{
      "desc":"Set light minimum range",
      "func":"( float flRange )",
      "name":"SetNearRange",
      "return":"void"
    },{
      "desc":"Set light quadratic attenuation value",
      "func":"( float flAtten )",
      "name":"SetQuadraticAttenuation",
      "return":"void"
    },{
      "desc":"Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset",
      "func":"( bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset )",
      "name":"SetVolumetrics",
      "return":"void"
    }],
  "Vector":[{
      "desc":"Returns the vector normalized",
      "func":"( Vector a, Vector b )",
      "name":"Cross",
      "return":"Vector"
    },{
      "desc":"Dot product of two vectors",
      "func":"( Vector a, Vector b )",
      "name":"Dot",
      "return":"float"
    },{
      "desc":"Length of the Vector",
      "func":"()",
      "name":"Length",
      "return":"float"
    },{
      "desc":"Length of the Vector in the XY plane",
      "func":"()",
      "name":"Length2D",
      "return":"float"
    },{
      "desc":"Returns the vector normalized",
      "func":"()",
      "name":"Normalized",
      "return":"Vector"
    },{
      "desc":"Overloaded +. Adds vectors together",
      "func":"( Vector a, Vector b )",
      "name":"__add",
      "return":"Vector"
    },{
      "desc":"Overloaded /. Divides vectors",
      "func":"( Vector a, Vector b )",
      "name":"__div",
      "return":"Vector"
    },{
      "desc":"Dot product of two vectors",
      "func":"( Vector a, Vector b )",
      "name":"__eq",
      "return":"bool"
    },{
      "desc":"Overloaded # returns the length of the vector",
      "func":"()",
      "name":"__len",
      "return":"float"
    },{
      "desc":"Overloaded * returns the vectors multiplied together",
      "func":"( Vector a, Vector b )",
      "name":"__mul",
      "return":"Vector"
    },{
      "desc":"Overloaded -. Subtracts vectors",
      "func":"( Vector a, Vector b )",
      "name":"__sub",
      "return":"Vector"
    },{
      "desc":"Overloaded .. Converts vectors to strings",
      "func":"()",
      "name":"__tostring",
      "return":"string"
    },{
      "desc":"Overloaded - operator",
      "func":"()",
      "name":"__unm",
      "return":"Vector"
    }],
  "CDOTA_Ability_Animation_TailSpin":[{
      "desc":"Override playbackrate",
      "func":"( float flRate )",
      "name":"SetPlaybackRate",
      "return":"void"
    }],
  "CDOTA_Item_DataDriven":[{
      "desc":"Applies a data driven modifier to the target",
      "func":"( handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable )",
      "name":"ApplyDataDrivenModifier",
      "return":"void"
    },{
      "desc":"Applies a data driven thinker at the location",
      "func":"( handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable )",
      "name":"ApplyDataDrivenThinker",
      "return":"handle"
    }],
  "CDOTA_Modifier_Lua_Motion_Both":[{
      "desc":"Starts the horizontal motion controller effects for this buff.  Returns true if successful.",
      "func":"()",
      "name":"ApplyHorizontalMotionController",
      "return":"bool"
    },{
      "desc":"Starts the vertical motion controller effects for this buff.  Returns true if successful.",
      "func":"()",
      "name":"ApplyVerticalMotionController",
      "return":"bool"
    },{
      "desc":"Get the priority",
      "func":"()",
      "name":"GetPriority",
      "return":"int"
    },{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnHorizontalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnVerticalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Set the priority",
      "func":"( int nMotionPriority )",
      "name":"SetPriority",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateHorizontalMotion",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateVerticalMotion",
      "return":"void"
    }],
  "CDOTA_ItemSpawner":[{
      "desc":"Returns the item name",
      "func":"()",
      "name":"GetItemName",
      "return":"string"
    }],
  "CDOTA_SimpleObstruction":[{
      "desc":"Returns whether the obstruction is currently active",
      "func":"()",
      "name":"IsEnabled",
      "return":"bool"
    },{
      "desc":"Enable or disable the obstruction",
      "func":"( bool bEnabled, bool bForce )",
      "name":"SetEnabled",
      "return":"void"
    }],
  "CDOTA_Unit_Diretide_Portal":[{
      "desc":"",
      "func":"()",
      "name":"GetPartnerPortal",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"ResetPortal",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nRuneType )",
      "name":"SetInvasionRuneType",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hPortal )",
      "name":"SetPartnerPortal",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bActive )",
      "name":"SetPortalActive",
      "return":"void"
    }],
  "CLogicRelay":[{
      "desc":"Trigger( hActivator, hCaller ) : Triggers the logic_relay",
      "func":"( handle hActivator, handle hCaller )",
      "name":"Trigger",
      "return":"void"
    }],
  "CDebugOverlayScriptHelper":[{
      "desc":"Draws an axis. Specify origin + orientation in world space.",
      "func":"( Vector_1, Quaternion_2, float_3, bool_4, float_5 )",
      "name":"Axis",
      "return":"void"
    },{
      "desc":"Draws a world-space axis-aligned box. Specify bounds in world space.",
      "func":"( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"Box",
      "return":"void"
    },{
      "desc":"Draws an oriented box at the origin. Specify bounds in local space.",
      "func":"( Vector_1, Vector_2, Vector_3, Quaternion_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"BoxAngles",
      "return":"void"
    },{
      "desc":"Draws a capsule. Specify base in world space.",
      "func":"( Vector_1, Quaternion_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"Capsule",
      "return":"void"
    },{
      "desc":"Draws a circle. Specify center in world space.",
      "func":"( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"Circle",
      "return":"void"
    },{
      "desc":"Draws a circle oriented to the screen. Specify center in world space.",
      "func":"( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"CircleScreenOriented",
      "return":"void"
    },{
      "desc":"Draws a wireframe cone. Specify endpoint and direction in world space.",
      "func":"( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"Cone",
      "return":"void"
    },{
      "desc":"Draws a screen-aligned cross. Specify origin in world space.",
      "func":"( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"Cross",
      "return":"void"
    },{
      "desc":"Draws a world-aligned cross. Specify origin in world space.",
      "func":"( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"Cross3D",
      "return":"void"
    },{
      "desc":"Draws an oriented cross. Specify origin in world space.",
      "func":"( Vector_1, Quaternion_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"Cross3DOriented",
      "return":"void"
    },{
      "desc":"Draws a dashed line. Specify endpoints in world space.",
      "func":"( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"DrawTickMarkedLine",
      "return":"void"
    },{
      "desc":"Draws the attachments of the entity",
      "func":"( ehandle_1, float_2, float_3 )",
      "name":"EntityAttachments",
      "return":"void"
    },{
      "desc":"Draws the axis of the entity origin",
      "func":"( ehandle_1, float_2, bool_3, float_4 )",
      "name":"EntityAxis",
      "return":"void"
    },{
      "desc":"Draws bounds of an entity",
      "func":"( ehandle_1, int_2, int_3, int_4, int_5, bool_6, float_7 )",
      "name":"EntityBounds",
      "return":"void"
    },{
      "desc":"Draws the skeleton of the entity",
      "func":"( ehandle_1, float_2 )",
      "name":"EntitySkeleton",
      "return":"void"
    },{
      "desc":"Draws text on an entity",
      "func":"( ehandle_1, int_2, string_3, int_4, int_5, int_6, int_7, float_8 )",
      "name":"EntityText",
      "return":"void"
    },{
      "desc":"Draws a screen-space filled 2D rectangle. Coordinates are in pixels.",
      "func":"( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
      "name":"FilledRect2D",
      "return":"void"
    },{
      "desc":"Draws a horizontal arrow. Specify endpoints in world space.",
      "func":"( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"HorzArrow",
      "return":"void"
    },{
      "desc":"Draws a line between two points",
      "func":"( Vector_1, Vector_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"Line",
      "return":"void"
    },{
      "desc":"Draws a line between two points in screenspace",
      "func":"( Vector2D_1, Vector2D_2, int_3, int_4, int_5, int_6, float_7 )",
      "name":"Line2D",
      "return":"void"
    },{
      "desc":"Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
      "func":"()",
      "name":"PopDebugOverlayScope",
      "return":"void"
    },{
      "desc":"Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.",
      "func":"( utlstringtoken_1 )",
      "name":"PushAndClearDebugOverlayScope",
      "return":"void"
    },{
      "desc":"Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
      "func":"( utlstringtoken_1 )",
      "name":"PushDebugOverlayScope",
      "return":"void"
    },{
      "desc":"Removes all overlays marked with a specific identifier, regardless of their lifetime.",
      "func":"( utlstringtoken_1 )",
      "name":"RemoveAllInScope",
      "return":"void"
    },{
      "desc":"Draws a solid cone. Specify endpoint and direction in world space.",
      "func":"( Vector_1, Vector_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"SolidCone",
      "return":"void"
    },{
      "desc":"Draws a wireframe sphere. Specify center in world space.",
      "func":"( Vector_1, float_2, int_3, int_4, int_5, int_6, bool_7, float_8 )",
      "name":"Sphere",
      "return":"void"
    },{
      "desc":"Draws a swept box. Specify endpoints in world space and the bounds in local space.",
      "func":"( Vector_1, Vector_2, Vector_3, Vector_4, Quaternion_5, int_6, int_7, int_8, int_9, float_10 )",
      "name":"SweptBox",
      "return":"void"
    },{
      "desc":"Draws 2D text. Specify origin in world space.",
      "func":"( Vector_1, int_2, string_3, float_4, int_5, int_6, int_7, int_8, float_9 )",
      "name":"Text",
      "return":"void"
    },{
      "desc":"Draws a screen-space texture. Coordinates are in pixels.",
      "func":"( string_1, Vector2D_2, Vector2D_3, int_4, int_5, int_6, int_7, Vector2D_8, Vector2D_9, float_10 )",
      "name":"Texture",
      "return":"void"
    },{
      "desc":"Draws a filled triangle. Specify vertices in world space.",
      "func":"( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"Triangle",
      "return":"void"
    },{
      "desc":"Toggles the overlay render type, for unit tests",
      "func":"()",
      "name":"UnitTestCycleOverlayRenderType",
      "return":"void"
    },{
      "desc":"Draws 3D text. Specify origin + orientation in world space.",
      "func":"( Vector_1, Quaternion_2, string_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"VectorText3D",
      "return":"void"
    },{
      "desc":"Draws a vertical arrow. Specify endpoints in world space.",
      "func":"( Vector_1, Vector_2, float_3, int_4, int_5, int_6, int_7, bool_8, float_9 )",
      "name":"VertArrow",
      "return":"void"
    },{
      "desc":"Draws a arrow associated with a specific yaw. Specify endpoints in world space.",
      "func":"( Vector_1, float_2, float_3, float_4, int_5, int_6, int_7, int_8, bool_9, float_10 )",
      "name":"YawArrow",
      "return":"void"
    }],
  "CDOTA_Ability_Aghanim_Spear":[{
      "desc":"Launch Spear to a target position from a source position",
      "func":"( Vector vTarget, Vector vStart )",
      "name":"LaunchSpear",
      "return":"void"
    }],
  "CDOTA_Unit_Courier":[],
  "CDotaQuest":[{
      "desc":"Add a subquest to this quest",
      "func":"( handle hSubquest )",
      "name":"AddSubquest",
      "return":"void"
    },{
      "desc":"Mark this quest complete",
      "func":"()",
      "name":"CompleteQuest",
      "return":"void"
    },{
      "desc":"Finds a subquest from this quest by index",
      "func":"( int nIndex )",
      "name":"GetSubquest",
      "return":"handle"
    },{
      "desc":"Finds a subquest from this quest by name",
      "func":"( string pszName )",
      "name":"GetSubquestByName",
      "return":"handle"
    },{
      "desc":"Remove a subquest from this quest",
      "func":"( handle hSubquest )",
      "name":"RemoveSubquest",
      "return":"void"
    },{
      "desc":"Set the text replace string for this quest",
      "func":"( string pszString )",
      "name":"SetTextReplaceString",
      "return":"void"
    },{
      "desc":"Set a quest value",
      "func":"( int valueSlot, int value )",
      "name":"SetTextReplaceValue",
      "return":"void"
    }],
  "CDOTA_BaseNPC_Trap_Ward":[{
      "desc":"Get the trap target for this entity.",
      "func":"()",
      "name":"GetTrapTarget",
      "return":"Vector"
    },{
      "desc":"Set the animation sequence for this entity.",
      "func":"( string pAnimation )",
      "name":"SetAnimation",
      "return":"void"
    }],
  "CDOTA_Ability_Nian_Dive":[{
      "desc":"Override playbackrate",
      "func":"( float flRate )",
      "name":"SetPlaybackRate",
      "return":"void"
    }],
  "CFoWBlockerRegion":[{
      "desc":"AddRectangularBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle",
      "func":"( Vector vMins, Vector vMaxs, bool bClearRegion )",
      "name":"AddRectangularBlocker",
      "return":"void"
    },{
      "desc":"AddRectangularOutlineBlocker( vMins, vMaxs, bClear ) : Sets or clears a blocker rectangle outline",
      "func":"( Vector vMins, Vector vMaxs, bool bClearRegion )",
      "name":"AddRectangularOutlineBlocker",
      "return":"void"
    }],
  "CEntityScriptFramework":[],
  "CMarkupVolumeTagged":[{
      "desc":"Does this volume have the given tag.",
      "func":"( string pszTagName )",
      "name":"HasTag",
      "return":"bool"
    }],
  "GlobalSys":[{
      "desc":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
      "func":"( string_1 )",
      "name":"CommandLineCheck",
      "return":"table"
    },{
      "desc":"CommandLineFloat(name) : returns the command line param as a float.",
      "func":"( string_1, float_2 )",
      "name":"CommandLineFloat",
      "return":"table"
    },{
      "desc":"CommandLineInt(name) : returns the command line param as an int.",
      "func":"( string_1, int_2 )",
      "name":"CommandLineInt",
      "return":"table"
    },{
      "desc":"CommandLineStr(name) : returns the command line param as a string.",
      "func":"( string_1, string_2 )",
      "name":"CommandLineStr",
      "return":"table"
    }],
  "CPointTemplate":[{
      "desc":"DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.",
      "func":"()",
      "name":"DeleteCreatedSpawnGroups",
      "return":"void"
    },{
      "desc":"ForceSpawn() : Spawns all of the entities the point_template is pointing at.",
      "func":"()",
      "name":"ForceSpawn",
      "return":"void"
    },{
      "desc":"GetSpawnedEntities() : Get the list of the most recent spawned entities",
      "func":"()",
      "name":"GetSpawnedEntities",
      "return":"handle"
    },{
      "desc":"SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.",
      "func":"( handle hCallbackFunc, handle hCallbackScope )",
      "name":"SetSpawnCallback",
      "return":"void"
    }],
  "CDOTAPlayer":[{
      "desc":"Attempt to spawn the appropriate couriers for this mode.",
      "func":"( handle hHero )",
      "name":"CheckForCourierSpawning",
      "return":"void"
    },{
      "desc":"Get the player's hero.",
      "func":"()",
      "name":"GetAssignedHero",
      "return":"handle"
    },{
      "desc":"Get the player's official PlayerID; notably is -1 when the player isn't yet on a team.",
      "func":"()",
      "name":"GetPlayerID",
      "return":"int"
    },{
      "desc":"Randoms this player's hero.",
      "func":"()",
      "name":"MakeRandomHeroSelection",
      "return":"void"
    },{
      "desc":"Sets this player's hero .",
      "func":"( handle hHero )",
      "name":"SetAssignedHeroEntity",
      "return":"void"
    },{
      "desc":"Set the kill cam unit for this hero.",
      "func":"( handle hEntity )",
      "name":"SetKillCamUnit",
      "return":"void"
    },{
      "desc":"(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off.",
      "func":"( int nMusicStatus, float flIntensity )",
      "name":"SetMusicStatus",
      "return":"void"
    },{
      "desc":"Sets this player's hero selection.",
      "func":"( string pszHeroName )",
      "name":"SetSelectedHero",
      "return":"void"
    },{
      "desc":"Spawn a courier for this player at the given position.",
      "func":"( Vector vLocation )",
      "name":"SpawnCourierAtPosition",
      "return":"handle"
    }],
  "CBodyComponent":[{
      "desc":"Apply an impulse at a worldspace position to the physics",
      "func":"( Vector_1, Vector_2 )",
      "name":"AddImpulseAtPosition",
      "return":"void"
    },{
      "desc":"Add linear and angular velocity to the physics object",
      "func":"( Vector_1, Vector_2 )",
      "name":"AddVelocity",
      "return":"void"
    },{
      "desc":"Detach from its parent",
      "func":"()",
      "name":"DetachFromParent",
      "return":"void"
    },{
      "desc":"Returns the active sequence",
      "func":"()",
      "name":"GetSequence",
      "return":"<unknown>"
    },{
      "desc":"Is attached to parent",
      "func":"()",
      "name":"IsAttachedToParent",
      "return":"bool"
    },{
      "desc":"Returns a sequence id given a name",
      "func":"( string_1 )",
      "name":"LookupSequence",
      "return":"<unknown>"
    },{
      "desc":"Returns the duration in seconds of the specified sequence",
      "func":"( string_1 )",
      "name":"SequenceDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"( Vector_1 )",
      "name":"SetAngularVelocity",
      "return":"void"
    },{
      "desc":"Pass string for the animation to play on this model",
      "func":"( string_1 )",
      "name":"SetAnimation",
      "return":"void"
    },{
      "desc":"",
      "func":"( utlstringtoken_1 )",
      "name":"SetMaterialGroup",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector_1 )",
      "name":"SetVelocity",
      "return":"void"
    }],
  "CDOTA_Item_BagOfGold":[{
      "desc":"Set the life time of this item",
      "func":"( float flTime )",
      "name":"SetLifeTime",
      "return":"void"
    }],
  "Constants":{
    "subquest_text_replace_values_t":[{
        "desc":"",
        "name":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
        "value":0
      },{
        "desc":"",
        "name":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
        "value":1
      },{
        "desc":"",
        "name":"SUBQUEST_NUM_TEXT_REPLACE_VALUES",
        "value":2
      }],
    "DAMAGE_TYPES":[{
        "desc":"",
        "name":"DAMAGE_TYPE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DAMAGE_TYPE_PHYSICAL",
        "value":1
      },{
        "desc":"",
        "name":"DAMAGE_TYPE_MAGICAL",
        "value":2
      },{
        "desc":"",
        "name":"DAMAGE_TYPE_PURE",
        "value":4
      },{
        "desc":"",
        "name":"DAMAGE_TYPE_ALL",
        "value":7
      },{
        "desc":"",
        "name":"DAMAGE_TYPE_HP_REMOVAL",
        "value":8
      }],
    "DOTA_HeroPickState":[{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_AP_SELECT",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_SD_SELECT",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_INTRO",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN1",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN2",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN3",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN4",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN5",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN6",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN7",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN8",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN9",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN10",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN11",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN12",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN13",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN14",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT1",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT2",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT3",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT4",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT5",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT6",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT7",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT8",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT9",
        "value":29
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT10",
        "value":30
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_PICK",
        "value":31
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_AR_SELECT",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_MO_SELECT",
        "value":33
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_FH_SELECT",
        "value":34
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_INTRO",
        "value":35
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
        "value":36
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN1",
        "value":37
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN2",
        "value":38
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN3",
        "value":39
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN4",
        "value":40
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN5",
        "value":41
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN6",
        "value":42
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT1",
        "value":43
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT2",
        "value":44
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT3",
        "value":45
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT4",
        "value":46
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT5",
        "value":47
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT6",
        "value":48
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT7",
        "value":49
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT8",
        "value":50
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT9",
        "value":51
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT10",
        "value":52
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_PICK",
        "value":53
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_BD_SELECT",
        "value":54
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
        "value":55
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT",
        "value":56
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
        "value":57
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
        "value":58
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY",
        "value":59
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
        "value":60
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_COUNT",
        "value":61
      }],
    "LuaModifierType":[{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_NONE",
        "value":0
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_HORIZONTAL",
        "value":1
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_VERTICAL",
        "value":2
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_BOTH",
        "value":3
      },{
        "desc":"",
        "name":"LUA_MODIFIER_INVALID",
        "value":4
      }],
    "DOTAAbilitySpeakTrigger_t":[{
        "desc":"",
        "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_SPEAK_CAST",
        "value":1
      }],
    "DOTA_RUNES":[{
        "desc":"",
        "name":"DOTA_RUNE_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_RUNE_DOUBLEDAMAGE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_RUNE_HASTE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_RUNE_ILLUSION",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_RUNE_INVISIBILITY",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_RUNE_REGENERATION",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_RUNE_BOUNTY",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_RUNE_ARCANE",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_RUNE_XP",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_RUNE_COUNT",
        "value":8
      }],
    "EDOTA_ModifyGold_Reason":[{
        "desc":"",
        "name":"DOTA_ModifyGold_Unspecified",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_Death",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_Buyback",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_PurchaseConsumable",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_PurchaseItem",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_AbandonedRedistribute",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_SellItem",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_AbilityCost",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_CheatCommand",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_SelectionPenalty",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_GameTick",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_Building",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_HeroKill",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_CreepKill",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_NeutralKill",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_RoshanKill",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_CourierKill",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_BountyRune",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_SharedGold",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_AbilityGold",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_ModifyGold_WardKill",
        "value":20
      }],
    "UnitFilterResult":[{
        "desc":"",
        "name":"UF_SUCCESS",
        "value":0
      },{
        "desc":"",
        "name":"UF_FAIL_FRIENDLY",
        "value":1
      },{
        "desc":"",
        "name":"UF_FAIL_ENEMY",
        "value":2
      },{
        "desc":"",
        "name":"UF_FAIL_HERO",
        "value":3
      },{
        "desc":"",
        "name":"UF_FAIL_CONSIDERED_HERO",
        "value":4
      },{
        "desc":"",
        "name":"UF_FAIL_CREEP",
        "value":5
      },{
        "desc":"",
        "name":"UF_FAIL_BUILDING",
        "value":6
      },{
        "desc":"",
        "name":"UF_FAIL_COURIER",
        "value":7
      },{
        "desc":"",
        "name":"UF_FAIL_OTHER",
        "value":8
      },{
        "desc":"",
        "name":"UF_FAIL_ANCIENT",
        "value":9
      },{
        "desc":"",
        "name":"UF_FAIL_ILLUSION",
        "value":10
      },{
        "desc":"",
        "name":"UF_FAIL_SUMMONED",
        "value":11
      },{
        "desc":"",
        "name":"UF_FAIL_DOMINATED",
        "value":12
      },{
        "desc":"",
        "name":"UF_FAIL_MELEE",
        "value":13
      },{
        "desc":"",
        "name":"UF_FAIL_RANGED",
        "value":14
      },{
        "desc":"",
        "name":"UF_FAIL_DEAD",
        "value":15
      },{
        "desc":"",
        "name":"UF_FAIL_MAGIC_IMMUNE_ALLY",
        "value":16
      },{
        "desc":"",
        "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY",
        "value":17
      },{
        "desc":"",
        "name":"UF_FAIL_INVULNERABLE",
        "value":18
      },{
        "desc":"",
        "name":"UF_FAIL_IN_FOW",
        "value":19
      },{
        "desc":"",
        "name":"UF_FAIL_INVISIBLE",
        "value":20
      },{
        "desc":"",
        "name":"UF_FAIL_NOT_PLAYER_CONTROLLED",
        "value":21
      },{
        "desc":"",
        "name":"UF_FAIL_ATTACK_IMMUNE",
        "value":22
      },{
        "desc":"",
        "name":"UF_FAIL_CUSTOM",
        "value":23
      },{
        "desc":"",
        "name":"UF_FAIL_INVALID_LOCATION",
        "value":24
      },{
        "desc":"",
        "name":"UF_FAIL_DISABLE_HELP",
        "value":25
      },{
        "desc":"",
        "name":"UF_FAIL_OUT_OF_WORLD",
        "value":26
      },{
        "desc":"",
        "name":"UF_FAIL_NIGHTMARED",
        "value":27
      },{
        "desc":"",
        "name":"UF_FAIL_OBSTRUCTED",
        "value":28
      }],
    "DOTA_UNIT_TARGET_FLAGS":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_DEAD",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
        "value":16384
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
        "value":32768
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
        "value":65536
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
        "value":131072
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
        "value":262144
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
        "value":524288
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
        "value":1048576
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
        "value":2097152
      }],
    "DOTA_SHOP_TYPE":[{
        "desc":"",
        "name":"DOTA_SHOP_HOME",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_SHOP_SIDE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_SHOP_SECRET",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_SHOP_GROUND",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_SHOP_SIDE2",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_SHOP_SECRET2",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_SHOP_CUSTOM",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_SHOP_NEUTRALS",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_SHOP_NONE",
        "value":8
      }],
    "DOTAScriptInventorySlot_t":[{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_1",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_2",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_3",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_4",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_5",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_6",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_7",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_8",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_ITEM_SLOT_9",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_1",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_2",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_3",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_4",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_5",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_STASH_SLOT_6",
        "value":14
      }],
    "DOTA_UNIT_TARGET_TEAM":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_ENEMY",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_BOTH",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM",
        "value":4
      }],
    "ABILITY_TYPES":[{
        "desc":"",
        "name":"ABILITY_TYPE_BASIC",
        "value":0
      },{
        "desc":"",
        "name":"ABILITY_TYPE_ULTIMATE",
        "value":1
      },{
        "desc":"",
        "name":"ABILITY_TYPE_ATTRIBUTES",
        "value":2
      },{
        "desc":"",
        "name":"ABILITY_TYPE_HIDDEN",
        "value":3
      }],
    "Attributes":[{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLECT",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_MAX",
        "value":3
      }],
    "DOTAHUDVisibility_t":[{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_HEROES",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_ACTION_PANEL",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_SHOP_COMMONITEMS",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_TEAMS",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_GAME_NAME",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_HERO_SELECTION_CLOCK",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_MENU_BUTTONS",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_BAR_BACKGROUND",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_BAR_RADIANT_TEAM",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_BAR_DIRE_TEAM",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_BAR_SCORE",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_ENDGAME",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_ENDGAME_CHAT",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_QUICK_STATS",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_PREGAME_STRATEGYUI",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_KILLCAM",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_TOP_BAR",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_HUD_CUSTOMUI_BEHIND_HUD_ELEMENTS",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_HUD_VISIBILITY_COUNT",
        "value":29
      }],
    "DOTALimits_t":[{
        "desc":"Default number of players per team.",
        "name":"DOTA_DEFAULT_MAX_TEAM",
        "value":5
      },{
        "desc":"Default number of non-spectator players supported.",
        "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
        "value":10
      },{
        "desc":"Max number of player teams supported.",
        "name":"DOTA_MAX_PLAYER_TEAMS",
        "value":10
      },{
        "desc":"Max number of viewers in a spectator lobby.",
        "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
        "value":15
      },{
        "desc":"Max number of non-spectator players supported.",
        "name":"DOTA_MAX_TEAM_PLAYERS",
        "value":24
      },{
        "desc":"Max number of players per team.",
        "name":"DOTA_MAX_TEAM",
        "value":24
      },{
        "desc":"How many spectators can watch.",
        "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
        "value":40
      },{
        "desc":"Max number of players connected to the server including spectators.",
        "name":"DOTA_MAX_PLAYERS",
        "value":64
      }],
    "DamageCategory_t":[{
        "desc":"",
        "name":"DOTA_DAMAGE_CATEGORY_SPELL",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_CATEGORY_ATTACK",
        "value":1
      }],
    "DOTAInventoryFlags_t":[{
        "desc":"",
        "name":"DOTA_INVENTORY_ALLOW_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_ALLOW_MAIN",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_ALLOW_STASH",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_ALL_ACCESS",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
        "value":16
      }],
    "DOTAProjectileAttachment_t":[{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_1",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_2",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_HITLOCATION",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_3",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_ATTACK_4",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_PROJECTILE_ATTACHMENT_LAST",
        "value":6
      }],
    "quest_text_replace_values_t":[{
        "desc":"",
        "name":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
        "value":0
      },{
        "desc":"",
        "name":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
        "value":1
      },{
        "desc":"",
        "name":"QUEST_TEXT_REPLACE_VALUE_ROUND",
        "value":2
      },{
        "desc":"",
        "name":"QUEST_TEXT_REPLACE_VALUE_REWARD",
        "value":3
      },{
        "desc":"",
        "name":"QUEST_NUM_TEXT_REPLACE_VALUES",
        "value":4
      }],
    "modifierremove":[{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ALL",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ENEMY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ALLY",
        "value":2
      }],
    "AttributeDerivedStats":[{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_HP",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
        "value":8
      }],
    "DOTA_UNIT_TARGET_TYPE":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_HERO",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_CREEP",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_BUILDING",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_COURIER",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_BASIC",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_OTHER",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_ALL",
        "value":55
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TREE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_CUSTOM",
        "value":128
      }],
    "AdditionalContants":[{
        "desc":"",
        "name":"OVERHEAD_ALERT_BLOCK",
        "value":8
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_BLOCKED",
        "value":21
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_BONUS_POISON_DAMAGE",
        "value":9
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_BONUS_SPELL_DAMAGE",
        "value":4
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_CRITICAL",
        "value":2
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_DAMAGE",
        "value":6
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_DEATH",
        "value":20
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_DENY",
        "value":1
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_DISABLE_RESIST",
        "value":19
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_EVADE",
        "value":7
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_GOLD",
        "value":0
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_HEAL",
        "value":10
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_INCOMING_DAMAGE",
        "value":17
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_LAST_HIT_CLOSE",
        "value":14
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_LAST_HIT_EARLY",
        "value":13
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_LAST_HIT_MISS",
        "value":15
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_MAGICAL_BLOCK",
        "value":16
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_MANA_ADD",
        "value":11
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_MANA_LOSS",
        "value":12
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_MISS",
        "value":5
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_OUTGOING_DAMAGE",
        "value":18
      },{
        "desc":"",
        "name":"OVERHEAD_ALERT_XP",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_ATTACK_MOVE",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_ATTACK_TARGET",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_BUYBACK",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_NO_TARGET",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_POSITION",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_RIVER_PAINT",
        "value":35
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_RUNE",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_TARGET",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_TARGET_TREE",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_TOGGLE",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_CONTINUE",
        "value":33
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_DROP_ITEM",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_GIVE_ITEM",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_GLYPH",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_HOLD_POSITION",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_MOVE_ITEM",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_MOVE_TO_POSITION",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_MOVE_TO_TARGET",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PATROL",
        "value":29
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PICKUP_ITEM",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PICKUP_RUNE",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PING_ABILITY",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT",
        "value":36
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_PURCHASE_ITEM",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_RADAR",
        "value":31
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_SELL_ITEM",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_STOP",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_TAUNT",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_TRAIN_ABILITY",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED",
        "value":34
      },{
        "desc":"",
        "name":"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION",
        "value":30
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_ABANDONED",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_CONNECTED",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_DISCONNECTED",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_FAILED",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_LOADING",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_CONNECTION_STATE_UNKNOWN",
        "value":0
      },{
        "desc":"",
        "name":"DMG_ACID",
        "value":1048576
      },{
        "desc":"",
        "name":"DMG_AIRBOAT"
      },{
        "desc":"",
        "name":"DMG_ALWAYSGIB",
        "value":8192
      },{
        "desc":"",
        "name":"DMG_BLAST",
        "value":64
      },{
        "desc":"",
        "name":"DMG_BLAST_SURFACE"
      },{
        "desc":"",
        "name":"DMG_BUCKSHOT"
      },{
        "desc":"",
        "name":"DMG_BULLET",
        "value":2
      },{
        "desc":"",
        "name":"DMG_BURN",
        "value":8
      },{
        "desc":"",
        "name":"DMG_CLUB",
        "value":128
      },{
        "desc":"",
        "name":"DMG_CRUSH",
        "value":1
      },{
        "desc":"",
        "name":"DMG_DIRECT"
      },{
        "desc":"",
        "name":"DMG_DISSOLVE"
      },{
        "desc":"",
        "name":"DMG_DROWN",
        "value":16384
      },{
        "desc":"",
        "name":"DMG_DROWNRECOVER",
        "value":524288
      },{
        "desc":"",
        "name":"DMG_ENERGYBEAM",
        "value":1024
      },{
        "desc":"",
        "name":"DMG_FALL",
        "value":32
      },{
        "desc":"",
        "name":"DMG_GENERIC",
        "value":0
      },{
        "desc":"",
        "name":"DMG_NERVEGAS",
        "value":65536
      },{
        "desc":"",
        "name":"DMG_NEVERGIB",
        "value":4096
      },{
        "desc":"",
        "name":"DMG_PARALYZE",
        "value":32768
      },{
        "desc":"",
        "name":"DMG_PHYSGUN",
        "value":8388608
      },{
        "desc":"",
        "name":"DMG_PLASMA",
        "value":16777216
      },{
        "desc":"",
        "name":"DMG_POISON",
        "value":131072
      },{
        "desc":"",
        "name":"DMG_PREVENT_PHYSICS_FORCE",
        "value":2048
      },{
        "desc":"",
        "name":"DMG_RADIATION",
        "value":262144
      },{
        "desc":"",
        "name":"DMG_REMOVENORAGDOLL",
        "value":4194304
      },{
        "desc":"",
        "name":"DMG_SHOCK",
        "value":256
      },{
        "desc":"",
        "name":"DMG_SLASH",
        "value":4
      },{
        "desc":"",
        "name":"DMG_SLOWBURN",
        "value":2097152
      },{
        "desc":"",
        "name":"DMG_SONIC",
        "value":512
      },{
        "desc":"",
        "name":"DMG_VEHICLE",
        "value":16
      }],
    "modifierstate":[{
        "desc":"",
        "name":"MODIFIER_STATE_ROOTED",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_STATE_DISARMED",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_STATE_ATTACK_IMMUNE",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_STATE_SILENCED",
        "value":3
      },{
        "desc":"",
        "name":"MODIFIER_STATE_MUTED",
        "value":4
      },{
        "desc":"",
        "name":"MODIFIER_STATE_STUNNED",
        "value":5
      },{
        "desc":"",
        "name":"MODIFIER_STATE_HEXED",
        "value":6
      },{
        "desc":"",
        "name":"MODIFIER_STATE_INVISIBLE",
        "value":7
      },{
        "desc":"",
        "name":"MODIFIER_STATE_INVULNERABLE",
        "value":8
      },{
        "desc":"",
        "name":"MODIFIER_STATE_MAGIC_IMMUNE",
        "value":9
      },{
        "desc":"",
        "name":"MODIFIER_STATE_PROVIDES_VISION",
        "value":10
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NIGHTMARED",
        "value":11
      },{
        "desc":"",
        "name":"MODIFIER_STATE_BLOCK_DISABLED",
        "value":12
      },{
        "desc":"",
        "name":"MODIFIER_STATE_EVADE_DISABLED",
        "value":13
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNSELECTABLE",
        "value":14
      },{
        "desc":"",
        "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
        "value":15
      },{
        "desc":"",
        "name":"MODIFIER_STATE_CANNOT_MISS",
        "value":16
      },{
        "desc":"",
        "name":"MODIFIER_STATE_SPECIALLY_DENIABLE",
        "value":17
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FROZEN",
        "value":18
      },{
        "desc":"",
        "name":"MODIFIER_STATE_COMMAND_RESTRICTED",
        "value":19
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NOT_ON_MINIMAP",
        "value":20
      },{
        "desc":"",
        "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY",
        "value":21
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_HEALTH_BAR",
        "value":22
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FLYING",
        "value":23
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_UNIT_COLLISION",
        "value":24
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO",
        "value":25
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_TEAM_SELECT",
        "value":26
      },{
        "desc":"",
        "name":"MODIFIER_STATE_PASSIVES_DISABLED",
        "value":27
      },{
        "desc":"",
        "name":"MODIFIER_STATE_DOMINATED",
        "value":28
      },{
        "desc":"",
        "name":"MODIFIER_STATE_BLIND",
        "value":29
      },{
        "desc":"",
        "name":"MODIFIER_STATE_OUT_OF_GAME",
        "value":30
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FAKE_ALLY",
        "value":31
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
        "value":32
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE",
        "value":33
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNTARGETABLE",
        "value":34
      },{
        "desc":"",
        "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
        "value":35
      },{
        "desc":"",
        "name":"MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES",
        "value":36
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
        "value":37
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNSLOWABLE",
        "value":38
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TETHERED",
        "value":39
      },{
        "desc":"",
        "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS",
        "value":40
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FEARED",
        "value":41
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TAUNTED",
        "value":42
      },{
        "desc":"",
        "name":"MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED",
        "value":43
      },{
        "desc":"",
        "name":"MODIFIER_STATE_LAST",
        "value":44
      }],
    "modifierpriority":[{
        "desc":"",
        "name":"MODIFIER_PRIORITY_LOW",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_NORMAL",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_HIGH",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_ULTRA",
        "value":3
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_SUPER_ULTRA",
        "value":4
      }],
    "DOTAMusicStatus_t":[{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_EXPLORATION",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_BATTLE",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_DEAD",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_MUSIC_STATUS_LAST",
        "value":5
      }],
    "DOTAModifierAttribute_t":[{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_PERMANENT",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_MULTIPLE",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
        "value":4
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY",
        "value":8
      }],
    "DOTAMinimapEvent_t":[{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_BASE_GLYPHED",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_HINT_LOCATION",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_RADAR",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_RADAR_TARGET",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_MINIMAP_EVENT_MOVE_TO_TARGET",
        "value":16384
      }],
    "attackfail":[{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_NO",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_TERRAIN_MISS",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_SOURCE_MISS",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_EVADED",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_INVULNERABLE",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_TARGET_OUT_OF_RANGE",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_CANNOT_FAIL",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_ATTACK_RECORD_FAIL_BLOCKED_BY_OBSTRUCTION",
        "value":7
      }],
    "DOTASpeechType_t":[{
        "desc":"",
        "name":"DOTA_SPEECH_USER_INVALID",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_SINGLE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_TEAM",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_TEAM_NEARBY",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_NEARBY",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_ALL",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_SPEECH_GOOD_TEAM",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_SPEECH_BAD_TEAM",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_SPEECH_SPECTATOR",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_TEAM_NOSPECTATOR",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX",
        "value":10
      }],
    "DotaDefaultUIElement_t":[{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_TIMEOFDAY",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_HEROES",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_FLYOUT_SCOREBOARD",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_ACTION_PANEL",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_ACTION_MINIMAP",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_PANEL",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_SHOP",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_ITEMS",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_QUICKBUY",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_COURIER",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_PROTECT",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_INVENTORY_GOLD",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_SHOP_SUGGESTEDITEMS",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_SHOP_COMMONITEMS",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_HERO_SELECTION_TEAMS",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_HERO_SELECTION_GAME_NAME",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_HERO_SELECTION_CLOCK",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_MENU_BUTTONS",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_BAR_BACKGROUND",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_BAR_RADIANT_TEAM",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_BAR_DIRE_TEAM",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_BAR_SCORE",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_ENDGAME",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_ENDGAME_CHAT",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_QUICK_STATS",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_PREGAME_STRATEGYUI",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_KILLCAM",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_TOP_BAR",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_CUSTOMUI_BEHIND_HUD_ELEMENTS",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_DEFAULT_UI_ELEMENT_COUNT",
        "value":29
      }],
    "GameActivity_t":[{
        "desc":"",
        "name":"ACT_DOTA_IDLE",
        "value":1500
      },{
        "desc":"",
        "name":"ACT_DOTA_IDLE_RARE",
        "value":1501
      },{
        "desc":"",
        "name":"ACT_DOTA_RUN",
        "value":1502
      },{
        "desc":"",
        "name":"ACT_DOTA_ATTACK",
        "value":1503
      },{
        "desc":"",
        "name":"ACT_DOTA_ATTACK2",
        "value":1504
      },{
        "desc":"",
        "name":"ACT_DOTA_ATTACK_EVENT",
        "value":1505
      },{
        "desc":"",
        "name":"ACT_DOTA_DIE",
        "value":1506
      },{
        "desc":"",
        "name":"ACT_DOTA_FLINCH",
        "value":1507
      },{
        "desc":"",
        "name":"ACT_DOTA_FLAIL",
        "value":1508
      },{
        "desc":"",
        "name":"ACT_DOTA_DISABLED",
        "value":1509
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_1",
        "value":1510
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2",
        "value":1511
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_3",
        "value":1512
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_4",
        "value":1513
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_5",
        "value":1514
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_6",
        "value":1515
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_ABILITY_1",
        "value":1516
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_ABILITY_2",
        "value":1517
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_ABILITY_3",
        "value":1518
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_ABILITY_4",
        "value":1519
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_1",
        "value":1520
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_2",
        "value":1521
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_3",
        "value":1522
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_4",
        "value":1523
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_5",
        "value":1524
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_6",
        "value":1525
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_1",
        "value":1526
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_2",
        "value":1527
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_3",
        "value":1528
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_4",
        "value":1529
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_5",
        "value":1530
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_END_ABILITY_6",
        "value":1531
      },{
        "desc":"",
        "name":"ACT_DOTA_CONSTANT_LAYER",
        "value":1532
      },{
        "desc":"",
        "name":"ACT_DOTA_CAPTURE",
        "value":1533
      },{
        "desc":"",
        "name":"ACT_DOTA_SPAWN",
        "value":1534
      },{
        "desc":"",
        "name":"ACT_DOTA_KILLTAUNT",
        "value":1535
      },{
        "desc":"",
        "name":"ACT_DOTA_TAUNT",
        "value":1536
      },{
        "desc":"",
        "name":"ACT_DOTA_THIRST",
        "value":1537
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_DRAGONBREATH",
        "value":1538
      },{
        "desc":"",
        "name":"ACT_DOTA_ECHO_SLAM",
        "value":1539
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_1_END",
        "value":1540
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2_END",
        "value":1541
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_3_END",
        "value":1542
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_4_END",
        "value":1543
      },{
        "desc":"",
        "name":"ACT_MIRANA_LEAP_END",
        "value":1544
      },{
        "desc":"",
        "name":"ACT_WAVEFORM_START",
        "value":1545
      },{
        "desc":"",
        "name":"ACT_WAVEFORM_END",
        "value":1546
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_ROT",
        "value":1547
      },{
        "desc":"",
        "name":"ACT_DOTA_DIE_SPECIAL",
        "value":1548
      },{
        "desc":"",
        "name":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
        "value":1549
      },{
        "desc":"",
        "name":"ACT_DOTA_RATTLETRAP_POWERCOGS",
        "value":1550
      },{
        "desc":"",
        "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
        "value":1551
      },{
        "desc":"",
        "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
        "value":1552
      },{
        "desc":"",
        "name":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
        "value":1553
      },{
        "desc":"",
        "name":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
        "value":1554
      },{
        "desc":"",
        "name":"ACT_DOTA_TINKER_REARM1",
        "value":1555
      },{
        "desc":"",
        "name":"ACT_DOTA_TINKER_REARM2",
        "value":1556
      },{
        "desc":"",
        "name":"ACT_DOTA_TINKER_REARM3",
        "value":1557
      },{
        "desc":"",
        "name":"ACT_TINY_AVALANCHE",
        "value":1558
      },{
        "desc":"",
        "name":"ACT_TINY_TOSS",
        "value":1559
      },{
        "desc":"",
        "name":"ACT_TINY_GROWL",
        "value":1560
      },{
        "desc":"",
        "name":"ACT_DOTA_WEAVERBUG_ATTACH",
        "value":1561
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_WILD_AXES_END",
        "value":1562
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_LIFE_BREAK_START",
        "value":1563
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_LIFE_BREAK_END",
        "value":1564
      },{
        "desc":"",
        "name":"ACT_DOTA_NIGHTSTALKER_TRANSITION",
        "value":1565
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_RAGE",
        "value":1566
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
        "value":1567
      },{
        "desc":"",
        "name":"ACT_DOTA_SAND_KING_BURROW_IN",
        "value":1568
      },{
        "desc":"",
        "name":"ACT_DOTA_SAND_KING_BURROW_OUT",
        "value":1569
      },{
        "desc":"",
        "name":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
        "value":1570
      },{
        "desc":"",
        "name":"ACT_DOTA_WHEEL_LAYER",
        "value":1571
      },{
        "desc":"",
        "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
        "value":1572
      },{
        "desc":"",
        "name":"ACT_DOTA_ALCHEMIST_CONCOCTION",
        "value":1573
      },{
        "desc":"",
        "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
        "value":1574
      },{
        "desc":"",
        "name":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
        "value":1575
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_INFEST",
        "value":1576
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_INFEST_END",
        "value":1577
      },{
        "desc":"",
        "name":"ACT_DOTA_LASSO_LOOP",
        "value":1578
      },{
        "desc":"",
        "name":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
        "value":1579
      },{
        "desc":"",
        "name":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
        "value":1580
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_COLD_SNAP",
        "value":1581
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_GHOST_WALK",
        "value":1582
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_TORNADO",
        "value":1583
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_EMP",
        "value":1584
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ALACRITY",
        "value":1585
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_CHAOS_METEOR",
        "value":1586
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_SUN_STRIKE",
        "value":1587
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_FORGE_SPIRIT",
        "value":1588
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ICE_WALL",
        "value":1589
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_DEAFENING_BLAST",
        "value":1590
      },{
        "desc":"",
        "name":"ACT_DOTA_VICTORY",
        "value":1591
      },{
        "desc":"",
        "name":"ACT_DOTA_DEFEAT",
        "value":1592
      },{
        "desc":"",
        "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
        "value":1593
      },{
        "desc":"",
        "name":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
        "value":1594
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT",
        "value":1595
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_END",
        "value":1596
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_REFRACTION",
        "value":1597
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_7",
        "value":1598
      },{
        "desc":"",
        "name":"ACT_DOTA_CANCEL_SIREN_SONG",
        "value":1599
      },{
        "desc":"",
        "name":"ACT_DOTA_CHANNEL_ABILITY_7",
        "value":1600
      },{
        "desc":"",
        "name":"ACT_DOTA_LOADOUT",
        "value":1601
      },{
        "desc":"",
        "name":"ACT_DOTA_FORCESTAFF_END",
        "value":1602
      },{
        "desc":"",
        "name":"ACT_DOTA_POOF_END",
        "value":1603
      },{
        "desc":"",
        "name":"ACT_DOTA_SLARK_POUNCE",
        "value":1604
      },{
        "desc":"",
        "name":"ACT_DOTA_MAGNUS_SKEWER_START",
        "value":1605
      },{
        "desc":"",
        "name":"ACT_DOTA_MAGNUS_SKEWER_END",
        "value":1606
      },{
        "desc":"",
        "name":"ACT_DOTA_MEDUSA_STONE_GAZE",
        "value":1607
      },{
        "desc":"",
        "name":"ACT_DOTA_RELAX_START",
        "value":1608
      },{
        "desc":"",
        "name":"ACT_DOTA_RELAX_LOOP",
        "value":1609
      },{
        "desc":"",
        "name":"ACT_DOTA_RELAX_END",
        "value":1610
      },{
        "desc":"",
        "name":"ACT_DOTA_CENTAUR_STAMPEDE",
        "value":1611
      },{
        "desc":"",
        "name":"ACT_DOTA_BELLYACHE_START",
        "value":1612
      },{
        "desc":"",
        "name":"ACT_DOTA_BELLYACHE_LOOP",
        "value":1613
      },{
        "desc":"",
        "name":"ACT_DOTA_BELLYACHE_END",
        "value":1614
      },{
        "desc":"",
        "name":"ACT_DOTA_ROQUELAIRE_LAND",
        "value":1615
      },{
        "desc":"",
        "name":"ACT_DOTA_ROQUELAIRE_LAND_IDLE",
        "value":1616
      },{
        "desc":"",
        "name":"ACT_DOTA_GREEVIL_CAST",
        "value":1617
      },{
        "desc":"",
        "name":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
        "value":1618
      },{
        "desc":"",
        "name":"ACT_DOTA_GREEVIL_HOOK_START",
        "value":1619
      },{
        "desc":"",
        "name":"ACT_DOTA_GREEVIL_HOOK_END",
        "value":1620
      },{
        "desc":"",
        "name":"ACT_DOTA_GREEVIL_BLINK_BONE",
        "value":1621
      },{
        "desc":"",
        "name":"ACT_DOTA_IDLE_SLEEPING",
        "value":1622
      },{
        "desc":"",
        "name":"ACT_DOTA_INTRO",
        "value":1623
      },{
        "desc":"",
        "name":"ACT_DOTA_GESTURE_POINT",
        "value":1624
      },{
        "desc":"",
        "name":"ACT_DOTA_GESTURE_ACCENT",
        "value":1625
      },{
        "desc":"",
        "name":"ACT_DOTA_SLEEPING_END",
        "value":1626
      },{
        "desc":"",
        "name":"ACT_DOTA_AMBUSH",
        "value":1627
      },{
        "desc":"",
        "name":"ACT_DOTA_ITEM_LOOK",
        "value":1628
      },{
        "desc":"",
        "name":"ACT_DOTA_STARTLE",
        "value":1629
      },{
        "desc":"",
        "name":"ACT_DOTA_FRUSTRATION",
        "value":1630
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_REACT",
        "value":1631
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_END_REACT",
        "value":1632
      },{
        "desc":"",
        "name":"ACT_DOTA_SHRUG",
        "value":1633
      },{
        "desc":"",
        "name":"ACT_DOTA_RELAX_LOOP_END",
        "value":1634
      },{
        "desc":"",
        "name":"ACT_DOTA_PRESENT_ITEM",
        "value":1635
      },{
        "desc":"",
        "name":"ACT_DOTA_IDLE_IMPATIENT",
        "value":1636
      },{
        "desc":"",
        "name":"ACT_DOTA_SHARPEN_WEAPON",
        "value":1637
      },{
        "desc":"",
        "name":"ACT_DOTA_SHARPEN_WEAPON_OUT",
        "value":1638
      },{
        "desc":"",
        "name":"ACT_DOTA_IDLE_SLEEPING_END",
        "value":1639
      },{
        "desc":"",
        "name":"ACT_DOTA_BRIDGE_DESTROY",
        "value":1640
      },{
        "desc":"",
        "name":"ACT_DOTA_TAUNT_SNIPER",
        "value":1641
      },{
        "desc":"",
        "name":"ACT_DOTA_DEATH_BY_SNIPER",
        "value":1642
      },{
        "desc":"",
        "name":"ACT_DOTA_LOOK_AROUND",
        "value":1643
      },{
        "desc":"",
        "name":"ACT_DOTA_CAGED_CREEP_RAGE",
        "value":1644
      },{
        "desc":"",
        "name":"ACT_DOTA_CAGED_CREEP_RAGE_OUT",
        "value":1645
      },{
        "desc":"",
        "name":"ACT_DOTA_CAGED_CREEP_SMASH",
        "value":1646
      },{
        "desc":"",
        "name":"ACT_DOTA_CAGED_CREEP_SMASH_OUT",
        "value":1647
      },{
        "desc":"",
        "name":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
        "value":1648
      },{
        "desc":"",
        "name":"ACT_DOTA_INTRO_LOOP",
        "value":1649
      },{
        "desc":"",
        "name":"ACT_DOTA_BRIDGE_THREAT",
        "value":1650
      },{
        "desc":"",
        "name":"ACT_DOTA_DAGON",
        "value":1651
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
        "value":1652
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
        "value":1653
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
        "value":1654
      },{
        "desc":"",
        "name":"ACT_DOTA_NIAN_PIN_START",
        "value":1655
      },{
        "desc":"",
        "name":"ACT_DOTA_NIAN_PIN_LOOP",
        "value":1656
      },{
        "desc":"",
        "name":"ACT_DOTA_NIAN_PIN_END",
        "value":1657
      },{
        "desc":"",
        "name":"ACT_DOTA_LEAP_STUN",
        "value":1658
      },{
        "desc":"",
        "name":"ACT_DOTA_LEAP_SWIPE",
        "value":1659
      },{
        "desc":"",
        "name":"ACT_DOTA_NIAN_INTRO_LEAP",
        "value":1660
      },{
        "desc":"",
        "name":"ACT_DOTA_AREA_DENY",
        "value":1661
      },{
        "desc":"",
        "name":"ACT_DOTA_NIAN_PIN_TO_STUN",
        "value":1662
      },{
        "desc":"",
        "name":"ACT_DOTA_RAZE_1",
        "value":1663
      },{
        "desc":"",
        "name":"ACT_DOTA_RAZE_2",
        "value":1664
      },{
        "desc":"",
        "name":"ACT_DOTA_RAZE_3",
        "value":1665
      },{
        "desc":"",
        "name":"ACT_DOTA_UNDYING_DECAY",
        "value":1666
      },{
        "desc":"",
        "name":"ACT_DOTA_UNDYING_SOUL_RIP",
        "value":1667
      },{
        "desc":"",
        "name":"ACT_DOTA_UNDYING_TOMBSTONE",
        "value":1668
      },{
        "desc":"",
        "name":"ACT_DOTA_WHIRLING_AXES_RANGED",
        "value":1669
      },{
        "desc":"",
        "name":"ACT_DOTA_SHALLOW_GRAVE",
        "value":1670
      },{
        "desc":"",
        "name":"ACT_DOTA_COLD_FEET",
        "value":1671
      },{
        "desc":"",
        "name":"ACT_DOTA_ICE_VORTEX",
        "value":1672
      },{
        "desc":"",
        "name":"ACT_DOTA_CHILLING_TOUCH",
        "value":1673
      },{
        "desc":"",
        "name":"ACT_DOTA_ENFEEBLE",
        "value":1674
      },{
        "desc":"",
        "name":"ACT_DOTA_FATAL_BONDS",
        "value":1675
      },{
        "desc":"",
        "name":"ACT_DOTA_MIDNIGHT_PULSE",
        "value":1676
      },{
        "desc":"",
        "name":"ACT_DOTA_ANCESTRAL_SPIRIT",
        "value":1677
      },{
        "desc":"",
        "name":"ACT_DOTA_THUNDER_STRIKE",
        "value":1678
      },{
        "desc":"",
        "name":"ACT_DOTA_KINETIC_FIELD",
        "value":1679
      },{
        "desc":"",
        "name":"ACT_DOTA_STATIC_STORM",
        "value":1680
      },{
        "desc":"",
        "name":"ACT_DOTA_MINI_TAUNT",
        "value":1681
      },{
        "desc":"",
        "name":"ACT_DOTA_ARCTIC_BURN_END",
        "value":1682
      },{
        "desc":"",
        "name":"ACT_DOTA_LOADOUT_RARE",
        "value":1683
      },{
        "desc":"",
        "name":"ACT_DOTA_SWIM",
        "value":1684
      },{
        "desc":"",
        "name":"ACT_DOTA_FLEE",
        "value":1685
      },{
        "desc":"",
        "name":"ACT_DOTA_TROT",
        "value":1686
      },{
        "desc":"",
        "name":"ACT_DOTA_SHAKE",
        "value":1687
      },{
        "desc":"",
        "name":"ACT_DOTA_SWIM_IDLE",
        "value":1688
      },{
        "desc":"",
        "name":"ACT_DOTA_WAIT_IDLE",
        "value":1689
      },{
        "desc":"",
        "name":"ACT_DOTA_GREET",
        "value":1690
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_COOP_START",
        "value":1691
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_COOP_WAIT",
        "value":1692
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_COOP_END",
        "value":1693
      },{
        "desc":"",
        "name":"ACT_DOTA_TELEPORT_COOP_EXIT",
        "value":1694
      },{
        "desc":"",
        "name":"ACT_DOTA_SHOPKEEPER_PET_INTERACT",
        "value":1695
      },{
        "desc":"",
        "name":"ACT_DOTA_ITEM_PICKUP",
        "value":1696
      },{
        "desc":"",
        "name":"ACT_DOTA_ITEM_DROP",
        "value":1697
      },{
        "desc":"",
        "name":"ACT_DOTA_CAPTURE_PET",
        "value":1698
      },{
        "desc":"",
        "name":"ACT_DOTA_PET_WARD_OBSERVER",
        "value":1699
      },{
        "desc":"",
        "name":"ACT_DOTA_PET_WARD_SENTRY",
        "value":1700
      },{
        "desc":"",
        "name":"ACT_DOTA_PET_LEVEL",
        "value":1701
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_BURROW_END",
        "value":1702
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_ASSIMILATE",
        "value":1703
      },{
        "desc":"",
        "name":"ACT_DOTA_LIFESTEALER_EJECT",
        "value":1704
      },{
        "desc":"",
        "name":"ACT_DOTA_ATTACK_EVENT_BASH",
        "value":1705
      },{
        "desc":"",
        "name":"ACT_DOTA_CAPTURE_RARE",
        "value":1706
      },{
        "desc":"",
        "name":"ACT_DOTA_AW_MAGNETIC_FIELD",
        "value":1707
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_GHOST_SHIP",
        "value":1708
      },{
        "desc":"",
        "name":"ACT_DOTA_FXANIM",
        "value":1709
      },{
        "desc":"",
        "name":"ACT_DOTA_VICTORY_START",
        "value":1710
      },{
        "desc":"",
        "name":"ACT_DOTA_DEFEAT_START",
        "value":1711
      },{
        "desc":"",
        "name":"ACT_DOTA_DP_SPIRIT_SIPHON",
        "value":1712
      },{
        "desc":"",
        "name":"ACT_DOTA_TRICKS_END",
        "value":1713
      },{
        "desc":"",
        "name":"ACT_DOTA_ES_STONE_CALLER",
        "value":1714
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_STRIKE",
        "value":1715
      },{
        "desc":"",
        "name":"ACT_DOTA_VERSUS",
        "value":1716
      },{
        "desc":"",
        "name":"ACT_DOTA_CAPTURE_CARD",
        "value":1717
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_SPRING_SOAR",
        "value":1718
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_SPRING_END",
        "value":1719
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_TREE_SOAR",
        "value":1720
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_TREE_END",
        "value":1721
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_FUR_ARMY",
        "value":1722
      },{
        "desc":"",
        "name":"ACT_DOTA_MK_SPRING_CAST",
        "value":1723
      },{
        "desc":"",
        "name":"ACT_DOTA_NECRO_GHOST_SHROUD",
        "value":1724
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_ARCANA",
        "value":1725
      },{
        "desc":"",
        "name":"ACT_DOTA_SLIDE",
        "value":1726
      },{
        "desc":"",
        "name":"ACT_DOTA_SLIDE_LOOP",
        "value":1727
      },{
        "desc":"",
        "name":"ACT_DOTA_GENERIC_CHANNEL_1",
        "value":1728
      },{
        "desc":"",
        "name":"ACT_DOTA_GS_SOUL_CHAIN",
        "value":1729
      },{
        "desc":"",
        "name":"ACT_DOTA_GS_INK_CREATURE",
        "value":1730
      },{
        "desc":"",
        "name":"ACT_DOTA_TRANSITION",
        "value":1731
      },{
        "desc":"",
        "name":"ACT_DOTA_BLINK_DAGGER",
        "value":1732
      },{
        "desc":"",
        "name":"ACT_DOTA_BLINK_DAGGER_END",
        "value":1733
      },{
        "desc":"",
        "name":"ACT_DOTA_CUSTOM_TOWER_ATTACK",
        "value":1734
      },{
        "desc":"",
        "name":"ACT_DOTA_CUSTOM_TOWER_IDLE",
        "value":1735
      },{
        "desc":"",
        "name":"ACT_DOTA_CUSTOM_TOWER_DIE",
        "value":1736
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_COLD_SNAP_ORB",
        "value":1737
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_GHOST_WALK_ORB",
        "value":1738
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_TORNADO_ORB",
        "value":1739
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_EMP_ORB",
        "value":1740
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ALACRITY_ORB",
        "value":1741
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_CHAOS_METEOR_ORB",
        "value":1742
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_SUN_STRIKE_ORB",
        "value":1743
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_FORGE_SPIRIT_ORB",
        "value":1744
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ICE_WALL_ORB",
        "value":1745
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_DEAFENING_BLAST_ORB",
        "value":1746
      },{
        "desc":"",
        "name":"ACT_DOTA_NOTICE",
        "value":1747
      },{
        "desc":"",
        "name":"ACT_DOTA_CAST_ABILITY_2_ALLY",
        "value":1748
      },{
        "desc":"",
        "name":"ACT_DOTA_SHUFFLE_L",
        "value":1749
      },{
        "desc":"",
        "name":"ACT_DOTA_SHUFFLE_R",
        "value":1750
      },{
        "desc":"",
        "name":"ACT_DOTA_OVERRIDE_LOADOUT",
        "value":1751
      },{
        "desc":"",
        "name":"ACT_DOTA_TAUNT_SPECIAL",
        "value":1752
      }],
    "DOTA_GameState":[{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_INIT",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_HERO_SELECTION",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_STRATEGY_TIME",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_PRE_GAME",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_POST_GAME",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_GAMERULES_STATE_DISCONNECT",
        "value":10
      }],
    "EShareAbility":[{
        "desc":"",
        "name":"ITEM_FULLY_SHAREABLE",
        "value":0
      },{
        "desc":"",
        "name":"ITEM_PARTIALLY_SHAREABLE",
        "value":1
      },{
        "desc":"",
        "name":"ITEM_NOT_SHAREABLE",
        "value":2
      }],
    "DOTASlotType_t":[{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WEAPON",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WEAPON2",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_HEAD",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SHOULDER",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ARMS",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ARMOR",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BELT",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_NECK",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BACK",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_LEGS",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_GLOVES",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TAIL",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MISC",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_COSTUME",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BODY_HEAD",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MOUNT",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SUMMON",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TAUNT",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY1",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY2",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY3",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY4",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_VOICE",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_PERSONA_1_START",
        "value":29
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WEAPON_PERSONA_1",
        "value":29
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON_PERSONA_1",
        "value":30
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WEAPON2_PERSONA_1",
        "value":31
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2_PERSONA_1",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_HEAD_PERSONA_1",
        "value":33
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SHOULDER_PERSONA_1",
        "value":34
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ARMS_PERSONA_1",
        "value":35
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ARMOR_PERSONA_1",
        "value":36
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BELT_PERSONA_1",
        "value":37
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_NECK_PERSONA_1",
        "value":38
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BACK_PERSONA_1",
        "value":39
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_LEGS_PERSONA_1",
        "value":40
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_GLOVES_PERSONA_1",
        "value":41
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TAIL_PERSONA_1",
        "value":42
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MISC_PERSONA_1",
        "value":43
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BODY_HEAD_PERSONA_1",
        "value":44
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MOUNT_PERSONA_1",
        "value":45
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SUMMON_PERSONA_1",
        "value":46
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_SHAPESHIFT_PERSONA_1",
        "value":47
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TAUNT_PERSONA_1",
        "value":48
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS_PERSONA_1",
        "value":49
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK_PERSONA_1",
        "value":50
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY1_PERSONA_1",
        "value":51
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY2_PERSONA_1",
        "value":52
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY3_PERSONA_1",
        "value":53
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY4_PERSONA_1",
        "value":54
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE_PERSONA_1",
        "value":55
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_VOICE_PERSONA_1",
        "value":56
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_PERSONA_1_END",
        "value":56
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_PERSONA_SELECTOR",
        "value":57
      },{
        "desc":"",
        "name":"DOTA_PLAYER_LOADOUT_START",
        "value":58
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_COURIER",
        "value":58
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_ANNOUNCER",
        "value":59
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MEGA_KILLS",
        "value":60
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MUSIC",
        "value":61
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WARD",
        "value":62
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_HUD_SKIN",
        "value":63
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_LOADING_SCREEN",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_WEATHER",
        "value":65
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_HEROIC_STATUE",
        "value":66
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
        "value":67
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_CURSOR_PACK",
        "value":68
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
        "value":69
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_BLINK_EFFECT",
        "value":70
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_EMBLEM",
        "value":71
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_TERRAIN",
        "value":72
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_RADIANT_CREEPS",
        "value":73
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_DIRE_CREEPS",
        "value":74
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_RADIANT_TOWER",
        "value":75
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_DIRE_TOWER",
        "value":76
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_VERSUS_SCREEN",
        "value":77
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_STREAK_EFFECT",
        "value":78
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_KILL_EFFECT",
        "value":79
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_DEATH_EFFECT",
        "value":80
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_HEAD_EFFECT",
        "value":81
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_MAP_EFFECT",
        "value":82
      },{
        "desc":"",
        "name":"DOTA_PLAYER_LOADOUT_END",
        "value":83
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_COURIER_EFFECT",
        "value":83
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_NONE",
        "value":84
      },{
        "desc":"",
        "name":"DOTA_LOADOUT_TYPE_COUNT",
        "value":85
      }],
    "DOTADamageFlag_t":[{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_REFLECTION",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_HPLOSS",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NON_LETHAL",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_DONT_DISPLAY_DAMAGE_IF_SOURCE_HIDDEN",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_PROPERTY_FIRE",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_DAMAGE_FLAG_IGNORES_BASE_PHYSICAL_ARMOR",
        "value":16384
      }],
    "AbilityLearnResult_t":[{
        "desc":"",
        "name":"ABILITY_CAN_BE_UPGRADED",
        "value":0
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
        "value":1
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
        "value":2
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
        "value":3
      },{
        "desc":"",
        "name":"ABILITY_NOT_LEARNABLE",
        "value":4
      }],
    "modifierfunction":[{
        "desc":"GetModifierPreAttack_BonusDamage",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
        "value":0
      },{
        "desc":"GetModifierPreAttack_BonusDamage_Target",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
        "value":1
      },{
        "desc":"GetModifierPreAttack_BonusDamage_Proc",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
        "value":2
      },{
        "desc":"GetModifierPreAttack_BonusDamagePostCrit",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
        "value":3
      },{
        "desc":"GetModifierBaseAttack_BonusDamage",
        "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
        "value":4
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Physical",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
        "value":5
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Magical",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
        "value":6
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Pure",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
        "value":7
      },{
        "desc":"GetModifierProcAttack_Feedback",
        "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
        "value":8
      },{
        "desc":"GetModifierOverrideAttackDamage",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
        "value":9
      },{
        "desc":"GetModifierPreAttack",
        "name":"MODIFIER_PROPERTY_PRE_ATTACK",
        "value":10
      },{
        "desc":"GetModifierInvisibilityLevel",
        "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
        "value":11
      },{
        "desc":"GetModifierInvisibilityAttackBehaviorException",
        "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
        "value":12
      },{
        "desc":"GetModifierPersistentInvisibility",
        "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
        "value":13
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
        "value":14
      },{
        "desc":"GetModifierMoveSpeedOverride",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
        "value":15
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
        "value":16
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage_Unique",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
        "value":17
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage_Unique_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
        "value":18
      },{
        "desc":"GetModifierMoveSpeedBonus_Special_Boots",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
        "value":19
      },{
        "desc":"GetModifierMoveSpeedBonus_Special_Boots_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
        "value":20
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant_Unique",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
        "value":21
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant_Unique_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
        "value":22
      },{
        "desc":"GetModifierMoveSpeed_Absolute",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
        "value":23
      },{
        "desc":"GetModifierMoveSpeed_AbsoluteMin",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
        "value":24
      },{
        "desc":"GetModifierMoveSpeed_AbsoluteMax",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
        "value":25
      },{
        "desc":"GetModifierIgnoreMovespeedLimit",
        "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
        "value":26
      },{
        "desc":"GetModifierMoveSpeed_Limit",
        "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
        "value":27
      },{
        "desc":"GetModifierAttackSpeedBaseOverride",
        "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
        "value":28
      },{
        "desc":"GetModifierFixedAttackRate",
        "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
        "value":29
      },{
        "desc":"GetModifierAttackSpeedBonus_Constant",
        "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
        "value":30
      },{
        "desc":"GetModifierCooldownReduction_Constant",
        "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
        "value":31
      },{
        "desc":"GetModifierManacostReduction_Constant",
        "name":"MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT",
        "value":32
      },{
        "desc":"GetModifierBaseAttackTimeConstant",
        "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
        "value":33
      },{
        "desc":"GetModifierBaseAttackTimeConstant_Adjust",
        "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
        "value":34
      },{
        "desc":"GetModifierAttackPointConstant",
        "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
        "value":35
      },{
        "desc":"GetModifierBonusDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE",
        "value":36
      },{
        "desc":"GetModifierDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
        "value":37
      },{
        "desc":"GetModifierDamageOutgoing_Percentage_Illusion",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
        "value":38
      },{
        "desc":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
        "value":39
      },{
        "desc":"GetModifierTotalDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
        "value":40
      },{
        "desc":"GetModifierSpellAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
        "value":41
      },{
        "desc":"GetModifierSpellAmplify_PercentageUnique",
        "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
        "value":42
      },{
        "desc":"GetModifierHealAmplify_PercentageSource",
        "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
        "value":43
      },{
        "desc":"GetModifierHealAmplify_PercentageTarget",
        "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
        "value":44
      },{
        "desc":"GetModifierHPRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
        "value":45
      },{
        "desc":"GetModifierLifestealRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
        "value":46
      },{
        "desc":"GetModifierSpellLifestealRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE",
        "value":47
      },{
        "desc":"GetModifierMPRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
        "value":48
      },{
        "desc":"GetModifierManaDrainAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE",
        "value":49
      },{
        "desc":"GetModifierMPRestoreAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
        "value":50
      },{
        "desc":"GetModifierBaseDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
        "value":51
      },{
        "desc":"GetModifierBaseDamageOutgoing_PercentageUnique",
        "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
        "value":52
      },{
        "desc":"GetModifierIncomingDamage_Percentage",
        "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
        "value":53
      },{
        "desc":"GetModifierIncomingPhysicalDamage_Percentage",
        "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
        "value":54
      },{
        "desc":"GetModifierIncomingPhysicalDamageConstant",
        "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
        "value":55
      },{
        "desc":"GetModifierIncomingSpellDamageConstant",
        "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
        "value":56
      },{
        "desc":"GetModifierEvasion_Constant",
        "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
        "value":57
      },{
        "desc":"GetModifierNegativeEvasion_Constant",
        "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
        "value":58
      },{
        "desc":"GetModifierStatusResistance",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
        "value":59
      },{
        "desc":"GetModifierStatusResistanceStacking",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
        "value":60
      },{
        "desc":"GetModifierStatusResistanceCaster",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
        "value":61
      },{
        "desc":"GetModifierAvoidDamage",
        "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
        "value":62
      },{
        "desc":"GetModifierAvoidSpell",
        "name":"MODIFIER_PROPERTY_AVOID_SPELL",
        "value":63
      },{
        "desc":"GetModifierMiss_Percentage",
        "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
        "value":64
      },{
        "desc":"GetModifierPhysicalArmorBase_Percentage",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
        "value":65
      },{
        "desc":"GetModifierPhysicalArmorTotal_Percentage",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
        "value":66
      },{
        "desc":"GetModifierPhysicalArmorBonus",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
        "value":67
      },{
        "desc":"GetModifierPhysicalArmorBonusUnique",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
        "value":68
      },{
        "desc":"GetModifierPhysicalArmorBonusUniqueActive",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
        "value":69
      },{
        "desc":"GetModifierIgnorePhysicalArmor",
        "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
        "value":70
      },{
        "desc":"GetModifierMagicalResistanceBaseReduction",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
        "value":71
      },{
        "desc":"GetModifierMagicalResistanceDirectModification",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
        "value":72
      },{
        "desc":"GetModifierMagicalResistanceBonus",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
        "value":73
      },{
        "desc":"GetModifierMagicalResistanceBonusIllusions",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
        "value":74
      },{
        "desc":"GetModifierMagicalResistanceDecrepifyUnique",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
        "value":75
      },{
        "desc":"GetModifierBaseRegen",
        "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
        "value":76
      },{
        "desc":"GetModifierConstantManaRegen",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
        "value":77
      },{
        "desc":"GetModifierConstantManaRegenUnique",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
        "value":78
      },{
        "desc":"GetModifierTotalPercentageManaRegen",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
        "value":79
      },{
        "desc":"GetModifierConstantHealthRegen",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
        "value":80
      },{
        "desc":"GetModifierHealthRegenPercentage",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
        "value":81
      },{
        "desc":"GetModifierHealthRegenPercentageUnique",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
        "value":82
      },{
        "desc":"GetModifierHealthBonus",
        "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
        "value":83
      },{
        "desc":"GetModifierManaBonus",
        "name":"MODIFIER_PROPERTY_MANA_BONUS",
        "value":84
      },{
        "desc":"GetModifierExtraStrengthBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
        "value":85
      },{
        "desc":"GetModifierExtraHealthBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
        "value":86
      },{
        "desc":"GetModifierExtraManaBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
        "value":87
      },{
        "desc":"GetModifierExtraHealthPercentage",
        "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
        "value":88
      },{
        "desc":"GetModifierExtraManaPercentage",
        "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
        "value":89
      },{
        "desc":"GetModifierBonusStats_Strength",
        "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
        "value":90
      },{
        "desc":"GetModifierBonusStats_Agility",
        "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
        "value":91
      },{
        "desc":"GetModifierBonusStats_Intellect",
        "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
        "value":92
      },{
        "desc":"GetModifierBonusStats_Strength_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
        "value":93
      },{
        "desc":"GetModifierBonusStats_Agility_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
        "value":94
      },{
        "desc":"GetModifierBonusStats_Intellect_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
        "value":95
      },{
        "desc":"GetModifierCastRangeBonus",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
        "value":96
      },{
        "desc":"GetModifierCastRangeBonusTarget",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
        "value":97
      },{
        "desc":"GetModifierCastRangeBonusStacking",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
        "value":98
      },{
        "desc":"GetModifierAttackRangeOverride",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
        "value":99
      },{
        "desc":"GetModifierAttackRangeBonus",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
        "value":100
      },{
        "desc":"GetModifierAttackRangeBonusUnique",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
        "value":101
      },{
        "desc":"GetModifierAttackRangeBonusPercentage",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
        "value":102
      },{
        "desc":"GetModifierMaxAttackRange",
        "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
        "value":103
      },{
        "desc":"GetModifierProjectileSpeedBonus",
        "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
        "value":104
      },{
        "desc":"GetModifierProjectileSpeedBonusPercentage",
        "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
        "value":105
      },{
        "desc":"GetModifierProjectileName",
        "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
        "value":106
      },{
        "desc":"ReincarnateTime",
        "name":"MODIFIER_PROPERTY_REINCARNATION",
        "value":107
      },{
        "desc":"GetModifierConstantRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME",
        "value":108
      },{
        "desc":"GetModifierPercentageRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
        "value":109
      },{
        "desc":"GetModifierStackingRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
        "value":110
      },{
        "desc":"GetModifierPercentageCooldown",
        "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
        "value":111
      },{
        "desc":"GetModifierPercentageCooldownOngoing",
        "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
        "value":112
      },{
        "desc":"GetModifierPercentageCasttime",
        "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
        "value":113
      },{
        "desc":"GetModifierPercentageManacost",
        "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
        "value":114
      },{
        "desc":"GetModifierPercentageManacostStacking",
        "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
        "value":115
      },{
        "desc":"GetModifierConstantDeathGoldCost",
        "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
        "value":116
      },{
        "desc":"GetModifierPercentageExpRateBoost",
        "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
        "value":117
      },{
        "desc":"GetModifierPreAttack_CriticalStrike",
        "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
        "value":118
      },{
        "desc":"GetModifierPreAttack_Target_CriticalStrike",
        "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
        "value":119
      },{
        "desc":"GetModifierMagical_ConstantBlock",
        "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
        "value":120
      },{
        "desc":"GetModifierPhysical_ConstantBlock",
        "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
        "value":121
      },{
        "desc":"GetModifierPhysical_ConstantBlockSpecial",
        "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
        "value":122
      },{
        "desc":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor",
        "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
        "value":123
      },{
        "desc":"GetModifierTotal_ConstantBlock",
        "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
        "value":124
      },{
        "desc":"GetOverrideAnimation",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
        "value":125
      },{
        "desc":"GetOverrideAnimationWeight",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
        "value":126
      },{
        "desc":"GetOverrideAnimationRate",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
        "value":127
      },{
        "desc":"GetAbsorbSpell",
        "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
        "value":128
      },{
        "desc":"GetReflectSpell",
        "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
        "value":129
      },{
        "desc":"GetDisableAutoAttack",
        "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
        "value":130
      },{
        "desc":"GetBonusDayVision",
        "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
        "value":131
      },{
        "desc":"GetBonusNightVision",
        "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
        "value":132
      },{
        "desc":"GetBonusNightVisionUnique",
        "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
        "value":133
      },{
        "desc":"GetBonusVisionPercentage",
        "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
        "value":134
      },{
        "desc":"GetFixedDayVision",
        "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
        "value":135
      },{
        "desc":"GetFixedNightVision",
        "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
        "value":136
      },{
        "desc":"GetMinHealth",
        "name":"MODIFIER_PROPERTY_MIN_HEALTH",
        "value":137
      },{
        "desc":"GetAbsoluteNoDamagePhysical",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
        "value":138
      },{
        "desc":"GetAbsoluteNoDamageMagical",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
        "value":139
      },{
        "desc":"GetAbsoluteNoDamagePure",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
        "value":140
      },{
        "desc":"GetIsIllusion",
        "name":"MODIFIER_PROPERTY_IS_ILLUSION",
        "value":141
      },{
        "desc":"GetModifierIllusionLabel",
        "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
        "value":142
      },{
        "desc":"GetModifierStrongIllusion",
        "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
        "value":143
      },{
        "desc":"GetModifierSuperIllusion",
        "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
        "value":144
      },{
        "desc":"GetModifierSuperIllusionWithUltimate",
        "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
        "value":145
      },{
        "desc":"GetModifierTurnRate_Percentage",
        "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
        "value":146
      },{
        "desc":"GetModifierTurnRate_Override",
        "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
        "value":147
      },{
        "desc":"GetDisableHealing",
        "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
        "value":148
      },{
        "desc":"GetAlwaysAllowAttack",
        "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
        "value":149
      },{
        "desc":"GetAllowEtherealAttack",
        "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
        "value":150
      },{
        "desc":"GetOverrideAttackMagical",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
        "value":151
      },{
        "desc":"GetModifierUnitStatsNeedsRefresh",
        "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
        "value":152
      },{
        "desc":"Unused",
        "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
        "value":153
      },{
        "desc":"Unused",
        "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
        "value":154
      },{
        "desc":"GetModifierUnitDisllowUpgrading",
        "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
        "value":155
      },{
        "desc":"GetModifierDodgeProjectile",
        "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
        "value":156
      },{
        "desc":"GetTriggerCosmeticAndEndAttack",
        "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
        "value":157
      },{
        "desc":"OnSpellTargetReady",
        "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
        "value":158
      },{
        "desc":"OnAttackRecord",
        "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
        "value":159
      },{
        "desc":"OnAttackStart",
        "name":"MODIFIER_EVENT_ON_ATTACK_START",
        "value":160
      },{
        "desc":"OnAttack",
        "name":"MODIFIER_EVENT_ON_ATTACK",
        "value":161
      },{
        "desc":"OnAttackLanded",
        "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
        "value":162
      },{
        "desc":"OnAttackFail",
        "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
        "value":163
      },{
        "desc":"OnAttackAllied",
        "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
        "value":164
      },{
        "desc":"OnProjectileDodge",
        "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
        "value":165
      },{
        "desc":"OnOrder",
        "name":"MODIFIER_EVENT_ON_ORDER",
        "value":166
      },{
        "desc":"OnUnitMoved",
        "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
        "value":167
      },{
        "desc":"OnAbilityStart",
        "name":"MODIFIER_EVENT_ON_ABILITY_START",
        "value":168
      },{
        "desc":"OnAbilityExecuted",
        "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
        "value":169
      },{
        "desc":"OnAbilityFullyCast",
        "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
        "value":170
      },{
        "desc":"OnBreakInvisibility",
        "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
        "value":171
      },{
        "desc":"OnAbilityEndChannel",
        "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
        "value":172
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
        "value":173
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_REFRESH",
        "value":174
      },{
        "desc":"OnTakeDamage",
        "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
        "value":175
      },{
        "desc":"OnDamagePrevented",
        "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
        "value":176
      },{
        "desc":"OnStateChanged",
        "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
        "value":177
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
        "value":178
      },{
        "desc":"OnProcessCleave",
        "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
        "value":179
      },{
        "desc":"OnDamageCalculated",
        "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
        "value":180
      },{
        "desc":"OnAttacked",
        "name":"MODIFIER_EVENT_ON_ATTACKED",
        "value":181
      },{
        "desc":"OnDeath",
        "name":"MODIFIER_EVENT_ON_DEATH",
        "value":182
      },{
        "desc":"OnRespawn",
        "name":"MODIFIER_EVENT_ON_RESPAWN",
        "value":183
      },{
        "desc":"OnSpentMana",
        "name":"MODIFIER_EVENT_ON_SPENT_MANA",
        "value":184
      },{
        "desc":"OnTeleporting",
        "name":"MODIFIER_EVENT_ON_TELEPORTING",
        "value":185
      },{
        "desc":"OnTeleported",
        "name":"MODIFIER_EVENT_ON_TELEPORTED",
        "value":186
      },{
        "desc":"OnSetLocation",
        "name":"MODIFIER_EVENT_ON_SET_LOCATION",
        "value":187
      },{
        "desc":"OnHealthGained",
        "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
        "value":188
      },{
        "desc":"OnManaGained",
        "name":"MODIFIER_EVENT_ON_MANA_GAINED",
        "value":189
      },{
        "desc":"OnTakeDamageKillCredit",
        "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
        "value":190
      },{
        "desc":"OnHeroKilled",
        "name":"MODIFIER_EVENT_ON_HERO_KILLED",
        "value":191
      },{
        "desc":"OnHealReceived",
        "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
        "value":192
      },{
        "desc":"OnBuildingKilled",
        "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
        "value":193
      },{
        "desc":"OnModelChanged",
        "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
        "value":194
      },{
        "desc":"OnModifierAdded",
        "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
        "value":195
      },{
        "desc":"OnTooltip",
        "name":"MODIFIER_PROPERTY_TOOLTIP",
        "value":196
      },{
        "desc":"GetModifierModelChange",
        "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
        "value":197
      },{
        "desc":"GetModifierModelScale",
        "name":"MODIFIER_PROPERTY_MODEL_SCALE",
        "value":198
      },{
        "desc":"GetModifierScepter",
        "name":"MODIFIER_PROPERTY_IS_SCEPTER",
        "value":199
      },{
        "desc":"GetModifierRadarCooldownReduction",
        "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
        "value":200
      },{
        "desc":"GetActivityTranslationModifiers",
        "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
        "value":201
      },{
        "desc":"GetAttackSound",
        "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
        "value":202
      },{
        "desc":"GetUnitLifetimeFraction",
        "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
        "value":203
      },{
        "desc":"GetModifierProvidesFOWVision",
        "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
        "value":204
      },{
        "desc":"GetModifierSpellsRequireHP",
        "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
        "value":205
      },{
        "desc":"GetForceDrawOnMinimap",
        "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
        "value":206
      },{
        "desc":"GetModifierDisableTurning",
        "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
        "value":207
      },{
        "desc":"GetModifierIgnoreCastAngle",
        "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
        "value":208
      },{
        "desc":"GetModifierChangeAbilityValue",
        "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
        "value":209
      },{
        "desc":"GetModifierOverrideAbilitySpecial",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL",
        "value":210
      },{
        "desc":"GetModifierOverrideAbilitySpecialValue",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE",
        "value":211
      },{
        "desc":"GetModifierAbilityLayout",
        "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
        "value":212
      },{
        "desc":"OnDominated",
        "name":"MODIFIER_EVENT_ON_DOMINATED",
        "value":213
      },{
        "desc":"GetModifierTempestDouble",
        "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
        "value":214
      },{
        "desc":"PreserveParticlesOnModelChanged",
        "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
        "value":215
      },{
        "desc":"OnAttackFinished",
        "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
        "value":216
      },{
        "desc":"GetModifierIgnoreCooldown",
        "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
        "value":217
      },{
        "desc":"GetModifierCanAttackTrees",
        "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
        "value":218
      },{
        "desc":"GetVisualZDelta",
        "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
        "value":219
      },{
        "desc":"",
        "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
        "value":220
      },{
        "desc":"GetModifierNoVisionOfAttacker",
        "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
        "value":221
      },{
        "desc":"OnTooltip2",
        "name":"MODIFIER_PROPERTY_TOOLTIP2",
        "value":222
      },{
        "desc":"OnAttackRecordDestroy",
        "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
        "value":223
      },{
        "desc":"OnProjectileObstructionHit",
        "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
        "value":224
      },{
        "desc":"GetSuppressTeleport",
        "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
        "value":225
      },{
        "desc":"OnAttackCancelled",
        "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
        "value":226
      },{
        "desc":"GetSuppressCleave",
        "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
        "value":227
      },{
        "desc":"BotAttackScoreBonus",
        "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
        "value":228
      },{
        "desc":"GetModifierAttackSpeedReductionPercentage",
        "name":"MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE",
        "value":229
      },{
        "desc":"GetModifierMoveSpeedReductionPercentage",
        "name":"MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE",
        "value":230
      },{
        "desc":"",
        "name":"MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET",
        "value":231
      },{
        "desc":"",
        "name":"MODIFIER_FUNCTION_LAST",
        "value":232
      },{
        "desc":"",
        "name":"MODIFIER_FUNCTION_INVALID",
        "value":255
      }],
    "EDOTA_ModifyXP_Reason":[{
        "desc":"",
        "name":"DOTA_ModifyXP_Unspecified",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_HeroKill",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_CreepKill",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_RoshanKill",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_TomeOfKnowledge",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_Outpost",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ModifyXP_MAX",
        "value":6
      }],
    "DOTAUnitAttackCapability_t":[{
        "desc":"",
        "name":"DOTA_UNIT_CAP_NO_ATTACK",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_CAP_MELEE_ATTACK",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_CAP_RANGED_ATTACK",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_ATTACK_CAPABILITY_BIT_COUNT",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_UNIT_CAP_RANGED_ATTACK_DIRECTIONAL",
        "value":4
      }],
    "DOTATeam_t":[{
        "desc":"",
        "name":"DOTA_TEAM_FIRST",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_TEAM_GOODGUYS",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_TEAM_BADGUYS",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_TEAM_NEUTRALS",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_TEAM_NOTEAM",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_MIN",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_1",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_2",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_COUNT",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_3",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_4",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_5",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_6",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_7",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_8",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_MAX",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_TEAM_COUNT",
        "value":14
      }],
    "DOTAUnitMoveCapability_t":[{
        "desc":"",
        "name":"DOTA_UNIT_CAP_MOVE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_CAP_MOVE_GROUND",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_CAP_MOVE_FLY",
        "value":2
      }],
    "DOTA_ABILITY_BEHAVIOR":[{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
        "value":-2147483648
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_SILENCE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_POINT",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AOE",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ITEM",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
        "value":16384
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
        "value":32768
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AURA",
        "value":65536
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ATTACK",
        "value":131072
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
        "value":262144
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
        "value":524288
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
        "value":1048576
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
        "value":2097152
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
        "value":4194304
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
        "value":8388608
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
        "value":16777216
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
        "value":33554432
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
        "value":67108864
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
        "value":134217728
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
        "value":268435456
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
        "value":536870912
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
        "value":1073741824
      }],
    "DOTA_MOTION_CONTROLLER_PRIORITY":[{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
        "value":4
      }],
    "ParticleAttachment_t":[{
        "desc":"",
        "name":"PATTACH_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"PATTACH_ABSORIGIN",
        "value":0
      },{
        "desc":"",
        "name":"PATTACH_ABSORIGIN_FOLLOW",
        "value":1
      },{
        "desc":"",
        "name":"PATTACH_CUSTOMORIGIN",
        "value":2
      },{
        "desc":"",
        "name":"PATTACH_CUSTOMORIGIN_FOLLOW",
        "value":3
      },{
        "desc":"",
        "name":"PATTACH_POINT",
        "value":4
      },{
        "desc":"",
        "name":"PATTACH_POINT_FOLLOW",
        "value":5
      },{
        "desc":"",
        "name":"PATTACH_EYES_FOLLOW",
        "value":6
      },{
        "desc":"",
        "name":"PATTACH_OVERHEAD_FOLLOW",
        "value":7
      },{
        "desc":"",
        "name":"PATTACH_WORLDORIGIN",
        "value":8
      },{
        "desc":"",
        "name":"PATTACH_ROOTBONE_FOLLOW",
        "value":9
      },{
        "desc":"",
        "name":"PATTACH_RENDERORIGIN_FOLLOW",
        "value":10
      },{
        "desc":"",
        "name":"PATTACH_MAIN_VIEW",
        "value":11
      },{
        "desc":"",
        "name":"PATTACH_WATERWAKE",
        "value":12
      },{
        "desc":"",
        "name":"PATTACH_CENTER_FOLLOW",
        "value":13
      },{
        "desc":"",
        "name":"PATTACH_CUSTOM_GAME_STATE_1",
        "value":14
      },{
        "desc":"",
        "name":"PATTACH_HEALTHBAR",
        "value":15
      },{
        "desc":"",
        "name":"MAX_PATTACH_TYPES",
        "value":16
      }]
  },
  "ProjectileManager":[{
      "desc":"Update speed",
      "func":"( handle_1, int_2 )",
      "name":"ChangeTrackingProjectileSpeed",
      "return":"void"
    },{
      "desc":"Creates a linear projectile and returns the projectile ID",
      "func":"( handle_1 )",
      "name":"CreateLinearProjectile",
      "return":"int"
    },{
      "desc":"Creates a tracking projectile",
      "func":"( handle_1 )",
      "name":"CreateTrackingProjectile",
      "return":"int"
    },{
      "desc":"Destroys the linear projectile matching the argument ID",
      "func":"( int_1 )",
      "name":"DestroyLinearProjectile",
      "return":"void"
    },{
      "desc":"Destroy a tracking projectile early",
      "func":"( int_1 )",
      "name":"DestroyTrackingProjectile",
      "return":"void"
    },{
      "desc":"Returns current location of projectile",
      "func":"( int_1 )",
      "name":"GetLinearProjectileLocation",
      "return":"Vector"
    },{
      "desc":"Returns current radius of projectile",
      "func":"( int_1 )",
      "name":"GetLinearProjectileRadius",
      "return":"float"
    },{
      "desc":"Returns a vector representing the current velocity of the projectile.",
      "func":"( int_1 )",
      "name":"GetLinearProjectileVelocity",
      "return":"Vector"
    },{
      "desc":"Returns current location of projectile",
      "func":"( int_1 )",
      "name":"GetTrackingProjectileLocation",
      "return":"Vector"
    },{
      "desc":"Is this a valid projectile?",
      "func":"( int_1 )",
      "name":"IsValidProjectile",
      "return":"bool"
    },{
      "desc":"Makes the specified unit dodge projectiles",
      "func":"( handle_1 )",
      "name":"ProjectileDodge",
      "return":"void"
    },{
      "desc":"Update velocity",
      "func":"( int_1, Vector_2, float_3 )",
      "name":"UpdateLinearProjectileDirection",
      "return":"void"
    }],
  "CDOTA_Buff":[{
      "desc":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect",
      "func":"( int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect )",
      "name":"AddParticle",
      "return":"void"
    },{
      "desc":"Decrease this modifier's stack count by 1.",
      "func":"()",
      "name":"DecrementStackCount",
      "return":"void"
    },{
      "desc":"Run all associated destroy functions, then remove the modifier.",
      "func":"()",
      "name":"Destroy",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"DestroyOnExpire",
      "return":"bool"
    },{
      "desc":"Run all associated refresh functions on this modifier as if it was re-applied.",
      "func":"()",
      "name":"ForceRefresh",
      "return":"void"
    },{
      "desc":"Get the ability that generated the modifier.",
      "func":"()",
      "name":"GetAbility",
      "return":"handle"
    },{
      "desc":"Returns aura stickiness (default 0.5)",
      "func":"()",
      "name":"GetAuraDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAuraOwner",
      "return":"handle"
    },{
      "desc":"Get the owner of the ability responsible for the modifier.",
      "func":"()",
      "name":"GetCaster",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetClass",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCreationTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDieTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetElapsedTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetLastAppliedTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetName",
      "return":"string"
    },{
      "desc":"Get the unit the modifier is parented to.",
      "func":"()",
      "name":"GetParent",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetRemainingTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSerialNumber",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStackCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iFunction )",
      "name":"HasFunction",
      "return":"bool"
    },{
      "desc":"Increase this modifier's stack count by 1.",
      "func":"()",
      "name":"IncrementStackCount",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDebuff",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHexDebuff",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStunDebuff",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"SendBuffRefreshToClients",
      "return":"void"
    },{
      "desc":"(flTime, bInformClients)",
      "func":"( float flDuration, bool bInformClient )",
      "name":"SetDuration",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iCount )",
      "name":"SetStackCount",
      "return":"void"
    },{
      "desc":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1.",
      "func":"( float flInterval )",
      "name":"StartIntervalThink",
      "return":"void"
    }],
  "CBaseCombatCharacter":[{
      "desc":"GetEquippedWeapons() : Returns an array of all the equipped weapons",
      "func":"()",
      "name":"GetEquippedWeapons",
      "return":"table"
    },{
      "desc":"GetWeaponCount() : Gets the number of weapons currently equipped",
      "func":"()",
      "name":"GetWeaponCount",
      "return":"int"
    }],
  "CBasePlayer":[{
      "desc":"Returns the player's user id.",
      "func":"()",
      "name":"GetUserID",
      "return":"int"
    },{
      "desc":"Returns true if the player is in noclip mode.",
      "func":"()",
      "name":"IsNoclipping",
      "return":"bool"
    }],
  "CBaseTrigger":[{
      "desc":"Disable's the trigger",
      "func":"()",
      "name":"Disable",
      "return":"void"
    },{
      "desc":"Enable the trigger",
      "func":"()",
      "name":"Enable",
      "return":"void"
    },{
      "desc":"Checks whether the passed entity is touching the trigger.",
      "func":"( handle hEnt )",
      "name":"IsTouching",
      "return":"bool"
    }],
  "GridNav":[{
      "desc":"Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)",
      "func":"( Vector_1, Vector_2 )",
      "name":"CanFindPath",
      "return":"bool"
    },{
      "desc":"Destroy all trees in the area(vPosition, flRadius, bFullCollision",
      "func":"( Vector_1, float_2, bool_3 )",
      "name":"DestroyTreesAroundPoint",
      "return":"void"
    },{
      "desc":"Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )",
      "func":"( Vector_1, Vector_2 )",
      "name":"FindPathLength",
      "return":"float"
    },{
      "desc":"Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision).",
      "func":"( Vector_1, float_2, bool_3 )",
      "name":"GetAllTreesAroundPoint",
      "return":"table"
    },{
      "desc":"Get the X position of the center of a given X index",
      "func":"( int_1 )",
      "name":"GridPosToWorldCenterX",
      "return":"float"
    },{
      "desc":"Get the Y position of the center of a given Y index",
      "func":"( int_1 )",
      "name":"GridPosToWorldCenterY",
      "return":"float"
    },{
      "desc":"Checks whether the given position is blocked",
      "func":"( Vector_1 )",
      "name":"IsBlocked",
      "return":"bool"
    },{
      "desc":"(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point",
      "func":"( Vector_1, float_2, bool_3 )",
      "name":"IsNearbyTree",
      "return":"bool"
    },{
      "desc":"Checks whether the given position is traversable",
      "func":"( Vector_1 )",
      "name":"IsTraversable",
      "return":"bool"
    },{
      "desc":"Causes all trees in the map to regrow",
      "func":"()",
      "name":"RegrowAllTrees",
      "return":"void"
    },{
      "desc":"Get the X index of a given world X position",
      "func":"( float_1 )",
      "name":"WorldToGridPosX",
      "return":"int"
    },{
      "desc":"Get the Y index of a given world Y position",
      "func":"( float_1 )",
      "name":"WorldToGridPosY",
      "return":"int"
    }],
  "CLogicScript":[],
  "CScriptUniformRandomStream":[{
      "desc":"",
      "func":"( float flMinVal, float flMaxVal )",
      "name":"RandomFloat",
      "return":"float"
    },{
      "desc":"",
      "func":"( float flMinVal, float flMaxVal, float flExponent )",
      "name":"RandomFloatExp",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iMinVal, int iMaxVal )",
      "name":"RandomInt",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPercentage )",
      "name":"RollPercentage",
      "return":"bool"
    }],
  "CDOTA_Item_Physical":[{
      "desc":"Returned the contained item.",
      "func":"()",
      "name":"GetContainedItem",
      "return":"handle"
    },{
      "desc":"Returns the game time when this item was created in the world",
      "func":"()",
      "name":"GetCreationTime",
      "return":"float"
    },{
      "desc":"Set the contained item.",
      "func":"( handle hItem )",
      "name":"SetContainedItem",
      "return":"void"
    }],
  "CBaseAnimating":[{
      "desc":"Returns the duration in seconds of the active sequence.",
      "func":"()",
      "name":"ActiveSequenceDuration",
      "return":"float"
    },{
      "desc":"Get the cycle of the animation.",
      "func":"()",
      "name":"GetCycle",
      "return":"float"
    },{
      "desc":"Get the value of the given animGraph parameter",
      "func":"( string pszParam )",
      "name":"GetGraphParameter",
      "return":"table"
    },{
      "desc":"Returns the name of the active sequence.",
      "func":"()",
      "name":"GetSequence",
      "return":"string"
    },{
      "desc":"Ask whether the main sequence is done playing.",
      "func":"()",
      "name":"IsSequenceFinished",
      "return":"bool"
    },{
      "desc":"Sets the active sequence by name, resetting the current cycle.",
      "func":"( string pSequenceName )",
      "name":"ResetSequence",
      "return":"void"
    },{
      "desc":"Returns the duration in seconds of the given sequence name.",
      "func":"( string pSequenceName )",
      "name":"SequenceDuration",
      "return":"float"
    },{
      "desc":"Set the cycle of the animation.",
      "func":"( float flCycle )",
      "name":"SetCycle",
      "return":"void"
    },{
      "desc":"Pass the desired look target in world space to the graph",
      "func":"( Vector vValue )",
      "name":"SetGraphLookTarget",
      "return":"void"
    },{
      "desc":"Set the specific param value, type is inferred from the type in script",
      "func":"( string pszParam, table svArg )",
      "name":"SetGraphParameter",
      "return":"void"
    },{
      "desc":"Set the specific param on or off",
      "func":"( string szName, bool bValue )",
      "name":"SetGraphParameterBool",
      "return":"void"
    },{
      "desc":"Pass the enum (int) value to the specified param",
      "func":"( string szName, int nValue )",
      "name":"SetGraphParameterEnum",
      "return":"void"
    },{
      "desc":"Pass the float value to the specified param",
      "func":"( string szName, float flValue )",
      "name":"SetGraphParameterFloat",
      "return":"void"
    },{
      "desc":"Pass the int value to the specified param",
      "func":"( string szName, int nValue )",
      "name":"SetGraphParameterInt",
      "return":"void"
    },{
      "desc":"Pass the vector value to the specified param in the graph",
      "func":"( string szName, Vector vValue )",
      "name":"SetGraphParameterVector",
      "return":"void"
    },{
      "desc":"Set the specified pose parameter to the specified value.",
      "func":"( string szName, float fValue )",
      "name":"SetPoseParameter",
      "return":"float"
    },{
      "desc":"Sets the active sequence by name, keeping the current cycle.",
      "func":"( string pSequenceName )",
      "name":"SetSequence",
      "return":"void"
    },{
      "desc":"Stop the current animation by setting playback rate to 0.0.",
      "func":"()",
      "name":"StopAnimation",
      "return":"void"
    }],
  "CCustomNetTableManager":[{
      "desc":"( string TableName, string KeyName )",
      "func":"( string_1, string_2 )",
      "name":"GetTableValue",
      "return":"table"
    },{
      "desc":"( string TableName, string KeyName, script_table Value )",
      "func":"( string_1, string_2, handle_3 )",
      "name":"SetTableValue",
      "return":"bool"
    }],
  "CScriptKeyValues":[{
      "desc":"Reads a spawn key",
      "func":"( string_1 )",
      "name":"GetValue",
      "return":"table"
    }],
  "CScriptHeroList":[{
      "desc":"Returns all the heroes in the world",
      "func":"()",
      "name":"GetAllHeroes",
      "return":"table"
    },{
      "desc":"Get the Nth hero in the Hero List",
      "func":"( int_1 )",
      "name":"GetHero",
      "return":"handle"
    },{
      "desc":"Returns the number of heroes in the world",
      "func":"()",
      "name":"GetHeroCount",
      "return":"int"
    }],
  "CScriptHTTPRequest":[{
      "desc":"Send a HTTP request.",
      "func":"( handle_1 )",
      "name":"Send",
      "return":"bool"
    },{
      "desc":"Set the total timeout on the request.",
      "func":"( unsigned_1 )",
      "name":"SetHTTPRequestAbsoluteTimeoutMS",
      "return":"bool"
    },{
      "desc":"Set a POST or GET parameter on the request.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestGetOrPostParameter",
      "return":"bool"
    },{
      "desc":"Set a header value on the request.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestHeaderValue",
      "return":"bool"
    },{
      "desc":"Set the network timeout on the request - this timer is reset when any data is received.",
      "func":"( unsigned_1 )",
      "name":"SetHTTPRequestNetworkActivityTimeout",
      "return":"bool"
    },{
      "desc":"Set the literal body of a post - invalid after setting a post parameter.",
      "func":"( string_1, string_2 )",
      "name":"SetHTTPRequestRawPostBody",
      "return":"bool"
    }],
  "CInfoWorldLayer":[{
      "desc":"Hides this layer",
      "func":"()",
      "name":"HideWorldLayer",
      "return":"void"
    },{
      "desc":"Shows this layer",
      "func":"()",
      "name":"ShowWorldLayer",
      "return":"void"
    }],
  "CBaseFlex":[{
      "desc":"Returns the instance of the oldest active scene entity (if any).",
      "func":"()",
      "name":"GetCurrentScene",
      "return":"handle"
    },{
      "desc":"Returns the instance of the scene entity at the specified index.",
      "func":"( int index )",
      "name":"GetSceneByIndex",
      "return":"handle"
    },{
      "desc":"( vcd file, delay ) - play specified vcd file",
      "func":"( string pszScene, float flDelay )",
      "name":"ScriptPlayScene",
      "return":"float"
    }],
  "CSceneEntity":[{
      "desc":"Adds a team (by index) to the broadcast list",
      "func":"( int_1 )",
      "name":"AddBroadcastTeamTarget",
      "return":"void"
    },{
      "desc":"Cancel scene playback",
      "func":"()",
      "name":"Cancel",
      "return":"void"
    },{
      "desc":"Returns length of this scene in seconds.",
      "func":"()",
      "name":"EstimateLength",
      "return":"float"
    },{
      "desc":"Get the camera",
      "func":"()",
      "name":"FindCamera",
      "return":"handle"
    },{
      "desc":"given an entity reference, such as !target, get actual entity from scene object",
      "func":"( string_1 )",
      "name":"FindNamedEntity",
      "return":"handle"
    },{
      "desc":"If this scene is currently paused.",
      "func":"()",
      "name":"IsPaused",
      "return":"bool"
    },{
      "desc":"If this scene is currently playing.",
      "func":"()",
      "name":"IsPlayingBack",
      "return":"bool"
    },{
      "desc":"given a dummy scene name and a vcd string, load the scene",
      "func":"( string_1, string_2 )",
      "name":"LoadSceneFromString",
      "return":"bool"
    },{
      "desc":"Removes a team (by index) from the broadcast list",
      "func":"( int_1 )",
      "name":"RemoveBroadcastTeamTarget",
      "return":"void"
    },{
      "desc":"Start scene playback, takes activatorEntity as param",
      "func":"( handle_1 )",
      "name":"Start",
      "return":"void"
    }],
  "CDOTA_Ability_Lua":[{
      "desc":"Determine whether an issued command with no target is valid.",
      "func":"()",
      "name":"CastFilterResult",
      "return":"int"
    },{
      "desc":"(Vector vLocation) Determine whether an issued command on a location is valid.",
      "func":"( Vector vLocation )",
      "name":"CastFilterResultLocation",
      "return":"int"
    },{
      "desc":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
      "func":"( handle hTarget )",
      "name":"CastFilterResultTarget",
      "return":"int"
    },{
      "desc":"Controls the size of the AOE casting cursor.",
      "func":"()",
      "name":"GetAOERadius",
      "return":"float"
    },{
      "desc":"Returns abilities that are stolen simultaneously, or otherwise related in functionality.",
      "func":"()",
      "name":"GetAssociatedPrimaryAbilities",
      "return":"string"
    },{
      "desc":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.",
      "func":"()",
      "name":"GetAssociatedSecondaryAbilities",
      "return":"string"
    },{
      "desc":"Return cast behavior type of this ability.",
      "func":"()",
      "name":"GetBehavior",
      "return":"uint64"
    },{
      "desc":"Return casting animation of this ability.",
      "func":"()",
      "name":"GetCastAnimation",
      "return":"int"
    },{
      "desc":"Return cast point of this ability.",
      "func":"()",
      "name":"GetCastPoint",
      "return":"float"
    },{
      "desc":"Return cast range of this ability.",
      "func":"( Vector vLocation, handle hTarget )",
      "name":"GetCastRange",
      "return":"int"
    },{
      "desc":"Return channel animation of this ability.",
      "func":"()",
      "name":"GetChannelAnimation",
      "return":"int"
    },{
      "desc":"Return the channel time of this ability.",
      "func":"()",
      "name":"GetChannelTime",
      "return":"float"
    },{
      "desc":"Return mana cost at the given level per second while channeling (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetChannelledManaCostPerSecond",
      "return":"int"
    },{
      "desc":"Return who hears speech when this spell is cast.",
      "func":"()",
      "name":"GetConceptRecipientType",
      "return":"int"
    },{
      "desc":"Return cooldown of this ability.",
      "func":"( int iLevel )",
      "name":"GetCooldown",
      "return":"float"
    },{
      "desc":"Return the error string of a failed command with no target.",
      "func":"()",
      "name":"GetCustomCastError",
      "return":"string"
    },{
      "desc":"(Vector vLocation) Return the error string of a failed command on a location.",
      "func":"( Vector vLocation )",
      "name":"GetCustomCastErrorLocation",
      "return":"string"
    },{
      "desc":"(HSCRIPT hTarget) Return the error string of a failed command on a target.",
      "func":"( handle hTarget )",
      "name":"GetCustomCastErrorTarget",
      "return":"string"
    },{
      "desc":"Return gold cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetGoldCost",
      "return":"int"
    },{
      "desc":"Returns the name of the modifier applied passively by this ability.",
      "func":"()",
      "name":"GetIntrinsicModifierName",
      "return":"string"
    },{
      "desc":"Return mana cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetManaCost",
      "return":"int"
    },{
      "desc":"Return the animation rate of the cast animation.",
      "func":"()",
      "name":"GetPlaybackRateOverride",
      "return":"float"
    },{
      "desc":"Returns true if this ability can be used when not on the action panel.",
      "func":"()",
      "name":"IsHiddenAbilityCastable",
      "return":"bool"
    },{
      "desc":"Returns true if this ability is hidden when stolen by Spell Steal.",
      "func":"()",
      "name":"IsHiddenWhenStolen",
      "return":"bool"
    },{
      "desc":"Returns true if this ability is refreshed by Refresher Orb.",
      "func":"()",
      "name":"IsRefreshable",
      "return":"bool"
    },{
      "desc":"Returns true if this ability can be stolen by Spell Steal.",
      "func":"()",
      "name":"IsStealable",
      "return":"bool"
    },{
      "desc":"Cast time did not complete successfully.",
      "func":"()",
      "name":"OnAbilityPhaseInterrupted",
      "return":"void"
    },{
      "desc":"Cast time begins (return true for successful cast).",
      "func":"()",
      "name":"OnAbilityPhaseStart",
      "return":"bool"
    },{
      "desc":"The ability was pinged (nPlayerID, bCtrlHeld).",
      "func":"( int nPlayerID, bool bCtrlHeld )",
      "name":"OnAbilityPinged",
      "return":"void"
    },{
      "desc":"(bool bInterrupted) Channel finished.",
      "func":"( bool bInterrupted )",
      "name":"OnChannelFinish",
      "return":"void"
    },{
      "desc":"(float flInterval) Channeling is taking place.",
      "func":"( float flInterval )",
      "name":"OnChannelThink",
      "return":"void"
    },{
      "desc":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus.",
      "func":"()",
      "name":"OnHeroCalculateStatBonus",
      "return":"void"
    },{
      "desc":"A hero has died in the vicinity (ie Urn), takes table of params.",
      "func":"( handle unit, handle attacker, handle table )",
      "name":"OnHeroDiedNearby",
      "return":"void"
    },{
      "desc":"Caster gained a level.",
      "func":"()",
      "name":"OnHeroLevelUp",
      "return":"void"
    },{
      "desc":"Caster inventory changed.",
      "func":"()",
      "name":"OnInventoryContentsChanged",
      "return":"void"
    },{
      "desc":"( HSCRIPT hItem ) Caster equipped item.",
      "func":"( handle hItem )",
      "name":"OnItemEquipped",
      "return":"void"
    },{
      "desc":"Caster died.",
      "func":"()",
      "name":"OnOwnerDied",
      "return":"void"
    },{
      "desc":"Caster respawned or spawned for the first time.",
      "func":"()",
      "name":"OnOwnerSpawned",
      "return":"void"
    },{
      "desc":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
      "func":"( handle hTarget, Vector vLocation )",
      "name":"OnProjectileHit",
      "return":"bool"
    },{
      "desc":"(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).",
      "func":"( handle hTarget, Vector vLocation, int iProjectileHandle )",
      "name":"OnProjectileHitHandle",
      "return":"bool"
    },{
      "desc":"(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid).",
      "func":"( handle hTarget, Vector vLocation, handle table )",
      "name":"OnProjectileHit_ExtraData",
      "return":"bool"
    },{
      "desc":"(Vector vLocation) Projectile is actively moving.",
      "func":"( Vector vLocation )",
      "name":"OnProjectileThink",
      "return":"void"
    },{
      "desc":"(int nProjectileHandle) Projectile is actively moving.",
      "func":"( int iProjectileHandle )",
      "name":"OnProjectileThinkHandle",
      "return":"void"
    },{
      "desc":"(Vector vLocation, table kv ) Projectile is actively moving.",
      "func":"( Vector vLocation, handle table )",
      "name":"OnProjectileThink_ExtraData",
      "return":"void"
    },{
      "desc":"Cast time finished, spell effects begin.",
      "func":"()",
      "name":"OnSpellStart",
      "return":"void"
    },{
      "desc":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
      "func":"( handle hSourceAbility )",
      "name":"OnStolen",
      "return":"void"
    },{
      "desc":"Ability is toggled on/off.",
      "func":"()",
      "name":"OnToggle",
      "return":"void"
    },{
      "desc":"Special behavior when lost by Spell Steal.",
      "func":"()",
      "name":"OnUnStolen",
      "return":"void"
    },{
      "desc":"Ability gained a level.",
      "func":"()",
      "name":"OnUpgrade",
      "return":"void"
    },{
      "desc":"Returns true if this ability will generate magic stick charges for nearby enemies.",
      "func":"()",
      "name":"ProcsMagicStick",
      "return":"bool"
    },{
      "desc":"Returns true if this ability should return to the default toggle state when its parent respawns.",
      "func":"()",
      "name":"ResetToggleOnRespawn",
      "return":"bool"
    },{
      "desc":"Return the type of speech used.",
      "func":"()",
      "name":"SpeakTrigger",
      "return":"int"
    }],
  "CPointClientUIWorldPanel":[{
      "desc":"Tells the panel to accept user input.",
      "func":"()",
      "name":"AcceptUserInput",
      "return":"void"
    },{
      "desc":"Adds CSS class(es) to the panel",
      "func":"( string pszClasses )",
      "name":"AddCSSClasses",
      "return":"void"
    },{
      "desc":"Tells the panel to ignore user input.",
      "func":"()",
      "name":"IgnoreUserInput",
      "return":"void"
    },{
      "desc":"Returns whether this entity is grabbable.",
      "func":"()",
      "name":"IsGrabbable",
      "return":"bool"
    },{
      "desc":"Remove CSS class(es) from the panel",
      "func":"( string pszClasses )",
      "name":"RemoveCSSClasses",
      "return":"void"
    }],
  "CPointEntity":[],
  "CDOTA_Ability_Nian_Leap":[{
      "desc":"Override playbackrate",
      "func":"( float flRate )",
      "name":"SetPlaybackRate",
      "return":"void"
    }],
  "CPhysicsProp":[{
      "desc":"Disable motion for the prop",
      "func":"()",
      "name":"DisableMotion",
      "return":"void"
    },{
      "desc":"Enable motion for the prop",
      "func":"()",
      "name":"EnableMotion",
      "return":"void"
    },{
      "desc":"Enable/disable dynamic vs dynamic continuous collision traces",
      "func":"( bool bIsDynamicVsDynamicContinuousEnabled )",
      "name":"SetDynamicVsDynamicContinuous",
      "return":"void"
    }],
  "CDOTA_Ability_Animation_Attack":[{
      "desc":"Override playbackrate",
      "func":"( float flRate )",
      "name":"SetPlaybackRate",
      "return":"void"
    }],
  "CDOTA_PlayerResource":[{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"AddAegisPickup",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int nReason )",
      "name":"AddCandyEvent",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, float flFarmValue, bool bEarnedValue )",
      "name":"AddClaimedFarm",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iCost )",
      "name":"AddGoldSpentOnSupport",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int nTeamNumber, handle hItem )",
      "name":"AddNeutralItemToStash",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"AddRunePickup",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nUnitOwnerPlayerID, int nOtherPlayerID )",
      "name":"AreUnitsSharedWithPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"CanRepick",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ClearKillsMatrix",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ClearLastHitMultikill",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ClearLastHitStreak",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ClearRawPlayerDamageMatrix",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ClearStreak",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetAegisPickups",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetAssists",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetBroadcasterChannel",
      "return":"unsigned"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetBroadcasterChannelSlot",
      "return":"unsigned"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetClaimedDenies",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID, bool bOnlyEarned )",
      "name":"GetClaimedFarm",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetClaimedMisses",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetConnectionState",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"( int iPlayerID, bool bTotal )",
      "name":"GetCreepDamageTaken",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetCustomBuybackCooldown",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetCustomBuybackCost",
      "return":"int"
    },{
      "desc":"Get the current custom team assignment for this player.",
      "func":"( int iPlayerID )",
      "name":"GetCustomTeamAssignment",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iVictimID )",
      "name":"GetDamageDoneToHero",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetDeaths",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetDenies",
      "return":"int"
    },{
      "desc":"(nPlayerID, nActionID)",
      "func":"( int nPlayerID, unsigned unActionID )",
      "name":"GetEventGameCustomActionClaimCount",
      "return":"int"
    },{
      "desc":"(nPlayerID, pActionName)",
      "func":"( int nPlayerID, string pActionName )",
      "name":"GetEventGameCustomActionClaimCountByName",
      "return":"int"
    },{
      "desc":"",
      "func":"( int nPlayerID )",
      "name":"GetEventPointsForPlayerID",
      "return":"unsigned"
    },{
      "desc":"",
      "func":"( int nPlayerID )",
      "name":"GetEventPremiumPoints",
      "return":"unsigned"
    },{
      "desc":"",
      "func":"( int nPlayerID )",
      "name":"GetEventRanks",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGold",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldLostToDeath",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldPerMin",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldSpentOnBuybacks",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldSpentOnConsumables",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldSpentOnItems",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetGoldSpentOnSupport",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetHealing",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID, bool bTotal )",
      "name":"GetHeroDamageTaken",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetKills",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iVictimID )",
      "name":"GetKillsDoneToHero",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetLastHitMultikill",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetLastHitStreak",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetLastHits",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetLevel",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetLiveSpectatorTeam",
      "return":"<unknown>"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetMisses",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetNearbyCreepDeaths",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetNetWorth",
      "return":"int"
    },{
      "desc":"",
      "func":"( int nCourierIndex, int nTeamNumber )",
      "name":"GetNthCourierForTeam",
      "return":"handle"
    },{
      "desc":"",
      "func":"( int iTeamNumber, int iNthPlayer )",
      "name":"GetNthPlayerIDOnTeam",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetNumConsumablesPurchased",
      "return":"int"
    },{
      "desc":"",
      "func":"( int nTeamNumber )",
      "name":"GetNumCouriersForTeam",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetNumItemsPurchased",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetPartyID",
      "return":"uint64"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetPlayer",
      "return":"handle"
    },{
      "desc":"Includes spectators and players not assigned to a team",
      "func":"()",
      "name":"GetPlayerCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iTeam )",
      "name":"GetPlayerCountForTeam",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetPlayerLoadedCompletely",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetPlayerName",
      "return":"string"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetRawPlayerDamage",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetReliableGold",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetRespawnSeconds",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetRoshanKills",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetRunePickups",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetSelectedHeroEntity",
      "return":"handle"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetSelectedHeroID",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetSelectedHeroName",
      "return":"string"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetSteamAccountID",
      "return":"unsigned"
    },{
      "desc":"Get the 64 bit steam ID for a given player.",
      "func":"( int iPlayerID )",
      "name":"GetSteamID",
      "return":"uint64"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetStreak",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetStuns",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTeam",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iTeam )",
      "name":"GetTeamKills",
      "return":"int"
    },{
      "desc":"Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game",
      "func":"()",
      "name":"GetTeamPlayerCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTimeOfLastConsumablePurchase",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTimeOfLastDeath",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTimeOfLastItemPurchase",
      "return":"float"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTotalEarnedGold",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTotalEarnedXP",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTotalGoldSpent",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID, bool bTotal )",
      "name":"GetTowerDamageTaken",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetTowerKills",
      "return":"int"
    },{
      "desc":"",
      "func":"( int nPlayerID, int nOtherPlayerID )",
      "name":"GetUnitShareMaskForPlayer",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetUnreliableGold",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"GetXPPerMin",
      "return":"float"
    },{
      "desc":"Does this player have a custom game ticket for this game?",
      "func":"( int iPlayerID )",
      "name":"HasCustomGameTicketForPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"HasRandomed",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"HasSelectedHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasSetEventGameCustomActionClaimCount",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HaveAllPlayersJoined",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iVictimID )",
      "name":"IncrementAssists",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementClaimedDenies",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementClaimedMisses",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iKillerID )",
      "name":"IncrementDeaths",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementDenies",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iVictimID )",
      "name":"IncrementKills",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementLastHitMultikill",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementLastHitStreak",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementLastHits",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementMisses",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementNearbyCreepDeaths",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IncrementStreak",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iXP, int nReason )",
      "name":"IncrementTotalEarnedXP",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsBroadcaster",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int nPlayerID, int nOtherPlayerID )",
      "name":"IsDisableHelpSetForPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsFakeClient",
      "return":"bool"
    },{
      "desc":"",
      "func":"( string pHeroname, bool bIgnoreUnrevealedPick )",
      "name":"IsHeroSelected",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int nUnitOwnerPlayerID, int nOtherPlayerID )",
      "name":"IsHeroSharedWithPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsValidPlayer",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsValidPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsValidTeamPlayer",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"IsValidTeamPlayerID",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iGoldChange, bool bReliable, int nReason )",
      "name":"ModifyGold",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"NumPlayers",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"NumTeamPlayers",
      "return":"int"
    },{
      "desc":"Increment or decrement consumable charges (nPlayerID, item_definition_index, nChargeIncrementOrDecrement)",
      "func":"( int iPlayerID, int item_definition_index, int nChargeIncrementOrDecrement )",
      "name":"RecordConsumableAbilityChargeChange",
      "return":"void"
    },{
      "desc":"(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP",
      "func":"( int iPlayerID, string pszHeroClass, int nGold, int nXP )",
      "name":"ReplaceHeroWith",
      "return":"handle"
    },{
      "desc":"",
      "func":"( int nPlayerID )",
      "name":"ResetBuybackCostTime",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"ResetTotalEarnedGold",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nPlayerID, float flBuybackCooldown )",
      "name":"SetBuybackCooldownTime",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nPlayerID, float flBuybackCooldown )",
      "name":"SetBuybackGoldLimitTime",
      "return":"void"
    },{
      "desc":"(playerID, entity) - force the given player's camera to follow the given entity",
      "func":"( int nPlayerID, handle hTarget )",
      "name":"SetCameraTarget",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, bool bCanRepick )",
      "name":"SetCanRepick",
      "return":"void"
    },{
      "desc":"Set the buyback cooldown for this player.",
      "func":"( int iPlayerID, float flCooldownTime )",
      "name":"SetCustomBuybackCooldown",
      "return":"void"
    },{
      "desc":"Set the buyback cost for this player.",
      "func":"( int iPlayerID, int iGoldCost )",
      "name":"SetCustomBuybackCost",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iParam )",
      "name":"SetCustomIntParam",
      "return":"void"
    },{
      "desc":"Set custom color for player (minimap, scoreboard, etc)",
      "func":"( int iPlayerID, int r, int g, int b )",
      "name":"SetCustomPlayerColor",
      "return":"void"
    },{
      "desc":"Set custom team assignment for this player.",
      "func":"( int iPlayerID, int iTeamAssignment )",
      "name":"SetCustomTeamAssignment",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iGold, bool bReliable )",
      "name":"SetGold",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"SetHasRandomed",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iLastBuybackTime )",
      "name":"SetLastBuybackTime",
      "return":"void"
    },{
      "desc":"Set the forced selection entity for a player.",
      "func":"( int nPlayerID, handle hEntity )",
      "name":"SetOverrideSelectionEntity",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nPlayerID, int nOtherPlayerID, int nFlag, bool bState )",
      "name":"SetUnitShareMaskForPlayer",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iCost, int iReason )",
      "name":"SpendGold",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID, int iTeamNumber, int desiredSlot )",
      "name":"UpdateTeamSlot",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pHeroFilename, bool bIgnoreUnrevealedPick )",
      "name":"WhoSelectedHero",
      "return":"int"
    }],
  "CParticleSystem":[],
  "CDOTA_Modifier_Lua_Horizontal_Motion":[{
      "desc":"Starts the horizontal motion controller effects for this buff.  Returns true if successful.",
      "func":"()",
      "name":"ApplyHorizontalMotionController",
      "return":"bool"
    },{
      "desc":"Get the priority",
      "func":"()",
      "name":"GetPriority",
      "return":"int"
    },{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnHorizontalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Set the priority",
      "func":"( int nMotionPriority )",
      "name":"SetPriority",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateHorizontalMotion",
      "return":"void"
    }],
  "CNativeOutputs":[{
      "desc":"Add an output",
      "func":"( string_1, string_2 )",
      "name":"AddOutput",
      "return":"void"
    },{
      "desc":"Initialize with number of outputs",
      "func":"( int_1 )",
      "name":"Init",
      "return":"void"
    }],
  "CDOTA_Unit_CustomGameAnnouncer":[{
      "desc":"Determines whether response criteria is matched on server or client",
      "func":"( bool bIsServerAuthoritative )",
      "name":"SetServerAuthoritative",
      "return":"void"
    }],
  "Convars":[{
      "desc":"GetBool(name) : returns the convar as a boolean flag.",
      "func":"( string_1 )",
      "name":"GetBool",
      "return":"table"
    },{
      "desc":"GetCommandClient() : returns the player who issued this console command.",
      "func":"()",
      "name":"GetCommandClient",
      "return":"handle"
    },{
      "desc":"GetDOTACommandClient() : returns the DOTA player who issued this console command.",
      "func":"()",
      "name":"GetDOTACommandClient",
      "return":"handle"
    },{
      "desc":"GetFloat(name) : returns the convar as a float. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetFloat",
      "return":"table"
    },{
      "desc":"GetInt(name) : returns the convar as an int. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetInt",
      "return":"table"
    },{
      "desc":"GetStr(name) : returns the convar as a string. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetStr",
      "return":"table"
    },{
      "desc":"RegisterCommand(name, fn, helpString, flags) : register a console command.",
      "func":"( string_1, handle_2, string_3, int_4 )",
      "name":"RegisterCommand",
      "return":"void"
    },{
      "desc":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.",
      "func":"( string_1, string_2, string_3, int_4 )",
      "name":"RegisterConvar",
      "return":"void"
    },{
      "desc":"SetBool(name, val) : sets the value of the convar to the bool.",
      "func":"( string_1, bool_2 )",
      "name":"SetBool",
      "return":"void"
    },{
      "desc":"SetFloat(name, val) : sets the value of the convar to the float.",
      "func":"( string_1, float_2 )",
      "name":"SetFloat",
      "return":"void"
    },{
      "desc":"SetInt(name, val) : sets the value of the convar to the int.",
      "func":"( string_1, int_2 )",
      "name":"SetInt",
      "return":"void"
    },{
      "desc":"SetStr(name, val) : sets the value of the convar to the string.",
      "func":"( string_1, string_2 )",
      "name":"SetStr",
      "return":"void"
    }],
  "CDOTA_Item_Lua":[{
      "desc":"Returns true if this item can be picked up by the target unit.",
      "func":"( handle hUnit )",
      "name":"CanUnitPickUp",
      "return":"bool"
    },{
      "desc":"Determine whether an issued command with no target is valid.",
      "func":"()",
      "name":"CastFilterResult",
      "return":"int"
    },{
      "desc":"(Vector vLocation) Determine whether an issued command on a location is valid.",
      "func":"( Vector vLocation )",
      "name":"CastFilterResultLocation",
      "return":"int"
    },{
      "desc":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
      "func":"( handle hTarget )",
      "name":"CastFilterResultTarget",
      "return":"int"
    },{
      "desc":"Returns abilities that are stolen simultaneously, or otherwise related in functionality.",
      "func":"()",
      "name":"GetAssociatedPrimaryAbilities",
      "return":"string"
    },{
      "desc":"Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities.",
      "func":"()",
      "name":"GetAssociatedSecondaryAbilities",
      "return":"string"
    },{
      "desc":"Return cast behavior type of this ability.",
      "func":"()",
      "name":"GetBehavior",
      "return":"int"
    },{
      "desc":"Return cast range of this ability.",
      "func":"( Vector vLocation, handle hTarget )",
      "name":"GetCastRange",
      "return":"int"
    },{
      "desc":"Return the channel time of this ability.",
      "func":"()",
      "name":"GetChannelTime",
      "return":"float"
    },{
      "desc":"Return mana cost at the given level per second while channeling (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetChannelledManaCostPerSecond",
      "return":"int"
    },{
      "desc":"Return who hears speech when this spell is cast.",
      "func":"()",
      "name":"GetConceptRecipientType",
      "return":"int"
    },{
      "desc":"Return cooldown of this ability.",
      "func":"( int iLevel )",
      "name":"GetCooldown",
      "return":"float"
    },{
      "desc":"Return the error string of a failed command with no target.",
      "func":"()",
      "name":"GetCustomCastError",
      "return":"string"
    },{
      "desc":"(Vector vLocation) Return the error string of a failed command on a location.",
      "func":"( Vector vLocation )",
      "name":"GetCustomCastErrorLocation",
      "return":"string"
    },{
      "desc":"(HSCRIPT hTarget) Return the error string of a failed command on a target.",
      "func":"( handle hTarget )",
      "name":"GetCustomCastErrorTarget",
      "return":"string"
    },{
      "desc":"Return gold cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetGoldCost",
      "return":"int"
    },{
      "desc":"Returns the name of the modifier applied passively by this ability.",
      "func":"()",
      "name":"GetIntrinsicModifierName",
      "return":"string"
    },{
      "desc":"Return mana cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetManaCost",
      "return":"int"
    },{
      "desc":"Return the animation rate of the cast animation.",
      "func":"()",
      "name":"GetPlaybackRateOverride",
      "return":"float"
    },{
      "desc":"Returns true if this ability can be used when not on the action panel.",
      "func":"()",
      "name":"IsHiddenAbilityCastable",
      "return":"bool"
    },{
      "desc":"Returns true if this ability is hidden when stolen by Spell Steal.",
      "func":"()",
      "name":"IsHiddenWhenStolen",
      "return":"bool"
    },{
      "desc":"Returns whether this item is muted or not.",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    },{
      "desc":"Returns true if this ability is refreshed by Refresher Orb.",
      "func":"()",
      "name":"IsRefreshable",
      "return":"bool"
    },{
      "desc":"Returns true if this ability can be stolen by Spell Steal.",
      "func":"()",
      "name":"IsStealable",
      "return":"bool"
    },{
      "desc":"Cast time did not complete successfully.",
      "func":"()",
      "name":"OnAbilityPhaseInterrupted",
      "return":"void"
    },{
      "desc":"Cast time begins (return true for successful cast).",
      "func":"()",
      "name":"OnAbilityPhaseStart",
      "return":"bool"
    },{
      "desc":"(bool bInterrupted) Channel finished.",
      "func":"( bool bInterrupted )",
      "name":"OnChannelFinish",
      "return":"void"
    },{
      "desc":"(float flInterval) Channeling is taking place.",
      "func":"( float flInterval )",
      "name":"OnChannelThink",
      "return":"void"
    },{
      "desc":"Runs when item's charge count changes.",
      "func":"()",
      "name":"OnChargeCountChanged",
      "return":"void"
    },{
      "desc":"Caster (hero only) gained a level, skilled an ability, or received a new stat bonus.",
      "func":"()",
      "name":"OnHeroCalculateStatBonus",
      "return":"void"
    },{
      "desc":"A hero has died in the vicinity (ie Urn), takes table of params.",
      "func":"( handle unit, handle attacker, handle table )",
      "name":"OnHeroDiedNearby",
      "return":"void"
    },{
      "desc":"Caster gained a level.",
      "func":"()",
      "name":"OnHeroLevelUp",
      "return":"void"
    },{
      "desc":"Caster inventory changed.",
      "func":"()",
      "name":"OnInventoryContentsChanged",
      "return":"void"
    },{
      "desc":"( HSCRIPT hItem ) Caster equipped item.",
      "func":"( handle hItem )",
      "name":"OnItemEquipped",
      "return":"void"
    },{
      "desc":"Caster died.",
      "func":"()",
      "name":"OnOwnerDied",
      "return":"void"
    },{
      "desc":"Caster respawned or spawned for the first time.",
      "func":"()",
      "name":"OnOwnerSpawned",
      "return":"void"
    },{
      "desc":"(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
      "func":"( handle hTarget, Vector vLocation )",
      "name":"OnProjectileHit",
      "return":"bool"
    },{
      "desc":"(Vector vLocation) Projectile is actively moving.",
      "func":"( Vector vLocation )",
      "name":"OnProjectileThink",
      "return":"void"
    },{
      "desc":"Cast time finished, spell effects begin.",
      "func":"()",
      "name":"OnSpellStart",
      "return":"void"
    },{
      "desc":"( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
      "func":"( handle hSourceAbility )",
      "name":"OnStolen",
      "return":"void"
    },{
      "desc":"Ability is toggled on/off.",
      "func":"()",
      "name":"OnToggle",
      "return":"void"
    },{
      "desc":"Special behavior when lost by Spell Steal.",
      "func":"()",
      "name":"OnUnStolen",
      "return":"void"
    },{
      "desc":"Ability gained a level.",
      "func":"()",
      "name":"OnUpgrade",
      "return":"void"
    },{
      "desc":"Returns true if this ability will generate magic stick charges for nearby enemies.",
      "func":"()",
      "name":"ProcsMagicStick",
      "return":"bool"
    },{
      "desc":"Return the type of speech used.",
      "func":"()",
      "name":"SpeakTrigger",
      "return":"int"
    }],
  "CDOTA_BaseNPC_Hero":[{
      "desc":"Params: Float XP, Bool applyBotDifficultyScaling",
      "func":"( float flXP, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal )",
      "name":"AddExperience",
      "return":"bool"
    },{
      "desc":"Spend the gold and buyback with this hero.",
      "func":"()",
      "name":"Buyback",
      "return":"void"
    },{
      "desc":"Recalculate all stats after the hero gains stats.",
      "func":"()",
      "name":"CalculateStatBonus",
      "return":"void"
    },{
      "desc":"Returns boolean value result of buyback gold limit time less than game time.",
      "func":"()",
      "name":"CanEarnGold",
      "return":"bool"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"ClearLastHitMultikill",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"ClearLastHitStreak",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"ClearStreak",
      "return":"void"
    },{
      "desc":"Gets the current unspent ability points.",
      "func":"()",
      "name":"GetAbilityPoints",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAdditionalOwnedUnits",
      "return":"table"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAgility",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAgilityGain",
      "return":"float"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetAssists",
      "return":"int"
    },{
      "desc":"",
      "func":"( int nIndex )",
      "name":"GetAttacker",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseAgility",
      "return":"float"
    },{
      "desc":"Hero damage is also affected by attributes.",
      "func":"()",
      "name":"GetBaseDamageMax",
      "return":"int"
    },{
      "desc":"Hero damage is also affected by attributes.",
      "func":"()",
      "name":"GetBaseDamageMin",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseIntellect",
      "return":"float"
    },{
      "desc":"Returns the base mana regen.",
      "func":"()",
      "name":"GetBaseManaRegen",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseStrength",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBonusDamageFromPrimaryStat",
      "return":"int"
    },{
      "desc":"Return float value for the amount of time left on cooldown for this hero's buyback.",
      "func":"()",
      "name":"GetBuybackCooldownTime",
      "return":"float"
    },{
      "desc":"Return integer value for the gold cost of a buyback.",
      "func":"( bool bReturnOldValues )",
      "name":"GetBuybackCost",
      "return":"int"
    },{
      "desc":"Returns the amount of time gold gain is limited after buying back.",
      "func":"()",
      "name":"GetBuybackGoldLimitTime",
      "return":"float"
    },{
      "desc":"Returns the amount of XP ",
      "func":"()",
      "name":"GetCurrentXP",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDeathGoldCost",
      "return":"int"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetDeaths",
      "return":"int"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetDenies",
      "return":"int"
    },{
      "desc":"Returns gold amount for the player owning this hero",
      "func":"()",
      "name":"GetGold",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetGoldBounty",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetHeroID",
      "return":"int"
    },{
      "desc":"Hero attack speed is also affected by agility.",
      "func":"()",
      "name":"GetIncreasedAttackSpeed",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIntellect",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIntellectGain",
      "return":"float"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetKills",
      "return":"int"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetLastHits",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetMostRecentDamageTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetMultipleKillCount",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetNumAttackers",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetNumItemsInInventory",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetNumItemsInStash",
      "return":"int"
    },{
      "desc":"Hero armor is affected by attributes.",
      "func":"()",
      "name":"GetPhysicalArmorBaseValue",
      "return":"float"
    },{
      "desc":"Returns player ID of the player owning this hero",
      "func":"()",
      "name":"GetPlayerID",
      "return":"int"
    },{
      "desc":"0 = strength, 1 = agility, 2 = intelligence.",
      "func":"()",
      "name":"GetPrimaryAttribute",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetPrimaryStatValue",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetReplicatingOtherHero",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetRespawnTime",
      "return":"float"
    },{
      "desc":"Is this hero prevented from respawning?",
      "func":"()",
      "name":"GetRespawnsDisabled",
      "return":"bool"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"GetStreak",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStrength",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStrengthGain",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetTimeUntilRespawn",
      "return":"float"
    },{
      "desc":"Get wearable entity in slot (slot)",
      "func":"( int nSlotType )",
      "name":"GetTogglableWearable",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"HasAnyAvailableInventorySpace",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasFlyingVision",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasOwnerAbandoned",
      "return":"bool"
    },{
      "desc":"Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling",
      "func":"( string pItemName, bool bIncludeStashCombines, bool bAllowSelling )",
      "name":"HasRoomForItem",
      "return":"int"
    },{
      "desc":"Levels up the hero, true or false to play effects.",
      "func":"( bool bPlayEffects )",
      "name":"HeroLevelUp",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"( int iKillerID )",
      "name":"IncrementAssists",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"( int iKillerID )",
      "name":"IncrementDeaths",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementDenies",
      "return":"void"
    },{
      "desc":"Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource.",
      "func":"( int iVictimID )",
      "name":"IncrementKills",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementLastHitMultikill",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementLastHitStreak",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementLastHits",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementNearbyCreepDeaths",
      "return":"void"
    },{
      "desc":"Value is stored in PlayerResource.",
      "func":"()",
      "name":"IncrementStreak",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"IsBuybackDisabledByReapersScythe",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsReincarnating",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStashEnabled",
      "return":"bool"
    },{
      "desc":"Args: Hero, Inflictor",
      "func":"( handle hHero, handle hInflictor )",
      "name":"KilledHero",
      "return":"void"
    },{
      "desc":"Adds passed value to base attribute value, then calls CalculateStatBonus.",
      "func":"( float flNewAgility )",
      "name":"ModifyAgility",
      "return":"void"
    },{
      "desc":"Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason",
      "func":"( int iGoldChange, bool bReliable, int iReason )",
      "name":"ModifyGold",
      "return":"int"
    },{
      "desc":"Gives this hero some gold, using the gold filter if extra filtering is on.  Args: int nGoldChange, bool bReliable, int reason",
      "func":"( int iGoldChange, bool bReliabe, int iReason )",
      "name":"ModifyGoldFiltered",
      "return":"int"
    },{
      "desc":"Adds passed value to base attribute value, then calls CalculateStatBonus.",
      "func":"( float flNewIntellect )",
      "name":"ModifyIntellect",
      "return":"void"
    },{
      "desc":"Adds passed value to base attribute value, then calls CalculateStatBonus.",
      "func":"( float flNewStrength )",
      "name":"ModifyStrength",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PerformTaunt",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"RecordLastHit",
      "return":"void"
    },{
      "desc":"Respawn this hero.",
      "func":"( bool bBuyBack, bool bRespawnPenalty )",
      "name":"RespawnHero",
      "return":"void"
    },{
      "desc":"Sets the current unspent ability points.",
      "func":"( int iPoints )",
      "name":"SetAbilityPoints",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flAgility )",
      "name":"SetBaseAgility",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flIntellect )",
      "name":"SetBaseIntellect",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flStrength )",
      "name":"SetBaseStrength",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nDifficulty )",
      "name":"SetBotDifficulty",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bBuybackDisabled )",
      "name":"SetBuyBackDisabledByReapersScythe",
      "return":"void"
    },{
      "desc":"Sets the buyback cooldown time.",
      "func":"( float flTime )",
      "name":"SetBuybackCooldownTime",
      "return":"void"
    },{
      "desc":"Set the amount of time gold gain is limited after buying back.",
      "func":"( float flTime )",
      "name":"SetBuybackGoldLimitTime",
      "return":"void"
    },{
      "desc":"Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!",
      "func":"( int iValue )",
      "name":"SetCustomDeathXP",
      "return":"void"
    },{
      "desc":"Sets the gold amount for the player owning this hero",
      "func":"( int iGold, bool bReliable )",
      "name":"SetGold",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iPlayerID )",
      "name":"SetPlayerID",
      "return":"void"
    },{
      "desc":"Set this hero's primary attribute value.",
      "func":"( int nPrimaryAttribute )",
      "name":"SetPrimaryAttribute",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector vOrigin )",
      "name":"SetRespawnPosition",
      "return":"void"
    },{
      "desc":"Prevent this hero from respawning.",
      "func":"( bool bDisableRespawns )",
      "name":"SetRespawnsDisabled",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bEnabled )",
      "name":"SetStashEnabled",
      "return":"void"
    },{
      "desc":"",
      "func":"( float time )",
      "name":"SetTimeUntilRespawn",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ShouldDoFlyHeightVisual",
      "return":"bool"
    },{
      "desc":"Args: int nGold, int nReason",
      "func":"( int iCost, int iReason )",
      "name":"SpendGold",
      "return":"void"
    },{
      "desc":"This upgrades the passed ability if it exists and the hero has enough ability points.",
      "func":"( handle hAbility )",
      "name":"UpgradeAbility",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"WillReincarnate",
      "return":"bool"
    }],
  "CDOTA_Modifier_Lua_Vertical_Motion":[{
      "desc":"Starts the vertical motion controller effects for this buff.  Returns true if successful.",
      "func":"()",
      "name":"ApplyVerticalMotionController",
      "return":"bool"
    },{
      "desc":"Get the priority",
      "func":"()",
      "name":"GetMotionPriority",
      "return":"int"
    },{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnVerticalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Set the priority",
      "func":"( int nMotionPriority )",
      "name":"SetMotionPriority",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateVerticalMotion",
      "return":"void"
    }],
  "CDOTAVoteSystem":[{
      "desc":"Starts a vote, based upon a table of parameters",
      "func":"( handle_1 )",
      "name":"StartVote",
      "return":"void"
    }],
  "CDOTA_BaseNPC_Building":[{
      "desc":"Get the invulnerability count for a building.",
      "func":"()",
      "name":"GetInvulnCount",
      "return":"int"
    },{
      "desc":"Set the invulnerability counter of this building.",
      "func":"( int nInvulnCount )",
      "name":"SetInvulnCount",
      "return":"void"
    }],
  "CDOTAGamerules":[{
      "desc":"Spawn a bot player of the passed hero name, player name, and team.",
      "func":"( string_1, string_2, int_3, string_4, bool_5 )",
      "name":"AddBotPlayerWithEntityScript",
      "return":"handle"
    },{
      "desc":"Event-only ( string szNameSuffix, int nStars, int nMaxStars, int nExtraData1, int nExtraData2 )",
      "func":"( string_1, unsigned_2, unsigned_3, unsigned_4, unsigned_5, unsigned_6, unsigned_7, unsigned_8, unsigned_9 )",
      "name":"AddEventMetadataLeaderboardEntry",
      "return":"bool"
    },{
      "desc":"Event-only ( string szNameSuffix, int nScore, int nExtraData1, int nExtraData2 )",
      "func":"( string_1, unsigned_2, unsigned_3, unsigned_4, unsigned_5, unsigned_6, unsigned_7, unsigned_8 )",
      "name":"AddEventMetadataLeaderboardEntryRawScore",
      "return":"bool"
    },{
      "desc":"Add an item to the whitelist",
      "func":"( string_1 )",
      "name":"AddItemToWhiteList",
      "return":"void"
    },{
      "desc":"Add a point on the minimap.",
      "func":"( int_1, Vector_2, int_3, int_4, int_5, int_6, float_7 )",
      "name":"AddMinimapDebugPoint",
      "return":"void"
    },{
      "desc":"Add a point on the minimap for a specific team.",
      "func":"( int_1, Vector_2, int_3, int_4, int_5, int_6, float_7, int_8 )",
      "name":"AddMinimapDebugPointForTeam",
      "return":"void"
    },{
      "desc":"Begin night stalker night.",
      "func":"( float_1 )",
      "name":"BeginNightstalkerNight",
      "return":"void"
    },{
      "desc":"Begin temporary night.",
      "func":"( float_1 )",
      "name":"BeginTemporaryNight",
      "return":"void"
    },{
      "desc":"Fills all the teams with bots if cheat mode is enabled.",
      "func":"()",
      "name":"BotPopulate",
      "return":"void"
    },{
      "desc":"Kills the ancient, etc.",
      "func":"()",
      "name":"Defeated",
      "return":"void"
    },{
      "desc":"true when we have waited some time after end of the game and not received signout",
      "func":"()",
      "name":"DidMatchSignoutTimeOut",
      "return":"bool"
    },{
      "desc":"Enabled (true) or disable (false) auto launch for custom game setup.",
      "func":"( bool_1 )",
      "name":"EnableCustomGameSetupAutoLaunch",
      "return":"void"
    },{
      "desc":"Sends a minimap ping to all players on the team",
      "func":"( int_1, float_2, float_3, handle_4, int_5 )",
      "name":"ExecuteTeamPing",
      "return":"void"
    },{
      "desc":"Indicate that the custom game setup phase is complete, and advance to the game.",
      "func":"()",
      "name":"FinishCustomGameSetup",
      "return":"void"
    },{
      "desc":"Spawn the next wave of creeps.",
      "func":"()",
      "name":"ForceCreepSpawn",
      "return":"void"
    },{
      "desc":"Transition game state to DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
      "func":"()",
      "name":"ForceGameStart",
      "return":"void"
    },{
      "desc":"Get the announcer for a team",
      "func":"( int_1 )",
      "name":"GetAnnouncer",
      "return":"handle"
    },{
      "desc":"Returns the hero unit names banned in this game, if any",
      "func":"()",
      "name":"GetBannedHeroes",
      "return":"table"
    },{
      "desc":"Returns the difficulty level of the custom game mode",
      "func":"()",
      "name":"GetCustomGameDifficulty",
      "return":"int"
    },{
      "desc":"Get whether a team is selectable during game setup",
      "func":"( int_1 )",
      "name":"GetCustomGameTeamMaxPlayers",
      "return":"int"
    },{
      "desc":"(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.",
      "func":"( bool_1, bool_2 )",
      "name":"GetDOTATime",
      "return":"float"
    },{
      "desc":"Returns difficulty level of the custom game mode",
      "func":"()",
      "name":"GetDifficulty",
      "return":"int"
    },{
      "desc":"Gets the Xth dropped item",
      "func":"( int_1 )",
      "name":"GetDroppedItem",
      "return":"handle"
    },{
      "desc":"Returns the number of seconds elapsed since the last frame was renderered. This time doesn't count up when the game is paused",
      "func":"()",
      "name":"GetGameFrameTime",
      "return":"float"
    },{
      "desc":"Get the game mode entity",
      "func":"()",
      "name":"GetGameModeEntity",
      "return":"handle"
    },{
      "desc":"Get a string value from the game session config (map options)",
      "func":"( string_1, string_2 )",
      "name":"GetGameSessionConfigValue",
      "return":"string"
    },{
      "desc":"Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused",
      "func":"()",
      "name":"GetGameTime",
      "return":"float"
    },{
      "desc":"Get the stock count of the item",
      "func":"( int_1, string_2, int_3 )",
      "name":"GetItemStockCount",
      "return":"int"
    },{
      "desc":"Get the time it takes to add a new item to stock",
      "func":"( int_1, string_2, int_3 )",
      "name":"GetItemStockDuration",
      "return":"float"
    },{
      "desc":"Get the time an item will be added to stock",
      "func":"( int_1, string_2, int_3 )",
      "name":"GetItemStockTime",
      "return":"float"
    },{
      "desc":"Get the MatchID for this game.",
      "func":"()",
      "name":"GetMatchID",
      "return":"uint64"
    },{
      "desc":"Have we received the post match signout message that includes reward information",
      "func":"()",
      "name":"GetMatchSignoutComplete",
      "return":"bool"
    },{
      "desc":"Gets next bounty rune spawn time",
      "func":"()",
      "name":"GetNextBountyRuneSpawnTime",
      "return":"float"
    },{
      "desc":"Gets next rune spawn time",
      "func":"()",
      "name":"GetNextRuneSpawnTime",
      "return":"float"
    },{
      "desc":"For New Bloom, get total damage taken by the Nian / Year Beast",
      "func":"()",
      "name":"GetNianTotalDamageTaken",
      "return":"int"
    },{
      "desc":"(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session",
      "func":"( int_1 )",
      "name":"GetPlayerCustomGameAccountRecord",
      "return":"table"
    },{
      "desc":"Get time remaining between state changes.",
      "func":"()",
      "name":"GetStateTransitionTime",
      "return":"float"
    },{
      "desc":"Get the time of day",
      "func":"()",
      "name":"GetTimeOfDay",
      "return":"float"
    },{
      "desc":"Get Weather Wind Direction Vector",
      "func":"()",
      "name":"GetWeatherWindDirection",
      "return":"Vector"
    },{
      "desc":"Increase an item's stock count, clamped to item max (nTeamNumber, szItemName, nCount, nPlayerID .",
      "func":"( int_1, string_2, int_3, int_4 )",
      "name":"IncreaseItemStock",
      "return":"void"
    },{
      "desc":"Are cheats enabled on the server",
      "func":"()",
      "name":"IsCheatMode",
      "return":"bool"
    },{
      "desc":"Is it day time?",
      "func":"()",
      "name":"IsDaytime",
      "return":"bool"
    },{
      "desc":"Returns whether the game is paused.",
      "func":"()",
      "name":"IsGamePaused",
      "return":"bool"
    },{
      "desc":"Returns whether hero respawn is enabled.",
      "func":"()",
      "name":"IsHeroRespawnEnabled",
      "return":"bool"
    },{
      "desc":"Are we in the ban phase of hero pick?",
      "func":"()",
      "name":"IsInBanPhase",
      "return":"bool"
    },{
      "desc":"Query an item in the whitelist",
      "func":"( string_1 )",
      "name":"IsItemInWhiteList",
      "return":"bool"
    },{
      "desc":"Is it night stalker night-time?",
      "func":"()",
      "name":"IsNightstalkerNight",
      "return":"bool"
    },{
      "desc":"Is it temporarily night-time?",
      "func":"()",
      "name":"IsTemporaryNight",
      "return":"bool"
    },{
      "desc":"Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.",
      "func":"( bool_1 )",
      "name":"LockCustomGameSetupTeamAssignment",
      "return":"void"
    },{
      "desc":"Makes the specified team lose",
      "func":"( int_1 )",
      "name":"MakeTeamLose",
      "return":"void"
    },{
      "desc":"Like ModifyGold, but will use the gold filter if SetFilterMoreGold has been set true",
      "func":"( int_1, int_2, bool_3, int_4 )",
      "name":"ModifyGoldFiltered",
      "return":"int"
    },{
      "desc":"Returns the number of items currently dropped on the ground",
      "func":"()",
      "name":"NumDroppedItems",
      "return":"int"
    },{
      "desc":"Whether a player has custom game host privileges (shuffle teams, etc.)",
      "func":"( handle_1 )",
      "name":"PlayerHasCustomGameHostPrivileges",
      "return":"bool"
    },{
      "desc":"Updates custom hero, unit and ability KeyValues in memory with the latest values from disk",
      "func":"()",
      "name":"Playtesting_UpdateAddOnKeyValues",
      "return":"void"
    },{
      "desc":"Prepare Dota lane style spawners with a given interval",
      "func":"( float_1 )",
      "name":"PrepareSpawners",
      "return":"void"
    },{
      "desc":"Removes a fake client",
      "func":"( int_1 )",
      "name":"RemoveFakeClient",
      "return":"void"
    },{
      "desc":"Remove an item from the whitelist",
      "func":"( string_1 )",
      "name":"RemoveItemFromWhiteList",
      "return":"void"
    },{
      "desc":"Restart after killing the ancient, etc.",
      "func":"()",
      "name":"ResetDefeated",
      "return":"void"
    },{
      "desc":"Restart gametime from 0",
      "func":"()",
      "name":"ResetGameTime",
      "return":"void"
    },{
      "desc":"Restart at custom game setup.",
      "func":"()",
      "name":"ResetToCustomGameSetup",
      "return":"void"
    },{
      "desc":"Restart the game at hero selection",
      "func":"()",
      "name":"ResetToHeroSelection",
      "return":"void"
    },{
      "desc":"Sends a message on behalf of a player.",
      "func":"( string_1, int_2, int_3 )",
      "name":"SendCustomMessage",
      "return":"void"
    },{
      "desc":"Sends a message on behalf of a player to the specified team.",
      "func":"( string_1, int_2, int_3, int_4 )",
      "name":"SendCustomMessageToTeam",
      "return":"void"
    },{
      "desc":"(flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
      "func":"( float_1 )",
      "name":"SetCreepMinimapIconScale",
      "return":"void"
    },{
      "desc":"Sets whether the regular Dota creeps spawn.",
      "func":"( bool_1 )",
      "name":"SetCreepSpawningEnabled",
      "return":"void"
    },{
      "desc":"(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)",
      "func":"( handle_1, handle_2 )",
      "name":"SetCustomGameAccountRecordSaveFunction",
      "return":"void"
    },{
      "desc":"Sets a flag to enable/disable the default music handling code for custom games",
      "func":"( bool_1 )",
      "name":"SetCustomGameAllowBattleMusic",
      "return":"void"
    },{
      "desc":"Sets a flag to enable/disable the default music handling code for custom games",
      "func":"( bool_1 )",
      "name":"SetCustomGameAllowHeroPickMusic",
      "return":"void"
    },{
      "desc":"Sets a flag to enable/disable the default music handling code for custom games",
      "func":"( bool_1 )",
      "name":"SetCustomGameAllowMusicAtGameStart",
      "return":"void"
    },{
      "desc":"Sets a flag to enable/disable the casting secondary abilities from units other than the player's own hero.",
      "func":"( bool_1 )",
      "name":"SetCustomGameAllowSecondaryAbilitiesOnOtherUnits",
      "return":"void"
    },{
      "desc":"Set number of hero bans each team gets",
      "func":"( int_1 )",
      "name":"SetCustomGameBansPerTeam",
      "return":"void"
    },{
      "desc":"Set the difficulty level of the custom game mode",
      "func":"( int_1 )",
      "name":"SetCustomGameDifficulty",
      "return":"void"
    },{
      "desc":"Sets the game end delay.",
      "func":"( float_1 )",
      "name":"SetCustomGameEndDelay",
      "return":"void"
    },{
      "desc":"Set the amount of time to wait for auto launch.",
      "func":"( float_1 )",
      "name":"SetCustomGameSetupAutoLaunchDelay",
      "return":"void"
    },{
      "desc":"Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever",
      "func":"( float_1 )",
      "name":"SetCustomGameSetupRemainingTime",
      "return":"void"
    },{
      "desc":"Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)",
      "func":"( float_1 )",
      "name":"SetCustomGameSetupTimeout",
      "return":"void"
    },{
      "desc":"Set whether a team is selectable during game setup",
      "func":"( int_1, int_2 )",
      "name":"SetCustomGameTeamMaxPlayers",
      "return":"void"
    },{
      "desc":"Sets the victory message.",
      "func":"( string_1 )",
      "name":"SetCustomVictoryMessage",
      "return":"void"
    },{
      "desc":"Sets the victory message duration.",
      "func":"( float_1 )",
      "name":"SetCustomVictoryMessageDuration",
      "return":"void"
    },{
      "desc":"Event-only ( table hMetadataTable )",
      "func":"( handle_1 )",
      "name":"SetEventMetadataCustomTable",
      "return":"bool"
    },{
      "desc":"Event-only ( table hMetadataTable )",
      "func":"( handle_1 )",
      "name":"SetEventSignoutCustomTable",
      "return":"bool"
    },{
      "desc":"Sets whether to filter more gold events than normal",
      "func":"( bool_1 )",
      "name":"SetFilterMoreGold",
      "return":"void"
    },{
      "desc":"Sets whether First Blood has been triggered.",
      "func":"( bool_1 )",
      "name":"SetFirstBloodActive",
      "return":"void"
    },{
      "desc":"Freeze the game time.",
      "func":"( bool_1 )",
      "name":"SetGameTimeFrozen",
      "return":"void"
    },{
      "desc":"Makes the specified team win",
      "func":"( int_1 )",
      "name":"SetGameWinner",
      "return":"void"
    },{
      "desc":"Set Glyph cooldown for team",
      "func":"( int_1, float_2 )",
      "name":"SetGlyphCooldown",
      "return":"void"
    },{
      "desc":"Set the auto gold increase per timed interval.",
      "func":"( int_1 )",
      "name":"SetGoldPerTick",
      "return":"void"
    },{
      "desc":"Set the time interval between auto gold increases.",
      "func":"( float_1 )",
      "name":"SetGoldTickTime",
      "return":"void"
    },{
      "desc":"(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
      "func":"( float_1 )",
      "name":"SetHeroMinimapIconScale",
      "return":"void"
    },{
      "desc":"Control if the normal DOTA hero respawn rules apply.",
      "func":"( bool_1 )",
      "name":"SetHeroRespawnEnabled",
      "return":"void"
    },{
      "desc":"Sets amount of penalty time before randoming a hero",
      "func":"( float_1 )",
      "name":"SetHeroSelectPenaltyTime",
      "return":"void"
    },{
      "desc":"Sets the amount of time players have to pick their hero.",
      "func":"( float_1 )",
      "name":"SetHeroSelectionTime",
      "return":"void"
    },{
      "desc":"Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
      "func":"( bool_1 )",
      "name":"SetHideKillMessageHeaders",
      "return":"void"
    },{
      "desc":"Set whether custom and event games should ignore Lobby teams when assigning players to teams. Defaults to true.",
      "func":"( bool_1 )",
      "name":"SetIgnoreLobbyTeamsInCustomGame",
      "return":"void"
    },{
      "desc":"Set the stock count of the item",
      "func":"( int_1, int_2, string_3, int_4 )",
      "name":"SetItemStockCount",
      "return":"void"
    },{
      "desc":"Sets next bounty rune spawn time",
      "func":"( float_1 )",
      "name":"SetNextBountyRuneSpawnTime",
      "return":"void"
    },{
      "desc":"Sets next rune spawn time",
      "func":"( float_1 )",
      "name":"SetNextRuneSpawnTime",
      "return":"void"
    },{
      "desc":"Show this unit's health on the overlay health bar",
      "func":"( handle_1, int_2 )",
      "name":"SetOverlayHealthBarUnit",
      "return":"void"
    },{
      "desc":"Sets the amount of time players have between the game ending and the server disconnecting them.",
      "func":"( float_1 )",
      "name":"SetPostGameTime",
      "return":"void"
    },{
      "desc":"Sets the amount of time players have between picking their hero and game start.",
      "func":"( float_1 )",
      "name":"SetPreGameTime",
      "return":"void"
    },{
      "desc":"(flMinimapRuneIconScale) - Scale the rune icons on the minimap.",
      "func":"( float_1 )",
      "name":"SetRuneMinimapIconScale",
      "return":"void"
    },{
      "desc":"Sets the amount of time between rune spawns.",
      "func":"( float_1 )",
      "name":"SetRuneSpawnTime",
      "return":"void"
    },{
      "desc":"(bSafeToLeave) - Mark this game as safe to leave.",
      "func":"( bool_1 )",
      "name":"SetSafeToLeave",
      "return":"void"
    },{
      "desc":"When true, players can repeatedly pick the same hero.",
      "func":"( bool_1 )",
      "name":"SetSameHeroSelectionEnabled",
      "return":"void"
    },{
      "desc":"Sets the amount of time players have between the strategy phase and entering the pre-game phase.",
      "func":"( float_1 )",
      "name":"SetShowcaseTime",
      "return":"void"
    },{
      "desc":"Set whether to speak a Spawn concept instead of a Respawn concept on respawn.",
      "func":"( bool_1 )",
      "name":"SetSpeechUseSpawnInsteadOfRespawnConcept",
      "return":"void"
    },{
      "desc":"Set the starting gold amount.",
      "func":"( int_1 )",
      "name":"SetStartingGold",
      "return":"void"
    },{
      "desc":"Sets the amount of time players have between the hero selection and entering the showcase phase.",
      "func":"( float_1 )",
      "name":"SetStrategyTime",
      "return":"void"
    },{
      "desc":"Set the time of day.",
      "func":"( float_1 )",
      "name":"SetTimeOfDay",
      "return":"void"
    },{
      "desc":"Sets the tree regrow time in seconds.",
      "func":"( float_1 )",
      "name":"SetTreeRegrowTime",
      "return":"void"
    },{
      "desc":"Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
      "func":"( bool_1 )",
      "name":"SetUseBaseGoldBountyOnHeroes",
      "return":"void"
    },{
      "desc":"Allows heroes in the map to give a specific amount of XP (this value must be set).",
      "func":"( bool_1 )",
      "name":"SetUseCustomHeroXPValues",
      "return":"void"
    },{
      "desc":"When true, all items are available at as long as any shop is in range.",
      "func":"( bool_1 )",
      "name":"SetUseUniversalShopMode",
      "return":"void"
    },{
      "desc":"Set Weather Wind Direction Vector",
      "func":"( Vector_1 )",
      "name":"SetWeatherWindDirection",
      "return":"void"
    },{
      "desc":"Item whitelist functionality enable/disable",
      "func":"( bool_1 )",
      "name":"SetWhiteListEnabled",
      "return":"void"
    },{
      "desc":"Spawn and release the next creep wave from Dota lane style spawners.",
      "func":"()",
      "name":"SpawnAndReleaseCreeps",
      "return":"void"
    },{
      "desc":"Spawn and release the next set of neutral camps.",
      "func":"()",
      "name":"SpawnNeutralCreeps",
      "return":"void"
    },{
      "desc":"Get the current Gamerules state",
      "func":"()",
      "name":"State_Get",
      "return":"int"
    }],
  "CDOTA_BaseNPC":[{
      "desc":"Add an ability to this unit by name.",
      "func":"( string pszAbilityName )",
      "name":"AddAbility",
      "return":"handle"
    },{
      "desc":"Add an activity modifier that affects future StartGesture calls",
      "func":"( string szName )",
      "name":"AddActivityModifier",
      "return":"void"
    },{
      "desc":"Add an item to this unit's inventory.",
      "func":"( handle hItem )",
      "name":"AddItem",
      "return":"handle"
    },{
      "desc":"Add an item to this unit's inventory.",
      "func":"( string pszItemName )",
      "name":"AddItemByName",
      "return":"handle"
    },{
      "desc":"Add a modifier to this unit.",
      "func":"( handle hCaster, handle hAbility, string pszScriptName, handle hModifierTable )",
      "name":"AddNewModifier",
      "return":"handle"
    },{
      "desc":"Adds the no draw flag.",
      "func":"()",
      "name":"AddNoDraw",
      "return":"void"
    },{
      "desc":"Add a speech bubble(1-4 live at a time) to this NPC.",
      "func":"( int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY )",
      "name":"AddSpeechBubble",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hAttacker, handle hAbility )",
      "name":"AlertNearbyUnits",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"AngerNearbyUnits",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flTime )",
      "name":"AttackNoEarlierThan",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"AttackReady",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"BoundingRadius2D",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"CalculateGenericBonuses",
      "return":"void"
    },{
      "desc":"Check FoW to see if an entity is visible.",
      "func":"( handle hEntity )",
      "name":"CanEntityBeSeenByMyTeam",
      "return":"bool"
    },{
      "desc":"Query if this unit can sell items.",
      "func":"()",
      "name":"CanSellItems",
      "return":"bool"
    },{
      "desc":"Cast an ability immediately.",
      "func":"( handle hAbility, int iPlayerIndex )",
      "name":"CastAbilityImmediately",
      "return":"void"
    },{
      "desc":"Cast an ability with no target.",
      "func":"( handle hAbility, int iPlayerIndex )",
      "name":"CastAbilityNoTarget",
      "return":"void"
    },{
      "desc":"Cast an ability on a position.",
      "func":"( Vector vPosition, handle hAbility, int iPlayerIndex )",
      "name":"CastAbilityOnPosition",
      "return":"void"
    },{
      "desc":"Cast an ability on a target entity.",
      "func":"( handle hTarget, handle hAbility, int iPlayerIndex )",
      "name":"CastAbilityOnTarget",
      "return":"void"
    },{
      "desc":"Toggle an ability.",
      "func":"( handle hAbility, int iPlayerIndex )",
      "name":"CastAbilityToggle",
      "return":"void"
    },{
      "desc":"Clear Activity modifiers",
      "func":"()",
      "name":"ClearActivityModifiers",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"DestroyAllSpeechBubbles",
      "return":"void"
    },{
      "desc":"Disassemble the passed item in this unit's inventory.",
      "func":"( handle hItem )",
      "name":"DisassembleItem",
      "return":"void"
    },{
      "desc":"Drop an item at a given point.",
      "func":"( Vector vDest, handle hItem )",
      "name":"DropItemAtPosition",
      "return":"void"
    },{
      "desc":"Immediately drop a carried item at a given position.",
      "func":"( handle hItem, Vector vPosition )",
      "name":"DropItemAtPositionImmediate",
      "return":"void"
    },{
      "desc":"Drops the selected item out of this unit's stash.",
      "func":"( handle hItem )",
      "name":"EjectItemFromStash",
      "return":"void"
    },{
      "desc":"This unit will be set to face the target point.",
      "func":"( Vector vTarget )",
      "name":"FaceTowards",
      "return":"void"
    },{
      "desc":"Fade and remove the given gesture activity.",
      "func":"( int nActivity )",
      "name":"FadeGesture",
      "return":"void"
    },{
      "desc":"Retrieve an ability by name from the unit.",
      "func":"( string pAbilityName )",
      "name":"FindAbilityByName",
      "return":"handle"
    },{
      "desc":"Returns a table of all of the modifiers on the NPC.",
      "func":"()",
      "name":"FindAllModifiers",
      "return":"table"
    },{
      "desc":"Returns a table of all of the modifiers on the NPC with the passed name (modifierName)",
      "func":"( string pszScriptName )",
      "name":"FindAllModifiersByName",
      "return":"table"
    },{
      "desc":"Get handle to first item in inventory, else nil.",
      "func":"( string pszItemName )",
      "name":"FindItemInInventory",
      "return":"handle"
    },{
      "desc":"Return a handle to the modifier of the given name if found, else nil (string Name )",
      "func":"( string pszScriptName )",
      "name":"FindModifierByName",
      "return":"handle"
    },{
      "desc":"Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )",
      "func":"( string pszScriptName, handle hCaster )",
      "name":"FindModifierByNameAndCaster",
      "return":"handle"
    },{
      "desc":"Kill this unit immediately.",
      "func":"( bool bReincarnate )",
      "name":"ForceKill",
      "return":"void"
    },{
      "desc":"Play an activity once, and then go back to idle.",
      "func":"( int nActivity )",
      "name":"ForcePlayActivityOnce",
      "return":"void"
    },{
      "desc":"Retrieve an ability by index from the unit.",
      "func":"( int iIndex )",
      "name":"GetAbilityByIndex",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbilityCount",
      "return":"int"
    },{
      "desc":"Gets the range at which this unit will auto-acquire.",
      "func":"()",
      "name":"GetAcquisitionRange",
      "return":"float"
    },{
      "desc":"Combat involving this creature will have this weight added to the music calcuations.",
      "func":"()",
      "name":"GetAdditionalBattleMusicWeight",
      "return":"float"
    },{
      "desc":"Returns this unit's aggro target.",
      "func":"()",
      "name":"GetAggroTarget",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttackAnimationPoint",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttackCapability",
      "return":"int"
    },{
      "desc":"Returns a random integer between the minimum and maximum base damage of the unit.",
      "func":"()",
      "name":"GetAttackDamage",
      "return":"int"
    },{
      "desc":"Gets the attack range buffer.",
      "func":"()",
      "name":"GetAttackRangeBuffer",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttackSpeed",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttackTarget",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttacksPerSecond",
      "return":"float"
    },{
      "desc":"Returns the average value of the minimum and maximum damage values.",
      "func":"( handle hTarget )",
      "name":"GetAverageTrueAttackDamage",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseAttackRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseAttackTime",
      "return":"float"
    },{
      "desc":"Get the maximum attack damage of this unit.",
      "func":"()",
      "name":"GetBaseDamageMax",
      "return":"int"
    },{
      "desc":"Get the minimum attack damage of this unit.",
      "func":"()",
      "name":"GetBaseDamageMin",
      "return":"int"
    },{
      "desc":"Returns the vision range before modifiers.",
      "func":"()",
      "name":"GetBaseDayTimeVisionRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseHealthRegen",
      "return":"float"
    },{
      "desc":"Returns base magical armor value.",
      "func":"()",
      "name":"GetBaseMagicalResistanceValue",
      "return":"float"
    },{
      "desc":"Gets the base max health value.",
      "func":"()",
      "name":"GetBaseMaxHealth",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseMoveSpeed",
      "return":"float"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"()",
      "name":"GetBaseNightTimeVisionRange",
      "return":"int"
    },{
      "desc":"This Mana regen is derived from constant bonuses like Basilius.",
      "func":"()",
      "name":"GetBonusManaRegen",
      "return":"float"
    },{
      "desc":"",
      "func":"( bool bAttack )",
      "name":"GetCastPoint",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCastRangeBonus",
      "return":"float"
    },{
      "desc":"Get clone source (Meepo Prime, if this is a Meepo)",
      "func":"()",
      "name":"GetCloneSource",
      "return":"handle"
    },{
      "desc":"Returns the size of the collision padding around the hull.",
      "func":"()",
      "name":"GetCollisionPadding",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCooldownReduction",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCreationTime",
      "return":"float"
    },{
      "desc":"Get the ability this unit is currently casting.",
      "func":"()",
      "name":"GetCurrentActiveAbility",
      "return":"handle"
    },{
      "desc":"Gets the current vision range.",
      "func":"()",
      "name":"GetCurrentVisionRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorCastTarget",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorPosition",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCursorTargetingNothing",
      "return":"bool"
    },{
      "desc":"Get the maximum attack damage of this unit.",
      "func":"()",
      "name":"GetDamageMax",
      "return":"int"
    },{
      "desc":"Get the minimum attack damage of this unit.",
      "func":"()",
      "name":"GetDamageMin",
      "return":"int"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"()",
      "name":"GetDayTimeVisionRange",
      "return":"int"
    },{
      "desc":"Get the XP bounty on this unit.",
      "func":"()",
      "name":"GetDeathXP",
      "return":"int"
    },{
      "desc":"Attack speed expressed as constant value",
      "func":"()",
      "name":"GetDisplayAttackSpeed",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetEvasion",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetForceAttackTarget",
      "return":"handle"
    },{
      "desc":"Get the gold bounty on this unit.",
      "func":"()",
      "name":"GetGoldBounty",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetHasteFactor",
      "return":"float"
    },{
      "desc":"Returns integer amount of health missing from max.",
      "func":"()",
      "name":"GetHealthDeficit",
      "return":"int"
    },{
      "desc":"Get the current health percent of the unit.",
      "func":"()",
      "name":"GetHealthPercent",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetHealthRegen",
      "return":"float"
    },{
      "desc":"Get the collision hull radius of this NPC.",
      "func":"()",
      "name":"GetHullRadius",
      "return":"float"
    },{
      "desc":"Returns speed after all modifiers.",
      "func":"()",
      "name":"GetIdealSpeed",
      "return":"float"
    },{
      "desc":"Returns speed after all modifiers, but excluding those that reduce speed.",
      "func":"()",
      "name":"GetIdealSpeedNoSlows",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIncreasedAttackSpeed",
      "return":"float"
    },{
      "desc":"Returns the initial waypoint goal for this NPC.",
      "func":"()",
      "name":"GetInitialGoalEntity",
      "return":"handle"
    },{
      "desc":"Get waypoint position for this NPC.",
      "func":"()",
      "name":"GetInitialGoalPosition",
      "return":"Vector"
    },{
      "desc":"Returns nth item in inventory slot (index is zero based).",
      "func":"( int i )",
      "name":"GetItemInSlot",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetLastAttackTime",
      "return":"float"
    },{
      "desc":"Get the last time this NPC took damage",
      "func":"()",
      "name":"GetLastDamageTime",
      "return":"float"
    },{
      "desc":"Get the last game time that this unit switched to/from idle state.",
      "func":"()",
      "name":"GetLastIdleChangeTime",
      "return":"float"
    },{
      "desc":"Returns the level of this unit.",
      "func":"()",
      "name":"GetLevel",
      "return":"int"
    },{
      "desc":"Returns current magical armor value.",
      "func":"()",
      "name":"GetMagicalArmorValue",
      "return":"float"
    },{
      "desc":"Returns the player ID of the controlling player.",
      "func":"()",
      "name":"GetMainControllingPlayer",
      "return":"int"
    },{
      "desc":"Get the mana on this unit.",
      "func":"()",
      "name":"GetMana",
      "return":"float"
    },{
      "desc":"Get the percent of mana remaining.",
      "func":"()",
      "name":"GetManaPercent",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetManaRegen",
      "return":"float"
    },{
      "desc":"Get the maximum mana of this unit.",
      "func":"()",
      "name":"GetMaxMana",
      "return":"float"
    },{
      "desc":"Get the maximum gold bounty for this unit.",
      "func":"()",
      "name":"GetMaximumGoldBounty",
      "return":"int"
    },{
      "desc":"Get the minimum gold bounty for this unit.",
      "func":"()",
      "name":"GetMinimumGoldBounty",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetModelRadius",
      "return":"float"
    },{
      "desc":"How many modifiers does this unit have?",
      "func":"()",
      "name":"GetModifierCount",
      "return":"int"
    },{
      "desc":"Get a modifier name by index.",
      "func":"( int nIndex )",
      "name":"GetModifierNameByIndex",
      "return":"string"
    },{
      "desc":"Gets the stack count of a given modifier.",
      "func":"( string pszScriptName, handle hCaster )",
      "name":"GetModifierStackCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( float flBaseSpeed, bool bReturnUnslowed )",
      "name":"GetMoveSpeedModifier",
      "return":"float"
    },{
      "desc":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
      "func":"()",
      "name":"GetMustReachEachGoalEntity",
      "return":"bool"
    },{
      "desc":"Get the name of this camp's neutral spawner.",
      "func":"()",
      "name":"GetNeutralSpawnerName",
      "return":"string"
    },{
      "desc":"If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
      "func":"()",
      "name":"GetNeverMoveToClearSpace",
      "return":"bool"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"()",
      "name":"GetNightTimeVisionRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetOpposingTeamNumber",
      "return":"int"
    },{
      "desc":"Get the collision hull radius (including padding) of this NPC.",
      "func":"()",
      "name":"GetPaddedCollisionRadius",
      "return":"float"
    },{
      "desc":"Returns base physical armor value.",
      "func":"()",
      "name":"GetPhysicalArmorBaseValue",
      "return":"float"
    },{
      "desc":"Returns current physical armor value.",
      "func":"( bool bIgnoreBase )",
      "name":"GetPhysicalArmorValue",
      "return":"float"
    },{
      "desc":"Returns the player that owns this unit.",
      "func":"()",
      "name":"GetPlayerOwner",
      "return":"handle"
    },{
      "desc":"Get the owner player ID for this unit.",
      "func":"()",
      "name":"GetPlayerOwnerID",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetProjectileSpeed",
      "return":"int"
    },{
      "desc":"",
      "func":"( handle hNPC )",
      "name":"GetRangeToUnit",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetRangedProjectileName",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSecondsPerAttack",
      "return":"float"
    },{
      "desc":"",
      "func":"( bool bBaseOnly )",
      "name":"GetSpellAmplification",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStatusResistance",
      "return":"float"
    },{
      "desc":"Get how much gold has been spent on ability upgrades.",
      "func":"()",
      "name":"GetTotalPurchasedUpgradeGoldCost",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetUnitLabel",
      "return":"string"
    },{
      "desc":"Get the name of this unit.",
      "func":"()",
      "name":"GetUnitName",
      "return":"string"
    },{
      "desc":"Give mana to this unit, this can be used for mana gained by abilities or item usage.",
      "func":"( float flMana )",
      "name":"GiveMana",
      "return":"void"
    },{
      "desc":"See whether this unit has an ability by name.",
      "func":"( string pszAbilityName )",
      "name":"HasAbility",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasAnyActiveAbilities",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasAttackCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasFlyMovementCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasFlyingVision",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasGroundMovementCapability",
      "return":"bool"
    },{
      "desc":"Does this unit have an inventory.",
      "func":"()",
      "name":"HasInventory",
      "return":"bool"
    },{
      "desc":"See whether this unit has an item by name.",
      "func":"( string pItemName )",
      "name":"HasItemInInventory",
      "return":"bool"
    },{
      "desc":"Sees if this unit has a given modifier.",
      "func":"( string pszScriptName )",
      "name":"HasModifier",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasMovementCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasScepter",
      "return":"bool"
    },{
      "desc":"Heal this unit.",
      "func":"( float flAmount, handle hInflictor )",
      "name":"Heal",
      "return":"void"
    },{
      "desc":"Hold position.",
      "func":"()",
      "name":"Hold",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"Interrupt",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"InterruptChannel",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bFindClearSpace )",
      "name":"InterruptMotionControllers",
      "return":"void"
    },{
      "desc":"Is this unit alive?",
      "func":"()",
      "name":"IsAlive",
      "return":"bool"
    },{
      "desc":"Is this unit an Ancient?",
      "func":"()",
      "name":"IsAncient",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAttackImmune",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAttacking",
      "return":"bool"
    },{
      "desc":"",
      "func":"( handle hEntity )",
      "name":"IsAttackingEntity",
      "return":"bool"
    },{
      "desc":"Is this unit a Barracks?",
      "func":"()",
      "name":"IsBarracks",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsBlind",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsBlockDisabled",
      "return":"bool"
    },{
      "desc":"Is this unit a boss?",
      "func":"()",
      "name":"IsBoss",
      "return":"bool"
    },{
      "desc":"Is this unit a building?",
      "func":"()",
      "name":"IsBuilding",
      "return":"bool"
    },{
      "desc":"Is this unit currently channeling a spell?",
      "func":"()",
      "name":"IsChanneling",
      "return":"bool"
    },{
      "desc":"Is this unit a clone? (Meepo)",
      "func":"()",
      "name":"IsClone",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCommandRestricted",
      "return":"bool"
    },{
      "desc":"Is this unit a considered a hero for targeting purposes?",
      "func":"()",
      "name":"IsConsideredHero",
      "return":"bool"
    },{
      "desc":"Is this unit controlled by any non-bot player?",
      "func":"()",
      "name":"IsControllableByAnyPlayer",
      "return":"bool"
    },{
      "desc":"Is this unit a courier?",
      "func":"()",
      "name":"IsCourier",
      "return":"bool"
    },{
      "desc":"Is this a Creature type NPC?",
      "func":"()",
      "name":"IsCreature",
      "return":"bool"
    },{
      "desc":"Is this unit a creep?",
      "func":"()",
      "name":"IsCreep",
      "return":"bool"
    },{
      "desc":"Is this unit a creep hero?",
      "func":"()",
      "name":"IsCreepHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCurrentlyHorizontalMotionControlled",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCurrentlyVerticalMotionControlled",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDisarmed",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDominated",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsEvadeDisabled",
      "return":"bool"
    },{
      "desc":"Is this unit an Ancient?",
      "func":"()",
      "name":"IsFort",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsFrozen",
      "return":"bool"
    },{
      "desc":"Is this a hero or hero illusion?",
      "func":"()",
      "name":"IsHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHexed",
      "return":"bool"
    },{
      "desc":"Is this creature currently idle?",
      "func":"()",
      "name":"IsIdle",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsIllusion",
      "return":"bool"
    },{
      "desc":"Ask whether this unit is in range of the specified shop ( DOTA_SHOP_TYPE shop, bool bMustBePhysicallyNear",
      "func":"( int nShopType, bool bPhysical )",
      "name":"IsInRangeOfShop",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInvisible",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInvulnerable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsLowAttackPriority",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMagicImmune",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMovementImpaired",
      "return":"bool"
    },{
      "desc":"Is this unit moving?",
      "func":"()",
      "name":"IsMoving",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    },{
      "desc":"Is this a neutral?",
      "func":"()",
      "name":"IsNeutralUnitType",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsNightmared",
      "return":"bool"
    },{
      "desc":"",
      "func":"( int nTeam )",
      "name":"IsOpposingTeam",
      "return":"bool"
    },{
      "desc":"Is this unit a ward-type unit?",
      "func":"()",
      "name":"IsOther",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsOutOfGame",
      "return":"bool"
    },{
      "desc":"Is this unit owned by any non-bot player?",
      "func":"()",
      "name":"IsOwnedByAnyPlayer",
      "return":"bool"
    },{
      "desc":"Is this a phantom unit?",
      "func":"()",
      "name":"IsPhantom",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPhantomBlocker",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPhased",
      "return":"bool"
    },{
      "desc":"",
      "func":"( Vector vPosition, float flRange )",
      "name":"IsPositionInRange",
      "return":"bool"
    },{
      "desc":"Is this unit a ranged attacker?",
      "func":"()",
      "name":"IsRangedAttacker",
      "return":"bool"
    },{
      "desc":"Is this a real hero?",
      "func":"()",
      "name":"IsRealHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsReincarnating",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRooted",
      "return":"bool"
    },{
      "desc":"Is this a shrine?",
      "func":"()",
      "name":"IsShrine",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSilenced",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSpeciallyDeniable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStunned",
      "return":"bool"
    },{
      "desc":"Is this unit summoned?",
      "func":"()",
      "name":"IsSummoned",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsTempestDouble",
      "return":"bool"
    },{
      "desc":"Is this a tower?",
      "func":"()",
      "name":"IsTower",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsUnableToMiss",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsUnselectable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsUntargetable",
      "return":"bool"
    },{
      "desc":"Kills this NPC, with the params Ability and Attacker.",
      "func":"( handle hAbility, handle hAttacker )",
      "name":"Kill",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"MakeIllusion",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"MakePhantomBlocker",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iTeam, float flRadius )",
      "name":"MakeVisibleDueToAttack",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iTeam, float flDuration )",
      "name":"MakeVisibleToTeam",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ManageModelChanges",
      "return":"void"
    },{
      "desc":"Sets the health to a specific value, with optional flags or inflictors.",
      "func":"( int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags )",
      "name":"ModifyHealth",
      "return":"void"
    },{
      "desc":"Move to follow a unit.",
      "func":"( handle hNPC )",
      "name":"MoveToNPC",
      "return":"void"
    },{
      "desc":"Give an item to another unit.",
      "func":"( handle hNPC, handle hItem )",
      "name":"MoveToNPCToGiveItem",
      "return":"void"
    },{
      "desc":"Issue a Move-To command.",
      "func":"( Vector vDest )",
      "name":"MoveToPosition",
      "return":"void"
    },{
      "desc":"Issue an Attack-Move-To command.",
      "func":"( Vector vDest )",
      "name":"MoveToPositionAggressive",
      "return":"void"
    },{
      "desc":"Move to a target to attack.",
      "func":"( handle hTarget )",
      "name":"MoveToTargetToAttack",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"NoHealthBar",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoTeamMoveTo",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoTeamSelect",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoUnitCollision",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NotOnMinimap",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NotOnMinimapForEnemies",
      "return":"bool"
    },{
      "desc":"",
      "func":"( bool bOriginalModel )",
      "name":"NotifyWearablesOfModelChange",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"PassivesDisabled",
      "return":"bool"
    },{
      "desc":"Issue a Patrol-To command.",
      "func":"( Vector vDest )",
      "name":"PatrolToPosition",
      "return":"void"
    },{
      "desc":"Performs an attack on a target.",
      "func":"( handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss )",
      "name":"PerformAttack",
      "return":"void"
    },{
      "desc":"Pick up a dropped item.",
      "func":"( handle hItem )",
      "name":"PickupDroppedItem",
      "return":"void"
    },{
      "desc":"Pick up a rune.",
      "func":"( handle hItem )",
      "name":"PickupRune",
      "return":"void"
    },{
      "desc":"Play a VCD on the NPC.",
      "func":"( string pVCD )",
      "name":"PlayVCD",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ProvidesVision",
      "return":"bool"
    },{
      "desc":"(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions)",
      "func":"( bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions )",
      "name":"Purge",
      "return":"void"
    },{
      "desc":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay.",
      "func":"( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
      "name":"QueueConcept",
      "return":"void"
    },{
      "desc":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on.",
      "func":"( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
      "name":"QueueTeamConcept",
      "return":"void"
    },{
      "desc":"Queue a response system concept with the TLK_DOTA_CUSTOM concept, after a delay, for the same team this speaker is on. Is not played for spectators.",
      "func":"( float flDelay, handle hCriteriaTable, handle hCompletionCallbackFn, handle hContext, handle hCallbackInfo )",
      "name":"QueueTeamConceptNoSpectators",
      "return":"void"
    },{
      "desc":"Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.",
      "func":"( float flAmount )",
      "name":"ReduceMana",
      "return":"void"
    },{
      "desc":"Remove an ability from this unit by name.",
      "func":"( string pszAbilityName )",
      "name":"RemoveAbility",
      "return":"void"
    },{
      "desc":"Remove the passed ability from this unit.",
      "func":"( handle hAbility )",
      "name":"RemoveAbilityByHandle",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pszAbilityName )",
      "name":"RemoveAbilityFromIndexByName",
      "return":"void"
    },{
      "desc":"(int targets [0=all, 1=enemy, 2=ally], bool bNow, bool bPermanent, bool bDeath)",
      "func":"( int targets, bool bNow, bool bPermanent, bool bDeath )",
      "name":"RemoveAllModifiers",
      "return":"void"
    },{
      "desc":"Remove the given gesture activity.",
      "func":"( int nActivity )",
      "name":"RemoveGesture",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hBuff )",
      "name":"RemoveHorizontalMotionController",
      "return":"void"
    },{
      "desc":"Removes the passed item from this unit's inventory and deletes it.",
      "func":"( handle hItem )",
      "name":"RemoveItem",
      "return":"void"
    },{
      "desc":"Removes a modifier.",
      "func":"( string pszScriptName )",
      "name":"RemoveModifierByName",
      "return":"void"
    },{
      "desc":"Removes a modifier that was cast by the given caster.",
      "func":"( string pszScriptName, handle hCaster )",
      "name":"RemoveModifierByNameAndCaster",
      "return":"void"
    },{
      "desc":"Remove the no draw flag.",
      "func":"()",
      "name":"RemoveNoDraw",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hBuff )",
      "name":"RemoveVerticalMotionController",
      "return":"void"
    },{
      "desc":"Respawns the target unit if it can be respawned.",
      "func":"()",
      "name":"RespawnUnit",
      "return":"void"
    },{
      "desc":"Gets this unit's attack range after all modifiers.",
      "func":"()",
      "name":"Script_GetAttackRange",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"Script_IsDeniable",
      "return":"bool"
    },{
      "desc":"Sells the passed item in this unit's inventory.",
      "func":"( handle hItem )",
      "name":"SellItem",
      "return":"void"
    },{
      "desc":"Set the ability by index.",
      "func":"( handle hAbility, int iIndex )",
      "name":"SetAbilityByIndex",
      "return":"void"
    },{
      "desc":"",
      "func":"( int nRange )",
      "name":"SetAcquisitionRange",
      "return":"void"
    },{
      "desc":"Combat involving this creature will have this weight added to the music calcuations.",
      "func":"( float flWeight )",
      "name":"SetAdditionalBattleMusicWeight",
      "return":"void"
    },{
      "desc":"Set this unit's aggro target to a specified unit.",
      "func":"( handle hAggroTarget )",
      "name":"SetAggroTarget",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iAttackCapabilities )",
      "name":"SetAttackCapability",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hAttackTarget )",
      "name":"SetAttacking",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flBaseAttackTime )",
      "name":"SetBaseAttackTime",
      "return":"void"
    },{
      "desc":"Sets the maximum base damage.",
      "func":"( int nMax )",
      "name":"SetBaseDamageMax",
      "return":"void"
    },{
      "desc":"Sets the minimum base damage.",
      "func":"( int nMin )",
      "name":"SetBaseDamageMin",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flHealthRegen )",
      "name":"SetBaseHealthRegen",
      "return":"void"
    },{
      "desc":"Sets base magical armor value.",
      "func":"( float flMagicalResistanceValue )",
      "name":"SetBaseMagicalResistanceValue",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flManaRegen )",
      "name":"SetBaseManaRegen",
      "return":"void"
    },{
      "desc":"Set a new base max health value.",
      "func":"( float flBaseMaxHealth )",
      "name":"SetBaseMaxHealth",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iMoveSpeed )",
      "name":"SetBaseMoveSpeed",
      "return":"void"
    },{
      "desc":"Set whether or not this unit is allowed to sell items (bCanSellItems)",
      "func":"( bool bCanSell )",
      "name":"SetCanSellItems",
      "return":"void"
    },{
      "desc":"Set this unit controllable by the player with the passed ID.",
      "func":"( int iIndex, bool bSkipAdjustingPosition )",
      "name":"SetControllableByPlayer",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hEntity )",
      "name":"SetCursorCastTarget",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector vLocation )",
      "name":"SetCursorPosition",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bTargetingNothing )",
      "name":"SetCursorTargetingNothing",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pLabel, int r, int g, int b )",
      "name":"SetCustomHealthLabel",
      "return":"void"
    },{
      "desc":"Set the base vision range.",
      "func":"( int iRange )",
      "name":"SetDayTimeVisionRange",
      "return":"void"
    },{
      "desc":"Set the XP bounty on this unit.",
      "func":"( int iXPBounty )",
      "name":"SetDeathXP",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hNPC )",
      "name":"SetForceAttackTarget",
      "return":"void"
    },{
      "desc":"",
      "func":"( handle hNPC )",
      "name":"SetForceAttackTargetAlly",
      "return":"void"
    },{
      "desc":"Set if this unit has an inventory.",
      "func":"( bool bHasInventory )",
      "name":"SetHasInventory",
      "return":"void"
    },{
      "desc":"Set the collision hull radius of this NPC.",
      "func":"( float flHullRadius )",
      "name":"SetHullRadius",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bIdleAcquire )",
      "name":"SetIdleAcquire",
      "return":"void"
    },{
      "desc":"Sets the initial waypoint goal for this NPC.",
      "func":"( handle hGoal )",
      "name":"SetInitialGoalEntity",
      "return":"void"
    },{
      "desc":"Set waypoint position for this NPC.",
      "func":"( Vector vPosition )",
      "name":"SetInitialGoalPosition",
      "return":"void"
    },{
      "desc":"Set the mana on this unit.",
      "func":"( float flMana )",
      "name":"SetMana",
      "return":"void"
    },{
      "desc":"Set the maximum mana of this unit.",
      "func":"( float flMaxMana )",
      "name":"SetMaxMana",
      "return":"void"
    },{
      "desc":"Set the maximum gold bounty for this unit.",
      "func":"( int iGoldBountyMax )",
      "name":"SetMaximumGoldBounty",
      "return":"void"
    },{
      "desc":"Set the minimum gold bounty for this unit.",
      "func":"( int iGoldBountyMin )",
      "name":"SetMinimumGoldBounty",
      "return":"void"
    },{
      "desc":"Sets the stack count of a given modifier.",
      "func":"( string pszScriptName, handle hCaster, int nStackCount )",
      "name":"SetModifierStackCount",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iMoveCapabilities )",
      "name":"SetMoveCapability",
      "return":"void"
    },{
      "desc":"Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
      "func":"( bool must )",
      "name":"SetMustReachEachGoalEntity",
      "return":"void"
    },{
      "desc":"If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
      "func":"( bool neverMoveToClearSpace )",
      "name":"SetNeverMoveToClearSpace",
      "return":"void"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"( int iRange )",
      "name":"SetNightTimeVisionRange",
      "return":"void"
    },{
      "desc":"Set the unit's origin.",
      "func":"( Vector vLocation )",
      "name":"SetOrigin",
      "return":"void"
    },{
      "desc":"Sets the original model of this entity, which it will tend to fall back to anytime its state changes.",
      "func":"( string pszModelName )",
      "name":"SetOriginalModel",
      "return":"void"
    },{
      "desc":"Sets base physical armor value.",
      "func":"( float flPhysicalArmorValue )",
      "name":"SetPhysicalArmorBaseValue",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pProjectileName )",
      "name":"SetRangedProjectileName",
      "return":"void"
    },{
      "desc":"sets the client side map reveal radius for this unit",
      "func":"( float revealRadius )",
      "name":"SetRevealRadius",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bShouldVisuallyFly )",
      "name":"SetShouldDoFlyHeightVisual",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bStolenScepter )",
      "name":"SetStolenScepter",
      "return":"void"
    },{
      "desc":"",
      "func":"( bool bCanRespawn )",
      "name":"SetUnitCanRespawn",
      "return":"void"
    },{
      "desc":"",
      "func":"( string pName )",
      "name":"SetUnitName",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"ShouldIdleAcquire",
      "return":"bool"
    },{
      "desc":"Speak a response system concept with the TLK_DOTA_CUSTOM concept.",
      "func":"( handle hCriteriaTable )",
      "name":"SpeakConcept",
      "return":"void"
    },{
      "desc":"Spend mana from this unit, this can be used for spending mana from abilities or item usage.",
      "func":"( float flManaSpent, handle hAbility )",
      "name":"SpendMana",
      "return":"void"
    },{
      "desc":"Add the given gesture activity.",
      "func":"( int nActivity )",
      "name":"StartGesture",
      "return":"void"
    },{
      "desc":"Add the given gesture activity faded according to its sequence settings.",
      "func":"( int nActivity )",
      "name":"StartGestureFadeWithSequenceSettings",
      "return":"void"
    },{
      "desc":"Add the given gesture activity faded according to to the parameters.",
      "func":"( int nActivity, float fFadeIn, float fFadeOut )",
      "name":"StartGestureWithFade",
      "return":"void"
    },{
      "desc":"Add the given gesture activity with a playback rate override.",
      "func":"( int nActivity, float flRate )",
      "name":"StartGestureWithPlaybackRate",
      "return":"void"
    },{
      "desc":"Stop the current order.",
      "func":"()",
      "name":"Stop",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"StopFacing",
      "return":"void"
    },{
      "desc":"Swaps the slots of the two passed abilities and sets them enabled/disabled.",
      "func":"( string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2 )",
      "name":"SwapAbilities",
      "return":"void"
    },{
      "desc":"Swap the contents of two item slots (slot1, slot2)",
      "func":"( int nSlot1, int nSlot2 )",
      "name":"SwapItems",
      "return":"void"
    },{
      "desc":"Removed the passed item from this unit's inventory.",
      "func":"( handle hItem )",
      "name":"TakeItem",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"TimeUntilNextAttack",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"TriggerModifierDodge",
      "return":"bool"
    },{
      "desc":"",
      "func":"( handle hAbility )",
      "name":"TriggerSpellAbsorb",
      "return":"bool"
    },{
      "desc":"Trigger the Lotus Orb-like effect.(hAbility)",
      "func":"( handle hAbility )",
      "name":"TriggerSpellReflect",
      "return":"void"
    },{
      "desc":"Makes the first ability unhidden, and puts it where second ability currently is. Will do nothing if the first ability is already unhidden and in a valid slot.",
      "func":"( string pszAbilityName, string pszReplacedAbilityName )",
      "name":"UnHideAbilityToSlot",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"UnitCanRespawn",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"WasKilledPassively",
      "return":"bool"
    }],
  "CInfoData":[{
      "desc":"Query color data for this key",
      "func":"( utlstringtoken tok, Vector vDefault )",
      "name":"QueryColor",
      "return":"Vector"
    },{
      "desc":"Query float data for this key",
      "func":"( utlstringtoken tok, float flDefault )",
      "name":"QueryFloat",
      "return":"float"
    },{
      "desc":"Query int data for this key",
      "func":"( utlstringtoken tok, int nDefault )",
      "name":"QueryInt",
      "return":"int"
    },{
      "desc":"Query number data for this key",
      "func":"( utlstringtoken tok, float flDefault )",
      "name":"QueryNumber",
      "return":"float"
    },{
      "desc":"Query string data for this key",
      "func":"( utlstringtoken tok, string pDefault )",
      "name":"QueryString",
      "return":"string"
    },{
      "desc":"Query vector data for this key",
      "func":"( utlstringtoken tok, Vector vDefault )",
      "name":"QueryVector",
      "return":"Vector"
    }],
  "CScriptParticleManager":[{
      "desc":"Creates a new particle effect",
      "func":"( string_1, int_2, handle_3 )",
      "name":"CreateParticle",
      "return":"int"
    },{
      "desc":"Creates a new particle effect that only plays for the specified player",
      "func":"( string_1, int_2, handle_3, handle_4 )",
      "name":"CreateParticleForPlayer",
      "return":"int"
    },{
      "desc":"Creates a new particle effect that only plays for the specified team",
      "func":"( string_1, int_2, handle_3, int_4 )",
      "name":"CreateParticleForTeam",
      "return":"int"
    },{
      "desc":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.",
      "func":"( int_1, bool_2 )",
      "name":"DestroyParticle",
      "return":"void"
    },{
      "desc":"",
      "func":"( string_1, handle_2 )",
      "name":"GetParticleReplacement",
      "return":"string"
    },{
      "desc":"Frees the specified particle index",
      "func":"( int_1 )",
      "name":"ReleaseParticleIndex",
      "return":"void"
    },{
      "desc":"",
      "func":"( int_1 )",
      "name":"SetParticleAlwaysSimulate",
      "return":"void"
    },{
      "desc":"Set the control point data for a control on a particle effect",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControl",
      "return":"void"
    },{
      "desc":"",
      "func":"( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
      "name":"SetParticleControlEnt",
      "return":"void"
    },{
      "desc":"(int iIndex, int iPoint, Vector vecPosition)",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControlFallback",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, vForward)",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControlForward",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)",
      "func":"( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
      "name":"SetParticleControlOrientation",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
      "func":"( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
      "name":"SetParticleControlOrientationFLU",
      "return":"void"
    },{
      "desc":"int nfxindex, int nPoint, int nPoint2, float flRadius",
      "func":"( int_1, int_2, int_3, float_4 )",
      "name":"SetParticleFoWProperties",
      "return":"void"
    },{
      "desc":"int nfxindex, bool bCheckFoW",
      "func":"( int_1, bool_2 )",
      "name":"SetParticleShouldCheckFoW",
      "return":"bool"
    }],
  "CDOTA_BaseNPC_NeutralItemStash":[],
  "CEntities":[{
      "desc":"Creates an entity by classname",
      "func":"( string_1 )",
      "name":"CreateByClassname",
      "return":"handle"
    },{
      "desc":"Finds all entities by class name. Returns an array containing all the found entities.",
      "func":"( string_1 )",
      "name":"FindAllByClassname",
      "return":"table"
    },{
      "desc":"Find entities by class name within a radius.",
      "func":"( string_1, Vector_2, float_3 )",
      "name":"FindAllByClassnameWithin",
      "return":"table"
    },{
      "desc":"Find entities by model name.",
      "func":"( string_1 )",
      "name":"FindAllByModel",
      "return":"table"
    },{
      "desc":"Find all entities by name. Returns an array containing all the found entities in it.",
      "func":"( string_1 )",
      "name":"FindAllByName",
      "return":"table"
    },{
      "desc":"Find entities by name within a radius.",
      "func":"( string_1, Vector_2, float_3 )",
      "name":"FindAllByNameWithin",
      "return":"table"
    },{
      "desc":"Find entities by targetname.",
      "func":"( string_1 )",
      "name":"FindAllByTarget",
      "return":"table"
    },{
      "desc":"Find entities within a radius.",
      "func":"( Vector_1, float_2 )",
      "name":"FindAllInSphere",
      "return":"table"
    },{
      "desc":"Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2 )",
      "name":"FindByClassname",
      "return":"handle"
    },{
      "desc":"Find entities by class name nearest to a point.",
      "func":"( string_1, Vector_2, float_3 )",
      "name":"FindByClassnameNearest",
      "return":"handle"
    },{
      "desc":"Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2, Vector_3, float_4 )",
      "name":"FindByClassnameWithin",
      "return":"handle"
    },{
      "desc":"Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2 )",
      "name":"FindByModel",
      "return":"handle"
    },{
      "desc":"Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2, Vector_3, float_4 )",
      "name":"FindByModelWithin",
      "return":"handle"
    },{
      "desc":"Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2 )",
      "name":"FindByName",
      "return":"handle"
    },{
      "desc":"Find entities by name nearest to a point.",
      "func":"( string_1, Vector_2, float_3 )",
      "name":"FindByNameNearest",
      "return":"handle"
    },{
      "desc":"Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2, Vector_3, float_4 )",
      "name":"FindByNameWithin",
      "return":"handle"
    },{
      "desc":"Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, string_2 )",
      "name":"FindByTarget",
      "return":"handle"
    },{
      "desc":"Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
      "func":"( handle_1, Vector_2, float_3 )",
      "name":"FindInSphere",
      "return":"handle"
    },{
      "desc":"Begin an iteration over the list of entities",
      "func":"()",
      "name":"First",
      "return":"handle"
    },{
      "desc":"Get the local player.",
      "func":"()",
      "name":"GetLocalPlayer",
      "return":"handle"
    },{
      "desc":"Continue an iteration over the list of entities, providing reference to a previously found entity",
      "func":"( handle_1 )",
      "name":"Next",
      "return":"handle"
    }],
  "CDOTA_BaseNPC_Shop":[{
      "desc":"Get the DOTA_SHOP_TYPE",
      "func":"()",
      "name":"GetShopType",
      "return":"int"
    },{
      "desc":"Set the DOTA_SHOP_TYPE.",
      "func":"( int eShopType )",
      "name":"SetShopType",
      "return":"void"
    }],
  "SteamInfo":[{
      "desc":"Is the script connected to the public Steam universe",
      "func":"()",
      "name":"IsPublicUniverse",
      "return":"bool"
    }],
  "CCustomGameEventManager":[{
      "desc":"( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.",
      "func":"( string_1, handle_2 )",
      "name":"RegisterListener",
      "return":"int"
    },{
      "desc":"( string EventName, table EventData )",
      "func":"( string_1, handle_2 )",
      "name":"Send_ServerToAllClients",
      "return":"void"
    },{
      "desc":"( Entity Player, string EventName, table EventData )",
      "func":"( handle_1, string_2, handle_3 )",
      "name":"Send_ServerToPlayer",
      "return":"void"
    },{
      "desc":"( int TeamNumber, string EventName, table EventData )",
      "func":"( int_1, string_2, handle_3 )",
      "name":"Send_ServerToTeam",
      "return":"void"
    },{
      "desc":"( int ListnerID ) - Unregister a specific listener",
      "func":"( int_1 )",
      "name":"UnregisterListener",
      "return":"void"
    }],
  "CDOTABaseGameMode":[{
      "desc":"( pszItem, pszShop, pszCategory ) Add an item to purchase at a custom shop.",
      "func":"( string pszItemName, string pszShopName, string pszCategory )",
      "name":"AddItemToCustomShop",
      "return":"void"
    },{
      "desc":"Begin tracking a sequence of events using the real time combat analyzer.",
      "func":"( handle hQueryTable, handle hPlayer, string pszQueryName )",
      "name":"AddRealTimeCombatAnalyzerQuery",
      "return":"int"
    },{
      "desc":"Allocates an entity which can be used by custom games to control FoW occlusion volumes",
      "func":"( float flMinX, float flMinY, float flMaxX, float flMaxY, float flGridSize )",
      "name":"AllocateFowBlockerRegion",
      "return":"handle"
    },{
      "desc":"Get if weather effects are disabled on the client.",
      "func":"()",
      "name":"AreWeatherEffectsDisabled",
      "return":"bool"
    },{
      "desc":"Clear the script filter that controls bounty rune pickup behavior.",
      "func":"()",
      "name":"ClearBountyRunePickupFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls how a unit takes damage.",
      "func":"()",
      "name":"ClearDamageFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls when a unit picks up an item.",
      "func":"()",
      "name":"ClearExecuteOrderFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls how a unit heals.",
      "func":"()",
      "name":"ClearHealingFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls the item added to inventory filter.",
      "func":"()",
      "name":"ClearItemAddedToInventoryFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls the modifier filter.",
      "func":"()",
      "name":"ClearModifierGainedFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls how hero experience is modified.",
      "func":"()",
      "name":"ClearModifyExperienceFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls how hero gold is modified.",
      "func":"()",
      "name":"ClearModifyGoldFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls what rune spawns.",
      "func":"()",
      "name":"ClearRuneSpawnFilter",
      "return":"void"
    },{
      "desc":"Clear the script filter that controls when tracking projectiles are launched.",
      "func":"()",
      "name":"ClearTrackingProjectileFilter",
      "return":"void"
    },{
      "desc":"Disable npc_dota_creature clumping behavior by default.",
      "func":"( bool bDisabled )",
      "name":"DisableClumpingBehaviorByDefault",
      "return":"void"
    },{
      "desc":"Use to disable hud flip for this mod",
      "func":"( bool bDisable )",
      "name":"DisableHudFlip",
      "return":"void"
    },{
      "desc":"Show the player hero's inventory in the HUD, regardless of what unit is selected.",
      "func":"()",
      "name":"GetAlwaysShowPlayerInventory",
      "return":"bool"
    },{
      "desc":"Get whether player names are always shown, regardless of client setting.",
      "func":"()",
      "name":"GetAlwaysShowPlayerNames",
      "return":"bool"
    },{
      "desc":"Are in-game announcers disabled?",
      "func":"()",
      "name":"GetAnnouncerDisabled",
      "return":"bool"
    },{
      "desc":"Set a different camera distance; dota default is 1134.",
      "func":"()",
      "name":"GetCameraDistanceOverride",
      "return":"float"
    },{
      "desc":"Get current derived stat value constant.",
      "func":"( int nDerivedStatType, handle hHero )",
      "name":"GetCustomAttributeDerivedStatValue",
      "return":"float"
    },{
      "desc":"Get the current rate cooldown ticks down for items in the backpack.",
      "func":"()",
      "name":"GetCustomBackpackCooldownPercent",
      "return":"float"
    },{
      "desc":"Get the current custom backpack swap cooldown.",
      "func":"()",
      "name":"GetCustomBackpackSwapCooldown",
      "return":"float"
    },{
      "desc":"Turns on capability to define custom buyback cooldowns.",
      "func":"()",
      "name":"GetCustomBuybackCooldownEnabled",
      "return":"bool"
    },{
      "desc":"Turns on capability to define custom buyback costs.",
      "func":"()",
      "name":"GetCustomBuybackCostEnabled",
      "return":"bool"
    },{
      "desc":"Get the topbar score display value for dire.",
      "func":"()",
      "name":"GetCustomDireScore",
      "return":"int"
    },{
      "desc":"Get the current custom glyph cooldown.",
      "func":"()",
      "name":"GetCustomGlyphCooldown",
      "return":"float"
    },{
      "desc":"Allows definition of the max level heroes can achieve (default is 25).",
      "func":"()",
      "name":"GetCustomHeroMaxLevel",
      "return":"int"
    },{
      "desc":"Get the topbar score display value for radiant.",
      "func":"()",
      "name":"GetCustomRadiantScore",
      "return":"int"
    },{
      "desc":"Get the current custom scan cooldown.",
      "func":"()",
      "name":"GetCustomScanCooldown",
      "return":"float"
    },{
      "desc":"Get the Game Seed passed from the GC.",
      "func":"()",
      "name":"GetEventGameSeed",
      "return":"int"
    },{
      "desc":"Get the Event Window Start Time passed from the GC.",
      "func":"()",
      "name":"GetEventWindowStartTime",
      "return":"unsigned"
    },{
      "desc":"Gets the fixed respawn time.",
      "func":"()",
      "name":"GetFixedRespawnTime",
      "return":"float"
    },{
      "desc":"Turn the fog of war on or off.",
      "func":"()",
      "name":"GetFogOfWarDisabled",
      "return":"bool"
    },{
      "desc":"Turn the sound when gold is acquired off/on.",
      "func":"()",
      "name":"GetGoldSoundDisabled",
      "return":"bool"
    },{
      "desc":"Returns the HUD element visibility.",
      "func":"( int iElement )",
      "name":"GetHUDVisible",
      "return":"bool"
    },{
      "desc":"Get the maximum attack speed for units.",
      "func":"()",
      "name":"GetMaximumAttackSpeed",
      "return":"int"
    },{
      "desc":"Get the minimum attack speed for units.",
      "func":"()",
      "name":"GetMinimumAttackSpeed",
      "return":"int"
    },{
      "desc":"Turn the panel for showing recommended items at the shop off/on.",
      "func":"()",
      "name":"GetRecommendedItemsDisabled",
      "return":"bool"
    },{
      "desc":"Returns the scale applied to non-fixed respawn times.",
      "func":"()",
      "name":"GetRespawnTimeScale",
      "return":"float"
    },{
      "desc":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
      "func":"()",
      "name":"GetStashPurchasingDisabled",
      "return":"bool"
    },{
      "desc":"Hide the sticky item in the quickbuy.",
      "func":"()",
      "name":"GetStickyItemDisabled",
      "return":"bool"
    },{
      "desc":"Override the values of the team values on the top game bar.",
      "func":"()",
      "name":"GetTopBarTeamValuesOverride",
      "return":"bool"
    },{
      "desc":"Turning on/off the team values on the top game bar.",
      "func":"()",
      "name":"GetTopBarTeamValuesVisible",
      "return":"bool"
    },{
      "desc":"Gets whether tower backdoor protection is enabled or not.",
      "func":"()",
      "name":"GetTowerBackdoorProtectionEnabled",
      "return":"bool"
    },{
      "desc":"Are custom-defined XP values for hero level ups in use?",
      "func":"()",
      "name":"GetUseCustomHeroLevels",
      "return":"bool"
    },{
      "desc":"Enables or disables buyback completely.",
      "func":"()",
      "name":"IsBuybackEnabled",
      "return":"bool"
    },{
      "desc":"Is the day/night cycle disabled?",
      "func":"()",
      "name":"IsDaynightCycleDisabled",
      "return":"bool"
    },{
      "desc":"Set function and context for real time combat analyzer query failed.",
      "func":"( handle hFunction, handle hContext )",
      "name":"ListenForQueryFailed",
      "return":"void"
    },{
      "desc":"Set function and context for real time combat analyzer query progress changed.",
      "func":"( handle hFunction, handle hContext )",
      "name":"ListenForQueryProgressChanged",
      "return":"void"
    },{
      "desc":"Set function and context for real time combat analyzer query succeeded.",
      "func":"( handle hFunction, handle hContext )",
      "name":"ListenForQuerySucceeded",
      "return":"void"
    },{
      "desc":"( pszItem, pszShop ) Remove an item to purchase at a custom shop.",
      "func":"( string pszItemName, string pszShopName )",
      "name":"RemoveItemFromCustomShop",
      "return":"void"
    },{
      "desc":"Stop tracking a combat analyzer query.",
      "func":"( int nQueryID )",
      "name":"RemoveRealTimeCombatAnalyzerQuery",
      "return":"void"
    },{
      "desc":"Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetAbilityTuningValueFilter",
      "return":"void"
    },{
      "desc":"If set to true, neutral items will be dropped on killing neutral monsters.  Otherwise nothing will be dropped.",
      "func":"( bool bEnabled )",
      "name":"SetAllowNeutralItemDrops",
      "return":"void"
    },{
      "desc":"Show the player hero's inventory in the HUD, regardless of what unit is selected.",
      "func":"( bool bAlwaysShow )",
      "name":"SetAlwaysShowPlayerInventory",
      "return":"void"
    },{
      "desc":"Set whether player names are always shown, regardless of client setting.",
      "func":"( bool bEnabled )",
      "name":"SetAlwaysShowPlayerNames",
      "return":"void"
    },{
      "desc":"Mutes the in-game announcer.",
      "func":"( bool bDisabled )",
      "name":"SetAnnouncerDisabled",
      "return":"void"
    },{
      "desc":"Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map.",
      "func":"( bool bEnabled )",
      "name":"SetBotThinkingEnabled",
      "return":"void"
    },{
      "desc":"Set if the bots should try their best to push with a human player.",
      "func":"( bool bAlwaysPush )",
      "name":"SetBotsAlwaysPushWithHuman",
      "return":"void"
    },{
      "desc":"Set if bots should enable their late game behavior.",
      "func":"( bool bLateGame )",
      "name":"SetBotsInLateGame",
      "return":"void"
    },{
      "desc":"Set the max tier of tower that bots want to push. (-1 to disable)",
      "func":"( int nMaxTier )",
      "name":"SetBotsMaxPushTier",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetBountyRunePickupFilter",
      "return":"void"
    },{
      "desc":"Set bounty rune spawn rate",
      "func":"( float flInterval )",
      "name":"SetBountyRuneSpawnInterval",
      "return":"void"
    },{
      "desc":"Enables or disables buyback completely.",
      "func":"( bool bEnabled )",
      "name":"SetBuybackEnabled",
      "return":"void"
    },{
      "desc":"Set a different camera distance; dota default is 1134.",
      "func":"( float flCameraDistanceOverride )",
      "name":"SetCameraDistanceOverride",
      "return":"void"
    },{
      "desc":"Set a different camera smooth count; dota default is 8.",
      "func":"( int nSmoothCount )",
      "name":"SetCameraSmoothCountOverride",
      "return":"void"
    },{
      "desc":"Sets the camera Z range",
      "func":"( float flMinZ, float flMaxZ )",
      "name":"SetCameraZRange",
      "return":"void"
    },{
      "desc":"Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue.",
      "func":"( int nStatType, float flNewValue )",
      "name":"SetCustomAttributeDerivedStatValue",
      "return":"void"
    },{
      "desc":"Set the rate cooldown ticks down for items in the backpack.",
      "func":"( float flPercent )",
      "name":"SetCustomBackpackCooldownPercent",
      "return":"void"
    },{
      "desc":"Set a custom cooldown for swapping items into the backpack.",
      "func":"( float flCooldown )",
      "name":"SetCustomBackpackSwapCooldown",
      "return":"void"
    },{
      "desc":"Turns on capability to define custom buyback cooldowns.",
      "func":"( bool bEnabled )",
      "name":"SetCustomBuybackCooldownEnabled",
      "return":"void"
    },{
      "desc":"Turns on capability to define custom buyback costs.",
      "func":"( bool bEnabled )",
      "name":"SetCustomBuybackCostEnabled",
      "return":"void"
    },{
      "desc":"Sets the topbar score display value for dire.",
      "func":"( int nScore )",
      "name":"SetCustomDireScore",
      "return":"void"
    },{
      "desc":"Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection.",
      "func":"( string pHeroName )",
      "name":"SetCustomGameForceHero",
      "return":"void"
    },{
      "desc":"Set a custom cooldown for team Glyph ability.",
      "func":"( float flCooldown )",
      "name":"SetCustomGlyphCooldown",
      "return":"void"
    },{
      "desc":"Allows definition of the max level heroes can achieve (default is 25).",
      "func":"( int_1 )",
      "name":"SetCustomHeroMaxLevel",
      "return":"void"
    },{
      "desc":"Sets the topbar score display value for radiant.",
      "func":"( int nScore )",
      "name":"SetCustomRadiantScore",
      "return":"void"
    },{
      "desc":"Set a custom cooldown for team Scan ability.",
      "func":"( float flCooldown )",
      "name":"SetCustomScanCooldown",
      "return":"void"
    },{
      "desc":"Set the effect used as a custom weather effect, when units are on non-default terrain, in this mode.",
      "func":"( string pszEffectName )",
      "name":"SetCustomTerrainWeatherEffect",
      "return":"void"
    },{
      "desc":"Allows definition of a table of hero XP values.",
      "func":"( handle hTable )",
      "name":"SetCustomXPRequiredToReachNextLevel",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetDamageFilter",
      "return":"void"
    },{
      "desc":"Enable or disable the day/night cycle.",
      "func":"( bool bDisable )",
      "name":"SetDaynightCycleDisabled",
      "return":"void"
    },{
      "desc":"Specify whether the full screen death overlay effect plays when the selected hero dies.",
      "func":"( bool bDisabled )",
      "name":"SetDeathOverlayDisabled",
      "return":"void"
    },{
      "desc":"Sets the default sticky item in the quickbuy",
      "func":"( string pItem )",
      "name":"SetDefaultStickyItem",
      "return":"void"
    },{
      "desc":"Set drafting hero banning time",
      "func":"( float flValue )",
      "name":"SetDraftingBanningTimeOverride",
      "return":"void"
    },{
      "desc":"Set drafting hero pick time",
      "func":"( float flValue )",
      "name":"SetDraftingHeroPickSelectTimeOverride",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetExecuteOrderFilter",
      "return":"void"
    },{
      "desc":"Set a fixed delay for all players to respawn after.",
      "func":"( float flFixedRespawnTime )",
      "name":"SetFixedRespawnTime",
      "return":"void"
    },{
      "desc":"Turn the fog of war on or off.",
      "func":"( bool bDisabled )",
      "name":"SetFogOfWarDisabled",
      "return":"void"
    },{
      "desc":"Prevent users from using the right click deny setting.",
      "func":"( bool bDisabled )",
      "name":"SetForceRightClickAttackDisabled",
      "return":"void"
    },{
      "desc":"Set the constant rate that the fountain will regen mana. (-1 for default)",
      "func":"( float flConstantManaRegen )",
      "name":"SetFountainConstantManaRegen",
      "return":"void"
    },{
      "desc":"Set the percentage rate that the fountain will regen health. (-1 for default)",
      "func":"( float flPercentageHealthRegen )",
      "name":"SetFountainPercentageHealthRegen",
      "return":"void"
    },{
      "desc":"Set the percentage rate that the fountain will regen mana. (-1 for default)",
      "func":"( float flPercentageManaRegen )",
      "name":"SetFountainPercentageManaRegen",
      "return":"void"
    },{
      "desc":"If set to true, enable 7.23 free courier mode.",
      "func":"( bool bEnabled )",
      "name":"SetFreeCourierModeEnabled",
      "return":"void"
    },{
      "desc":"Allows clicks on friendly buildings to be handled normally.",
      "func":"( bool bEnabled )",
      "name":"SetFriendlyBuildingMoveToEnabled",
      "return":"void"
    },{
      "desc":"Turn the sound when gold is acquired off/on.",
      "func":"( bool bDisabled )",
      "name":"SetGoldSoundDisabled",
      "return":"void"
    },{
      "desc":"Set the HUD element visibility.",
      "func":"( int iHUDElement, bool bVisible )",
      "name":"SetHUDVisible",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetHealingFilter",
      "return":"void"
    },{
      "desc":"Specify whether the default combat events will show in the HUD.",
      "func":"( bool bDisabled )",
      "name":"SetHudCombatEventsDisabled",
      "return":"void"
    },{
      "desc":"Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetItemAddedToInventoryFilter",
      "return":"void"
    },{
      "desc":"Set whether tombstones can be channeled to be removed by enemy heroes.",
      "func":"( bool bEnabled )",
      "name":"SetKillableTombstones",
      "return":"void"
    },{
      "desc":"Mutes the in-game killing spree announcer.",
      "func":"( bool bDisabled )",
      "name":"SetKillingSpreeAnnouncerDisabled",
      "return":"void"
    },{
      "desc":"Use to disable gold loss on death.",
      "func":"( bool bEnabled )",
      "name":"SetLoseGoldOnDeath",
      "return":"void"
    },{
      "desc":"Set the maximum attack speed for units.",
      "func":"( int nMaxSpeed )",
      "name":"SetMaximumAttackSpeed",
      "return":"void"
    },{
      "desc":"Set the minimum attack speed for units.",
      "func":"( int nMinSpeed )",
      "name":"SetMinimumAttackSpeed",
      "return":"void"
    },{
      "desc":"Set a filter function to control modifiers that are gained, return false to destroy modifier.",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetModifierGainedFilter",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetModifyExperienceFilter",
      "return":"void"
    },{
      "desc":"Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetModifyGoldFilter",
      "return":"void"
    },{
      "desc":"When enabled, undiscovered items in the neutral item stash are hidden.",
      "func":"( bool bEnable )",
      "name":"SetNeutralItemHideUndiscoveredEnabled",
      "return":"void"
    },{
      "desc":"Allow items to be sent to the neutral stash.",
      "func":"( bool bEnable )",
      "name":"SetNeutralStashEnabled",
      "return":"void"
    },{
      "desc":"When enabled, the all neutral items tab cannot be viewed.",
      "func":"( bool bEnable )",
      "name":"SetNeutralStashTeamViewOnlyEnabled",
      "return":"void"
    },{
      "desc":"Set an override for the default selection entity, instead of each player's hero.",
      "func":"( handle hOverrideEntity )",
      "name":"SetOverrideSelectionEntity",
      "return":"void"
    },{
      "desc":"Set pausing enabled/disabled",
      "func":"( bool bEnabled )",
      "name":"SetPauseEnabled",
      "return":"void"
    },{
      "desc":"Set power rune spawn rate",
      "func":"( float flInterval )",
      "name":"SetPowerRuneSpawnInterval",
      "return":"void"
    },{
      "desc":"Disables bonus items for randoming a hero.",
      "func":"( bool bDisabled )",
      "name":"SetRandomHeroBonusItemGrantDisabled",
      "return":"void"
    },{
      "desc":"Turn the panel for showing recommended items at the shop off/on.",
      "func":"( bool bDisabled )",
      "name":"SetRecommendedItemsDisabled",
      "return":"void"
    },{
      "desc":"Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds.",
      "func":"( bool bRemove )",
      "name":"SetRemoveIllusionsOnDeath",
      "return":"void"
    },{
      "desc":"Sets the scale applied to non-fixed respawn times. 1 = default DOTA respawn calculations.",
      "func":"( float flValue )",
      "name":"SetRespawnTimeScale",
      "return":"void"
    },{
      "desc":"Set if a given type of rune is enabled.",
      "func":"( int nRune, bool bEnabled )",
      "name":"SetRuneEnabled",
      "return":"void"
    },{
      "desc":"Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetRuneSpawnFilter",
      "return":"void"
    },{
      "desc":"Enable/disable gold penalty for late picking.",
      "func":"( bool bEnabled )",
      "name":"SetSelectionGoldPenaltyEnabled",
      "return":"void"
    },{
      "desc":"Allow items to be sent to the stash.",
      "func":"( bool bEnable )",
      "name":"SetSendToStashEnabled",
      "return":"void"
    },{
      "desc":"Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
      "func":"( bool bDisabled )",
      "name":"SetStashPurchasingDisabled",
      "return":"void"
    },{
      "desc":"Hide the sticky item in the quickbuy.",
      "func":"( bool bDisabled )",
      "name":"SetStickyItemDisabled",
      "return":"void"
    },{
      "desc":"Sets the item which goes in the TP scroll slot",
      "func":"( string pItemName )",
      "name":"SetTPScrollSlotItemOverride",
      "return":"void"
    },{
      "desc":"Set the team values on the top game bar.",
      "func":"( int iTeam, int nValue )",
      "name":"SetTopBarTeamValue",
      "return":"void"
    },{
      "desc":"Override the values of the team values on the top game bar.",
      "func":"( bool bOverride )",
      "name":"SetTopBarTeamValuesOverride",
      "return":"void"
    },{
      "desc":"Turning on/off the team values on the top game bar.",
      "func":"( bool bVisible )",
      "name":"SetTopBarTeamValuesVisible",
      "return":"void"
    },{
      "desc":"Enables/Disables tower backdoor protection.",
      "func":"( bool bEnabled )",
      "name":"SetTowerBackdoorProtectionEnabled",
      "return":"void"
    },{
      "desc":"Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)",
      "func":"( handle hFunction, handle hContext )",
      "name":"SetTrackingProjectileFilter",
      "return":"void"
    },{
      "desc":"Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war.",
      "func":"( bool bEnabled )",
      "name":"SetUnseenFogOfWarEnabled",
      "return":"void"
    },{
      "desc":"Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on.",
      "func":"( bool bEnabled )",
      "name":"SetUseCustomHeroLevels",
      "return":"void"
    },{
      "desc":"If set to true, use current rune spawn rules.  Either setting respects custom spawn intervals.",
      "func":"( bool bEnabled )",
      "name":"SetUseDefaultDOTARuneSpawnLogic",
      "return":"void"
    },{
      "desc":"Set if weather effects are disabled.",
      "func":"( bool bDisable )",
      "name":"SetWeatherEffectsDisabled",
      "return":"void"
    }],
  "CDOTA_Modifier_Lua":[{
      "desc":"True/false if this modifier is active on illusions.",
      "func":"()",
      "name":"AllowIllusionDuplicate",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"CanParentBeAutoAttacked",
      "return":"bool"
    },{
      "desc":"True/false if this buff is removed when the duration expires.",
      "func":"()",
      "name":"DestroyOnExpire",
      "return":"bool"
    },{
      "desc":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
      "func":"()",
      "name":"GetAttributes",
      "return":"int"
    },{
      "desc":"Returns aura stickiness",
      "func":"()",
      "name":"GetAuraDuration",
      "return":"float"
    },{
      "desc":"Return true/false if this entity should receive the aura under specific conditions",
      "func":"( handle hEntity )",
      "name":"GetAuraEntityReject",
      "return":"bool"
    },{
      "desc":"Return the range around the parent this aura tries to apply its buff.",
      "func":"()",
      "name":"GetAuraRadius",
      "return":"int"
    },{
      "desc":"Return the unit flags this aura respects when placing buffs.",
      "func":"()",
      "name":"GetAuraSearchFlags",
      "return":"int"
    },{
      "desc":"Return the teams this aura applies its buff to.",
      "func":"()",
      "name":"GetAuraSearchTeam",
      "return":"int"
    },{
      "desc":"Return the unit classifications this aura applies its buff to.",
      "func":"()",
      "name":"GetAuraSearchType",
      "return":"int"
    },{
      "desc":"Return the attach type of the particle system from GetEffectName.",
      "func":"()",
      "name":"GetEffectAttachType",
      "return":"int"
    },{
      "desc":"Return the name of the particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetEffectName",
      "return":"string"
    },{
      "desc":"Return the name of the hero effect particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetHeroEffectName",
      "return":"string"
    },{
      "desc":"The name of the secondary modifier that will be applied by this modifier (if it is an aura).",
      "func":"()",
      "name":"GetModifierAura",
      "return":"string"
    },{
      "desc":"Return the priority order this modifier will be applied over others.",
      "func":"()",
      "name":"GetPriority",
      "return":"int"
    },{
      "desc":"Return the name of the status effect particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetStatusEffectName",
      "return":"string"
    },{
      "desc":"Return the name of the buff icon to be shown for this modifier.",
      "func":"()",
      "name":"GetTexture",
      "return":"string"
    },{
      "desc":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
      "func":"()",
      "name":"HeroEffectPriority",
      "return":"int"
    },{
      "desc":"True/false if this modifier is an aura.",
      "func":"()",
      "name":"IsAura",
      "return":"bool"
    },{
      "desc":"True/false if this aura provides buffs when the parent is dead.",
      "func":"()",
      "name":"IsAuraActiveOnDeath",
      "return":"bool"
    },{
      "desc":"True/false if this modifier should be displayed as a debuff.",
      "func":"()",
      "name":"IsDebuff",
      "return":"bool"
    },{
      "desc":"True/false if this modifier should be displayed on the buff bar.",
      "func":"()",
      "name":"IsHidden",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPermanent",
      "return":"bool"
    },{
      "desc":"True/false if this modifier can be purged.",
      "func":"()",
      "name":"IsPurgable",
      "return":"bool"
    },{
      "desc":"True/false if this modifier can be purged by strong dispels.",
      "func":"()",
      "name":"IsPurgeException",
      "return":"bool"
    },{
      "desc":"True/false if this modifier is considered a stun for purge reasons.",
      "func":"()",
      "name":"IsStunDebuff",
      "return":"bool"
    },{
      "desc":"Runs when the modifier is created.",
      "func":"( handle table )",
      "name":"OnCreated",
      "return":"void"
    },{
      "desc":"Runs when the modifier is destroyed (after unit loses modifier).",
      "func":"()",
      "name":"OnDestroy",
      "return":"void"
    },{
      "desc":"Runs when the think interval occurs.",
      "func":"()",
      "name":"OnIntervalThink",
      "return":"void"
    },{
      "desc":"Runs when the modifier is refreshed.",
      "func":"( handle table )",
      "name":"OnRefresh",
      "return":"void"
    },{
      "desc":"Runs when the modifier is destroyed (before unit loses modifier).",
      "func":"()",
      "name":"OnRemoved",
      "return":"void"
    },{
      "desc":"Runs when stack count changes (param is old count).",
      "func":"( int iStackCount )",
      "name":"OnStackCountChanged",
      "return":"void"
    },{
      "desc":"True/false if this modifier is removed when the parent dies.",
      "func":"()",
      "name":"RemoveOnDeath",
      "return":"bool"
    },{
      "desc":"",
      "func":"( bool bHasCustomData )",
      "name":"SetHasCustomTransmitterData",
      "return":"void"
    },{
      "desc":"Apply the overhead offset to the attached effect.",
      "func":"()",
      "name":"ShouldUseOverheadOffset",
      "return":"bool"
    },{
      "desc":"Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
      "func":"()",
      "name":"StatusEffectPriority",
      "return":"int"
    }],
  "CDotaSubquestBase":[{
      "desc":"Mark this subquest complete",
      "func":"()",
      "name":"CompleteSubquest",
      "return":"void"
    },{
      "desc":"Set the text replace string for this subquest",
      "func":"( string pszString )",
      "name":"SetTextReplaceString",
      "return":"void"
    },{
      "desc":"Set a subquest value",
      "func":"( int valueSlot, int value )",
      "name":"SetTextReplaceValue",
      "return":"void"
    }],
  "CBaseEntity":[{
      "desc":"AddEffects( int ): Adds the render effect flag.",
      "func":"( int nFlags )",
      "name":"AddEffects",
      "return":"void"
    },{
      "desc":"Apply a Velocity Impulse",
      "func":"( Vector vecImpulse )",
      "name":"ApplyAbsVelocityImpulse",
      "return":"void"
    },{
      "desc":"Apply an Ang Velocity Impulse",
      "func":"( Vector angImpulse )",
      "name":"ApplyLocalAngularVelocityImpulse",
      "return":"void"
    },{
      "desc":"Get float value for an entity attribute.",
      "func":"( string pName, float flDefault )",
      "name":"Attribute_GetFloatValue",
      "return":"float"
    },{
      "desc":"Get int value for an entity attribute.",
      "func":"( string pName, int nDefault )",
      "name":"Attribute_GetIntValue",
      "return":"int"
    },{
      "desc":"Set float value for an entity attribute.",
      "func":"( string pName, float flValue )",
      "name":"Attribute_SetFloatValue",
      "return":"void"
    },{
      "desc":"Set int value for an entity attribute.",
      "func":"( string pName, int nValue )",
      "name":"Attribute_SetIntValue",
      "return":"void"
    },{
      "desc":"Delete an entity attribute.",
      "func":"( string pName )",
      "name":"DeleteAttribute",
      "return":"void"
    },{
      "desc":"Plays a sound from this entity.",
      "func":"( string soundname )",
      "name":"EmitSound",
      "return":"void"
    },{
      "desc":"Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0.",
      "func":"( string soundname, int nPitch, float flVolume, float flDelay )",
      "name":"EmitSoundParams",
      "return":"void"
    },{
      "desc":"Get the qangles that this entity is looking at.",
      "func":"()",
      "name":"EyeAngles",
      "return":"QAngle"
    },{
      "desc":"Get vector to eye position - absolute coords.",
      "func":"()",
      "name":"EyePosition",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"FirstMoveChild",
      "return":"handle"
    },{
      "desc":"hEntity to follow, bool bBoneMerge",
      "func":"( handle hEnt, bool bBoneMerge )",
      "name":"FollowEntity",
      "return":"void"
    },{
      "desc":"Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks.",
      "func":"( handle hResult )",
      "name":"GatherCriteria",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbsOrigin",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAbsScale",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAngles",
      "return":"QAngle"
    },{
      "desc":"Get entity pitch, yaw, roll as a vector.",
      "func":"()",
      "name":"GetAnglesAsVector",
      "return":"Vector"
    },{
      "desc":"Get the local angular velocity - returns a vector of pitch,yaw,roll",
      "func":"()",
      "name":"GetAngularVelocity",
      "return":"Vector"
    },{
      "desc":"Get Base? velocity.",
      "func":"()",
      "name":"GetBaseVelocity",
      "return":"Vector"
    },{
      "desc":"Get a vector containing max bounds, centered on object.",
      "func":"()",
      "name":"GetBoundingMaxs",
      "return":"Vector"
    },{
      "desc":"Get a vector containing min bounds, centered on object.",
      "func":"()",
      "name":"GetBoundingMins",
      "return":"Vector"
    },{
      "desc":"Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object.",
      "func":"()",
      "name":"GetBounds",
      "return":"table"
    },{
      "desc":"Get vector to center of object - absolute coords",
      "func":"()",
      "name":"GetCenter",
      "return":"Vector"
    },{
      "desc":"Get the entities parented to this entity.",
      "func":"()",
      "name":"GetChildren",
      "return":"handle"
    },{
      "desc":"GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found).",
      "func":"( string name )",
      "name":"GetContext",
      "return":"table"
    },{
      "desc":"Get the forward vector of the entity.",
      "func":"()",
      "name":"GetForwardVector",
      "return":"Vector"
    },{
      "desc":"Get the health of this entity.",
      "func":"()",
      "name":"GetHealth",
      "return":"int"
    },{
      "desc":"Get entity local pitch, yaw, roll as a QAngle",
      "func":"()",
      "name":"GetLocalAngles",
      "return":"QAngle"
    },{
      "desc":"Maybe local angvel",
      "func":"()",
      "name":"GetLocalAngularVelocity",
      "return":"QAngle"
    },{
      "desc":"Get entity local origin as a Vector",
      "func":"()",
      "name":"GetLocalOrigin",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetLocalScale",
      "return":"float"
    },{
      "desc":"Get Entity relative velocity.",
      "func":"()",
      "name":"GetLocalVelocity",
      "return":"Vector"
    },{
      "desc":"Get the mass of an entity. (returns 0 if it doesn't have a physics object)",
      "func":"()",
      "name":"GetMass",
      "return":"float"
    },{
      "desc":"Get the maximum health of this entity.",
      "func":"()",
      "name":"GetMaxHealth",
      "return":"int"
    },{
      "desc":"Returns the name of the model.",
      "func":"()",
      "name":"GetModelName",
      "return":"string"
    },{
      "desc":"If in hierarchy, retrieves the entity's parent.",
      "func":"()",
      "name":"GetMoveParent",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetOrigin",
      "return":"Vector"
    },{
      "desc":"Gets this entity's owner",
      "func":"()",
      "name":"GetOwner",
      "return":"handle"
    },{
      "desc":"Get the owner entity, if there is one",
      "func":"()",
      "name":"GetOwnerEntity",
      "return":"handle"
    },{
      "desc":"Get the right vector of the entity.",
      "func":"()",
      "name":"GetRightVector",
      "return":"Vector"
    },{
      "desc":"If in hierarchy, walks up the hierarchy to find the root parent.",
      "func":"()",
      "name":"GetRootMoveParent",
      "return":"handle"
    },{
      "desc":"Returns float duration of the sound. Takes soundname and optional actormodelname.",
      "func":"( string soundname, string actormodel )",
      "name":"GetSoundDuration",
      "return":"float"
    },{
      "desc":"Returns the spawn group handle of this entity",
      "func":"()",
      "name":"GetSpawnGroupHandle",
      "return":"int"
    },{
      "desc":"Get the team number of this entity.",
      "func":"()",
      "name":"GetTeam",
      "return":"int"
    },{
      "desc":"Get the team number of this entity.",
      "func":"()",
      "name":"GetTeamNumber",
      "return":"int"
    },{
      "desc":"Get the up vector of the entity.",
      "func":"()",
      "name":"GetUpVector",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetVelocity",
      "return":"Vector"
    },{
      "desc":"See if an entity has a particular attribute.",
      "func":"( string pName )",
      "name":"HasAttribute",
      "return":"bool"
    },{
      "desc":"Is this entity alive?",
      "func":"()",
      "name":"IsAlive",
      "return":"bool"
    },{
      "desc":"Is this entity an CAI_BaseNPC?",
      "func":"()",
      "name":"IsNPC",
      "return":"bool"
    },{
      "desc":"Is this entity a player?",
      "func":"()",
      "name":"IsPlayer",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"Kill",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"NextMovePeer",
      "return":"handle"
    },{
      "desc":"Takes duration, value for a temporary override.",
      "func":"( float duration, float friction )",
      "name":"OverrideFriction",
      "return":"void"
    },{
      "desc":"Precache a sound for later playing.",
      "func":"( string soundname )",
      "name":"PrecacheScriptSound",
      "return":"void"
    },{
      "desc":"RemoveEffects( int ): Removes the render effect flag.",
      "func":"( int nFlags )",
      "name":"RemoveEffects",
      "return":"void"
    },{
      "desc":"Set entity pitch, yaw, roll by component.",
      "func":"( float fPitch, float fYaw, float fRoll )",
      "name":"SetAbsAngles",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector origin )",
      "name":"SetAbsOrigin",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flScale )",
      "name":"SetAbsScale",
      "return":"void"
    },{
      "desc":"Set entity pitch, yaw, roll by component.",
      "func":"( float fPitch, float fYaw, float fRoll )",
      "name":"SetAngles",
      "return":"void"
    },{
      "desc":"Set the local angular velocity - takes float pitch,yaw,roll velocities",
      "func":"( float pitchVel, float yawVel, float rollVel )",
      "name":"SetAngularVelocity",
      "return":"void"
    },{
      "desc":"Set the position of the constraint.",
      "func":"( Vector vPos )",
      "name":"SetConstraint",
      "return":"void"
    },{
      "desc":"SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever').",
      "func":"( string pName, string pValue, float duration )",
      "name":"SetContext",
      "return":"void"
    },{
      "desc":"SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever').",
      "func":"( string pName, float fValue, float duration )",
      "name":"SetContextNum",
      "return":"void"
    },{
      "desc":"Set a think function on this entity.",
      "func":"( string pszContextName, handle hThinkFunc, float flInterval )",
      "name":"SetContextThink",
      "return":"void"
    },{
      "desc":"Set the name of an entity.",
      "func":"( string pName )",
      "name":"SetEntityName",
      "return":"void"
    },{
      "desc":"Set the orientation of the entity to have this forward vector.",
      "func":"( Vector v )",
      "name":"SetForwardVector",
      "return":"void"
    },{
      "desc":"Set PLAYER friction, ignored for objects.",
      "func":"( float flFriction )",
      "name":"SetFriction",
      "return":"void"
    },{
      "desc":"Set PLAYER gravity, ignored for objects.",
      "func":"( float flGravity )",
      "name":"SetGravity",
      "return":"void"
    },{
      "desc":"Set the health of this entity.",
      "func":"( int nHealth )",
      "name":"SetHealth",
      "return":"void"
    },{
      "desc":"Set entity local pitch, yaw, roll by component",
      "func":"( float fPitch, float fYaw, float fRoll )",
      "name":"SetLocalAngles",
      "return":"void"
    },{
      "desc":"Set entity local origin from a Vector",
      "func":"( Vector origin )",
      "name":"SetLocalOrigin",
      "return":"void"
    },{
      "desc":"",
      "func":"( float flScale )",
      "name":"SetLocalScale",
      "return":"void"
    },{
      "desc":"Set the mass of an entity. (does nothing if it doesn't have a physics object)",
      "func":"( float flMass )",
      "name":"SetMass",
      "return":"void"
    },{
      "desc":"Set the maximum health of this entity.",
      "func":"( int amt )",
      "name":"SetMaxHealth",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector v )",
      "name":"SetOrigin",
      "return":"void"
    },{
      "desc":"Sets this entity's owner",
      "func":"( handle pOwner )",
      "name":"SetOwner",
      "return":"void"
    },{
      "desc":"Set the parent for this entity.",
      "func":"( handle hParent, string pAttachmentname )",
      "name":"SetParent",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iTeamNum )",
      "name":"SetTeam",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector vecVelocity )",
      "name":"SetVelocity",
      "return":"void"
    },{
      "desc":"Stops a named sound playing from this entity.",
      "func":"( string soundname )",
      "name":"StopSound",
      "return":"void"
    },{
      "desc":"Apply damage to this entity. Use CreateDamageInfo() to create a damageinfo object.",
      "func":"( handle hInfo )",
      "name":"TakeDamage",
      "return":"int"
    },{
      "desc":"Returns the input Vector transformed from entity to world space",
      "func":"( Vector vPoint )",
      "name":"TransformPointEntityToWorld",
      "return":"Vector"
    },{
      "desc":"Returns the input Vector transformed from world to entity space",
      "func":"( Vector vPoint )",
      "name":"TransformPointWorldToEntity",
      "return":"Vector"
    },{
      "desc":"Fires off this entity's OnTrigger responses.",
      "func":"()",
      "name":"Trigger",
      "return":"void"
    },{
      "desc":"Validates the private script scope and creates it if one doesn't exist.",
      "func":"()",
      "name":"ValidatePrivateScriptScope",
      "return":"void"
    }],
  "CDOTATutorial":[{
      "desc":"Add a computer controlled bot.",
      "func":"( string_1, string_2, string_3, bool_4 )",
      "name":"AddBot",
      "return":"bool"
    },{
      "desc":"Add a quest to the quest log",
      "func":"( string_1, int_2, string_3, string_4 )",
      "name":"AddQuest",
      "return":"void"
    },{
      "desc":"Add an item to the shop whitelist.",
      "func":"( string_1 )",
      "name":"AddShopWhitelistItem",
      "return":"void"
    },{
      "desc":"Complete a quest,",
      "func":"( string_1 )",
      "name":"CompleteQuest",
      "return":"void"
    },{
      "desc":"Add a task to move to a specific location",
      "func":"( Vector_1 )",
      "name":"CreateLocationTask",
      "return":"void"
    },{
      "desc":"Alert the player when a creep becomes agro to their hero.",
      "func":"( bool_1 )",
      "name":"EnableCreepAggroViz",
      "return":"void"
    },{
      "desc":"Enable the tip to alert players how to find their hero.",
      "func":"( bool_1 )",
      "name":"EnablePlayerOffscreenTip",
      "return":"void"
    },{
      "desc":"Alert the player when a tower becomes agro to their hero.",
      "func":"( bool_1 )",
      "name":"EnableTowerAggroViz",
      "return":"void"
    },{
      "desc":"End the tutorial.",
      "func":"()",
      "name":"FinishTutorial",
      "return":"void"
    },{
      "desc":"Force the start of the game.",
      "func":"()",
      "name":"ForceGameStart",
      "return":"void"
    },{
      "desc":"Is our time frozen?",
      "func":"()",
      "name":"GetTimeFrozen",
      "return":"bool"
    },{
      "desc":"Is this item currently in the white list.",
      "func":"( string_1 )",
      "name":"IsItemInWhiteList",
      "return":"bool"
    },{
      "desc":"Remove an item from the shop whitelist.",
      "func":"( string_1 )",
      "name":"RemoveShopWhitelistItem",
      "return":"void"
    },{
      "desc":"Select a hero for the local player",
      "func":"( string_1 )",
      "name":"SelectHero",
      "return":"void"
    },{
      "desc":"Select the team for the local player",
      "func":"( string_1 )",
      "name":"SelectPlayerTeam",
      "return":"void"
    },{
      "desc":"Set the current item guide.",
      "func":"( string_1 )",
      "name":"SetItemGuide",
      "return":"void"
    },{
      "desc":"Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify",
      "func":"( int_1, bool_2 )",
      "name":"SetOrModifyPlayerGold",
      "return":"void"
    },{
      "desc":"Set players quick buy item.",
      "func":"( string_1 )",
      "name":"SetQuickBuy",
      "return":"void"
    },{
      "desc":"Set the shop open or closed.",
      "func":"( bool_1 )",
      "name":"SetShopOpen",
      "return":"void"
    },{
      "desc":"Set if we should freeze time or not.",
      "func":"( bool_1 )",
      "name":"SetTimeFrozen",
      "return":"void"
    },{
      "desc":"Set a tutorial convar",
      "func":"( string_1, string_2 )",
      "name":"SetTutorialConvar",
      "return":"void"
    },{
      "desc":"Set the UI to use a reduced version to focus attention to specific elements.",
      "func":"( int_1 )",
      "name":"SetTutorialUI",
      "return":"void"
    },{
      "desc":"Set if we should whitelist shop items.",
      "func":"( bool_1 )",
      "name":"SetWhiteListEnabled",
      "return":"void"
    },{
      "desc":"Initialize Tutorial Mode",
      "func":"()",
      "name":"StartTutorialMode",
      "return":"void"
    },{
      "desc":"Upgrade a specific ability for the local hero",
      "func":"( string_1 )",
      "name":"UpgradePlayerAbility",
      "return":"void"
    }]
}