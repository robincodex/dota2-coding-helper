{
    "CDOTAGameManager": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetHeroDataByName_Script": "",
        "GetHeroIDByName": "",
        "GetHeroNameByID": "",
        "GetHeroNameForUnitName": "",
        "GetHeroUnitNameByID": ""
    },
    "C_BaseEntity": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetAbsOrigin": "",
        "GetTeamNumber": "",
        "SetContextThink": ""
    },
    "Globals": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AngleDiff": "返回两个偏航角度之差",
        "AppendToLogFile": "在服务器日志文件上增加一个string",
        "AxisAngleToQuaternion": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
        "CalcClosestPointOnEntityOBB": "计算实体的OBB上最接近的两个点。",
        "CalcDistanceBetweenEntityOBB": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
        "CalcDistanceToLineSegment2D": "",
        "CancelEntityIOEvents": "为特定的实体创建所有输入/输出事件",
        "CreateEffect": "传递table-输入：实体，效果",
        "CreateHTTPRequest": "生成一个HTTP请求。",
        "CreateHTTPRequestScriptVM": "",
        "CrossVectors": "",
        "DebugBreak": "在debugger（调试模式）中停止运行",
        "DebugDrawBox": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
        "DebugDrawBoxDirection": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
        "DebugDrawCircle": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
        "DebugDrawClear": "尝试清理所有debugoverlay信息",
        "DebugDrawLine": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
        "DebugDrawLine_vCol": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
        "DebugDrawScreenTextLine": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
        "DebugDrawSphere": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
        "DebugDrawText": "显示3d文字(origin,text,bViewCheck,duration)",
        "DebugScreenTextPretty": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
        "DoIncludeScript": "运行一个内部脚本",
        "DoScriptAssert": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
        "DoUniqueString": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
        "EmitSoundOn": "在一个实体上播放给定名称的音效",
        "EmitSoundOnClient": "为指定玩家播放给定名称的音效",
        "EntIndexToHScript": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
        "ExponentialDecay": "滑的曲线，接近0时减少较慢",
        "FireEntityIOInputNameOnly": "触发实体的动作输入w/no数据",
        "FireEntityIOInputString": "用给定字符串（由你分配内存）触发实体的动作输入",
        "FireEntityIOInputVec": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
        "FireGameEvent": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
        "FireGameEventLocal": "触发一个游戏事件但不广播给客户端",
        "FrameTime": "获取上一帧在服务器上花费的时间",
        "GetFrameCount": "返回引擎当然的帧数",
        "GetListenServerHost": "在广播服务器获取本地玩家",
        "GetLocalPlayerID": "",
        "GetLocalPlayerTeam": "",
        "GetMapName": "获取地图的名字",
        "GetMaxOutputDelay": "获取输出事件的最大延迟",
        "GetPhysAngularVelocity": "获取VPHYS或普通物体的角速度",
        "GetPhysVelocity": "获取VPHYS或普通物体的速度",
        "InitLogFile": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
        "IsClient": "",
        "IsDedicatedServer": "如果服务器开放返回true",
        "IsInToolsMode": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
        "IsMarkedForDeletion": "如果实体有效并被标记为删除返回true",
        "IsServer": "当Lua代码是从Server.dll中被运行的时候，返回True。",
        "IsValidEntity": "检查给定hScript是否为有效实体",
        "LerpVectors": "",
        "LinkLuaModifier": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
        "ListenToGameEvent": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
        "LoadKeyValues": "用给定的关键字文件创建table",
        "LoadKeyValuesFromString": "用给定的关键字string创建table",
        "LocalTime": "",
        "MakeStringToken": "检查给定的hScript是否是有效实体（？）",
        "Msg": "输出信息",
        "PlayerInstanceFromIndex": "通过索引获取玩家的脚本实例",
        "PrecacheEntityFromTable": "用关键字从table中预缓存一个实体",
        "PrecacheEntityListFromTable": "预缓存一个实体关键字列表",
        "PrintLinkedConsoleMessage": "",
        "RandomFloat": "获取范围内随机float",
        "RandomInt": "获取范围内随机int",
        "RegisterSpawnGroupFilterProxy": "为一个脚本基础的生成单位过滤器创建一个C代理",
        "ReloadMOTD": "重载MotD文件",
        "RemoveSpawnGroupFilterProxy": "为一个脚本基础的生成单位过滤器删除一个C代理",
        "RotateOrientation": "旋转一个QAngle，用另一个QAngle",
        "RotatePosition": "",
        "RotateQuaternionByAxisAngle": "围绕给定vector轴线旋转一个四元数",
        "RotationDelta": "两个QAngle间的delta值",
        "RotationDeltaAsAngularVelocity": "",
        "ScreenShake": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
        "SendToConsole": "给控制台发送string作为客户端命令",
        "SetOpvarFloatAll": "为所有玩家设置opvar值",
        "SetOpvarFloatPlayer": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
        "SetPhysAngularVelocity": "",
        "SetQuestName": "设置当前任务名",
        "SetQuestPhase": "设置当前任务阶段",
        "SetRenderingEnabled": "为ehandle设置rendering（渲染）开/关",
        "SpawnEntityFromTableSynchronous": "从table同步生成一个实体",
        "SpawnEntityGroupFromTable": "从一系列生成表中分级生成一个实体组",
        "SpawnEntityListFromTableAsynchronous": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
        "SpawnEntityListFromTableSynchronous": "从一个生成表列表同步生成一个实体组.",
        "SplineQuaternions": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
        "SplineVectors": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
        "StartSoundEvent": "开始音效事件",
        "StartSoundEventFromPosition": "在某个位置开始音效事件。",
        "StartSoundEventFromPositionReliable": "通过可靠的传递，在某个位置开始音效事件。",
        "StartSoundEventFromPositionUnreliable": "通过随意的传递，在某个位置开始音效事件。",
        "StartSoundEventReliable": "通过可靠的传递，开始音效事件。",
        "StartSoundEventUnreliable": "通过随意的传递，开始音效事件。",
        "StopEffect": "",
        "StopListeningToAllGameEvents": "停止listen在给定内容内的所有游戏事件",
        "StopListeningToGameEvent": "停止listen特定的游戏事件",
        "StopSoundEvent": "停止音效事件",
        "StopSoundOn": "停止实体上的命名音效",
        "Time": "获取当前服务器时间",
        "TraceCollideable": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
        "TraceHull": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
        "TraceLine": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
        "UTIL_Remove": "删除给定实体",
        "UTIL_RemoveImmediate": "立即删除给定实体",
        "UnitFilter": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
        "UnloadSpawnGroup": "通过名称去除生成组",
        "UnloadSpawnGroupByHandle": "通过handle去除生成组",
        "VectorToAngles": "为Vector获取Qangle（没有滚动）",
        "Warning": "输出警告",
        "cvar_getf": "获取给定cvar的值，返回float.",
        "cvar_setf": "设置给定cvar的值,传递float.",
        "rr_AddDecisionRule": "给决定数据库增加一个规则",
        "rr_CommitAIResponse": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
        "rr_GetResponseTargets": "获取所有提供的表达者目标的table，格式为{name:handle,name:handle}.",
        "rr_QueryBestResponse": "参数:(hEnt,hQuery,hResult)//静态:对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)"
    },
    "C_DOTABaseAbility": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetBehavior": "",
        "GetCaster": "",
        "GetLevel": "",
        "GetSpecialValueFor": "",
        "GetToggleState": "",
        "IsItem": ""
    },
    "C_DOTA_Modifier_Lua": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AllowIllusionDuplicate": "",
        "CanParentBeAutoAttacked": "",
        "DestroyOnExpire": "",
        "GetAttributes": "",
        "GetAuraDuration": "",
        "GetAuraEntityReject": "",
        "GetAuraRadius": "",
        "GetAuraSearchFlags": "",
        "GetAuraSearchTeam": "",
        "GetAuraSearchType": "",
        "GetEffectAttachType": "",
        "GetEffectName": "",
        "GetHeroEffectName": "",
        "GetModifierAura": "",
        "GetPriority": "",
        "GetStatusEffectName": "",
        "GetTexture": "",
        "HeroEffectPriority": "",
        "IsAura": "",
        "IsAuraActiveOnDeath": "",
        "IsDebuff": "",
        "IsHidden": "",
        "IsPermanent": "",
        "IsPurgable": "",
        "IsPurgeException": "",
        "IsStunDebuff": "",
        "OnCreated": "",
        "OnDestroy": "",
        "OnIntervalThink": "",
        "OnRefresh": "",
        "OnRemoved": "",
        "OnStackCountChanged": "",
        "RemoveOnDeath": "",
        "ShouldUseOverheadOffset": "",
        "StatusEffectPriority": ""
    },
    "GlobalSys": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "CommandLineCheck": "",
        "CommandLineFloat": "",
        "CommandLineInt": "",
        "CommandLineStr": ""
    },
    "Convars": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetBool": "GetBool(name):将指定的控制台变量（convar）作为boolean返回.",
        "GetCommandClient": "GetCommandClient():返回输入该控制台指令的玩家",
        "GetDOTACommandClient": "GetDOTACommandClient():返回输入该控制台智力的DOTA玩家",
        "GetFloat": "GetFloat(name):将指定的控制台变量（convar）作为float返回.不存在时返回nil",
        "GetInt": "GetInt(name):将指定的控制台变量（convar）作为int返回.不存在时返回nil",
        "GetStr": "GetStr(name):将指定的控制台变量（convar）作为string返回.不存在时返回nil",
        "RegisterCommand": "RegisterCommand(name,fn,helpString,flags):注册一个控制台指令.",
        "RegisterConvar": "RegisterConvar(name,defaultValue,helpString,flags):注册一个新的控制台变量.",
        "SetBool": "SetBool(name,val):将指定控制台变量（convar）设置为指定bool.",
        "SetFloat": "SetFloat(name,val):将指定控制台变量（convar）设置为指定float.",
        "SetInt": "SetInt(name,val):将指定控制台变量（convar）设置为指定int.",
        "SetStr": "SetStr(name,val):将指定控制台变量（convar）设置为指定string."
    },
    "C_BaseModelEntity": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetRenderAlpha": ""
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "OnHorizontalMotionInterrupted": "当运动被打断时进行回调。",
        "UpdateHorizontalMotion": "根据给定的间隔对NPC施加水平运动"
    },
    "CDOTA_Modifier_Lua_Motion_Both": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "OnHorizontalMotionInterrupted": "当水平运动被打断时进行回调。",
        "OnVerticalMotionInterrupted": "当竖直运动被打断时进行回调。",
        "UpdateHorizontalMotion": "根据给定的间隔对NPC施加水平运动。",
        "UpdateVerticalMotion": "根据给定的间隔对NPC施加竖直运动。"
    },
    "C_DOTA_BaseNPC": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetAbilityCount": "",
        "GetAttackSpeed": "",
        "GetAttacksPerSecond": "",
        "GetBaseAttackTime": "",
        "GetBaseMagicalResistanceValue": "",
        "GetBaseMoveSpeed": "",
        "GetCastRangeBonus": "",
        "GetCollisionPadding": "",
        "GetCooldownReduction": "",
        "GetCurrentVisionRange": "",
        "GetDayTimeVisionRange": "",
        "GetHasteFactor": "",
        "GetHealthPercent": "",
        "GetHullRadius": "",
        "GetIdealSpeed": "",
        "GetIdealSpeedNoSlows": "",
        "GetIncreasedAttackSpeed": "",
        "GetLevel": "",
        "GetMagicalArmorValue": "",
        "GetMana": "",
        "GetManaRegen": "",
        "GetMaxMana": "",
        "GetModelRadius": "",
        "GetModifierStackCount": "",
        "GetMoveSpeedModifier": "",
        "GetNightTimeVisionRange": "",
        "GetOpposingTeamNumber": "",
        "GetPaddedCollisionRadius": "",
        "GetPhysicalArmorBaseValue": "",
        "GetPhysicalArmorValue": "",
        "GetPlayerOwnerID": "",
        "GetSecondsPerAttack": "",
        "GetTotalPurchasedUpgradeGoldCost": "",
        "GetUnitLabel": "",
        "GetUnitName": "",
        "HasAttackCapability": "",
        "HasFlyMovementCapability": "",
        "HasFlyingVision": "",
        "HasGroundMovementCapability": "",
        "HasItemInInventory": "",
        "HasModifier": "",
        "HasMovementCapability": "",
        "HasScepter": "",
        "IsAncient": "",
        "IsAttackImmune": "",
        "IsBarracks": "",
        "IsBlind": "",
        "IsBoss": "",
        "IsBuilding": "",
        "IsCommandRestricted": "",
        "IsConsideredHero": "",
        "IsControllableByAnyPlayer": "",
        "IsCourier": "",
        "IsCreature": "",
        "IsCreep": "",
        "IsDisarmed": "",
        "IsDominated": "",
        "IsEvadeDisabled": "",
        "IsFort": "",
        "IsFrozen": "",
        "IsHero": "",
        "IsHexed": "",
        "IsIllusion": "",
        "IsInventoryEnabled": "",
        "IsInvisible": "",
        "IsInvulnerable": "",
        "IsLowAttackPriority": "",
        "IsMagicImmune": "",
        "IsMoving": "",
        "IsMuted": "",
        "IsNeutralUnitType": "",
        "IsNightmared": "",
        "IsOther": "",
        "IsOutOfGame": "",
        "IsOwnedByAnyPlayer": "",
        "IsPhantom": "",
        "IsRangedAttacker": "",
        "IsRealHero": "",
        "IsRooted": "",
        "IsSilenced": "",
        "IsSpeciallyDeniable": "",
        "IsStunned": "",
        "IsSummoned": "",
        "IsTower": "",
        "IsUnselectable": "",
        "IsUntargetable": "",
        "NoHealthBar": "",
        "NoTeamMoveTo": "",
        "NoTeamSelect": "",
        "NoUnitCollision": "",
        "NotOnMinimap": "",
        "NotOnMinimapForEnemies": "",
        "PassivesDisabled": "",
        "ProvidesVision": "",
        "Script_GetAttackRange": "",
        "Script_IsDeniable": "",
        "UnitCanRespawn": ""
    },
    "CBodyComponent": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AddImpulseAtPosition": "在指定的世界位置施加一个物理推动",
        "AddVelocity": "为物理物件增加一个线速度或角速度",
        "DetachFromParent": "从其父项（parent）中分离",
        "GetSequence": "返回激活的序列（sequence）",
        "IsAttachedToParent": "是否依附父项（parent）",
        "LookupSequence": "输入名字返回序列（sequence）ID",
        "SequenceDuration": "按秒数返回指定序列（sequence）的持续时间",
        "SetAngularVelocity": "",
        "SetAnimation": "输入动画名称播放动作，需要模型拥有该动画",
        "SetMaterialGroup": "",
        "SetVelocity": ""
    },
    "C_PointWorldText": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "SetMessage": ""
    },
    "C_BaseCombatCharacter": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": ""
    },
    "C_DOTA_Item_Lua": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "CastFilterResult": "",
        "CastFilterResultLocation": "",
        "CastFilterResultTarget": "",
        "GetAOERadius": "",
        "GetAbilityTextureName": "",
        "GetBehavior": "",
        "GetCastRange": "",
        "GetChannelTime": "",
        "GetChannelledManaCostPerSecond": "",
        "GetCooldown": "",
        "GetCustomCastError": "",
        "GetCustomCastErrorLocation": "",
        "GetCustomCastErrorTarget": "",
        "GetGoldCost": "",
        "GetManaCost": "",
        "IsMuted": ""
    },
    "CDOTA_Buff": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AddParticle": "增加粒子。",
        "DecrementStackCount": "将Mordifier的叠加层数-1",
        "Destroy": "运行所有相关的移除函数来移除这个Mordifier。",
        "ForceRefresh": "运行所有相关的刷新函数，使Mordifier恢复到初始",
        "GetAbility": "获取产生这个Mordifier的技能。",
        "GetAuraDuration": "",
        "GetAuraOwner": "",
        "GetCaster": "获取产生这个Mordifier的单位。",
        "GetClass": "获取这个Mordifier所属的类。",
        "GetCreationTime": "获取这个Mordifier的创建时间。",
        "GetDieTime": "获取这个Mordifier的终止时间。",
        "GetDuration": "获取这个Mordifier的持续时间。",
        "GetElapsedTime": "获取这个Mordifier的消失时间。",
        "GetLastAppliedTime": "",
        "GetName": "获取这个Mordifier的名称。",
        "GetParent": "获取这个Mordifier所继承的单位。",
        "GetRemainingTime": "获取这个Mordifier的剩余时间。",
        "GetSerialNumber": "",
        "GetStackCount": "获取这个Mordifier的叠加层数。",
        "HasFunction": "",
        "IncrementStackCount": "使Mordifier的叠加层数+1。",
        "IsDebuff": "",
        "IsHexDebuff": "",
        "IsStunDebuff": "",
        "SetDuration": "设置持续时间。",
        "SetStackCount": "设置叠加层数。",
        "StartIntervalThink": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。"
    },
    "CNativeOutputs": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AddOutput": "增加一个输出",
        "Init": "初始化输出"
    },
    "CEntityInstance": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "ConnectOutput": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
        "Destroy": "",
        "DisconnectOutput": "从这个实体的I/O事件移除已连接的脚本方法",
        "DisconnectRedirectedOutput": "从传入实体的I/O事件移除已连接的脚本方法",
        "FireOutput": "触发实体的输出",
        "GetClassname": "",
        "GetDebugName": "如果没有定义的话获得实体名字的帮助",
        "GetEntityHandle": "获得这个实体的EHANDLE",
        "GetEntityIndex": "",
        "GetIntAttr": "获得整型属性",
        "GetName": "",
        "GetOrCreatePrivateScriptScope": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
        "GetOrCreatePublicScriptScope": "恢复实体相关的公用脚本数据,必要时会创建",
        "GetPrivateScriptScope": "恢复实体相关的每个实例私有的脚本数据",
        "GetPublicScriptScope": "恢复实体相关的公用脚本数据",
        "RedirectOutput": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
        "RemoveSelf": "删除这个实体",
        "SetIntAttr": "设置整型属性",
        "entindex": ""
    },
    "C_DOTA_BaseNPC_Hero": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetAgility": "",
        "GetIntellect": "",
        "GetStrength": ""
    },
    "CScriptParticleManager": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "CreateParticle": "创建一个新的粒子特效",
        "CreateParticleForPlayer": "创建一个只对指定玩家播放的粒子特效",
        "CreateParticleForTeam": "创建一个仅为某方队伍播放的粒子特效。",
        "DestroyParticle": "清除粒子。",
        "GetParticleReplacement": "",
        "ReleaseParticleIndex": "施放指定粒子特效索引号",
        "SetParticleAlwaysSimulate": "",
        "SetParticleControl": "设置控制粒子特效的控制点数据",
        "SetParticleControlEnt": "",
        "SetParticleControlFallback": "",
        "SetParticleControlForward": "设置粒子的前进运动",
        "SetParticleControlOrientation": "设置粒子的三向运动。",
        "SetParticleControlOrientationFLU": "",
        "SetParticleFoWProperties": "",
        "SetParticleShouldCheckFoW": ""
    },
    "CDOTA_Modifier_Lua_Vertical_Motion": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "OnVerticalMotionInterrupted": "当竖直运动被打断时进行回调",
        "UpdateVerticalMotion": "根据给定的间隔对NPC施加竖直运动。"
    },
    "CEntities": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "First": "在实体数组或表中开始一个迭代程序",
        "Next": "从指定列表中的实体开始迭代"
    },
    "C_DOTA_Item": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetCurrentCharges": "",
        "GetInitialCharges": "",
        "GetItemSlot": "",
        "GetSecondaryCharges": "",
        "GetShareability": "",
        "IsAlertableItem": "",
        "IsCastOnPickup": "",
        "IsDisassemblable": "",
        "IsDroppable": "",
        "IsInBackpack": "",
        "IsItem": "",
        "IsKillable": "",
        "IsMuted": "",
        "IsPermanent": "",
        "IsPurchasable": "",
        "IsRecipe": "",
        "IsRecipeGenerated": "",
        "IsSellable": "",
        "IsStackable": "",
        "RequiresCharges": ""
    },
    "C_BaseFlex": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": ""
    },
    "C_BaseAnimating": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": ""
    },
    "CScriptPrecacheContext": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "AddResource": "预缓存指定资源",
        "GetValue": "读取一个键值（spawnkey）"
    },
    "CScriptKeyValues": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "GetValue": "读取一个键值（spawnkey）"
    },
    "C_DOTA_Ability_Lua": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "CastFilterResult": "",
        "CastFilterResultLocation": "",
        "CastFilterResultTarget": "",
        "GetAOERadius": "",
        "GetAbilityTextureName": "",
        "GetBehavior": "",
        "GetCastPoint": "",
        "GetCastRange": "",
        "GetChannelTime": "",
        "GetChannelledManaCostPerSecond": "",
        "GetCooldown": "",
        "GetCustomCastError": "",
        "GetCustomCastErrorLocation": "",
        "GetCustomCastErrorTarget": "",
        "GetGoldCost": "",
        "GetManaCost": ""
    },
    "CInfoWorldLayer": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": "",
        "HideWorldLayer": "",
        "ShowWorldLayer": ""
    },
    "CEntityScriptFramework": {
        "__self": "",
        "__extends": "",
        "__globalAccessorVariable": ""
    }
}
