{
  "CDOTA_Ability_Nian_Roar": {
    "__self": "",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "GetCastCount": "年兽使用了咆哮的次数"
  },
  "Globals": {
    "__self": "全局函数，可以被任何类使用。",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddFOWViewer": "为指定队伍增加临时视野(nTeamID,vLocation,flRadius,flDuration,bObstructedVision)",
    "AngleDiff": "返回两个偏航角度之差",
    "AnglesToVector": "",
    "AppendToLogFile": "在服务器日志文件上增加一个string",
    "ApplyDamage": "对单位造成伤害，Table输入：victim,attacker,damage,damage_type,damage_flags?,ability?",
    "AxisAngleToQuaternion": "构造一个四元数，表现出围绕给定的vector轴线的旋转角",
    "CalcClosestPointOnEntityOBB": "计算实体的OBB上最接近的两个点。",
    "CalcDistanceBetweenEntityOBB": "计算两个实体的OBB间距离。如果返回值为负，代表输入值有错误。返回值为0则代表OBB互相重叠。",
    "CalcDistanceToLineSegment2D": "",
    "CancelEntityIOEvents": "为特定的实体创建所有输入/输出事件",
    "CenterCameraOnUnit": "",
    "ClearTeamCustomHealthbarColor": "清除自定义血条颜色。",
    "CreateDamageInfo": "",
    "CreateEffect": "传递table-输入：实体，效果",
    "CreateHTTPRequest": "生成一个HTTP请求。",
    "CreateHTTPRequestScriptVM": "",
    "CreateHeroForPlayer": "用DOTA英雄的dota_npc_units.txt中的名字创建它并把它设为给定玩家的控制英雄",
    "CreateIllusions": "",
    "CreateItem": "用类名称item_name创建一个owner可以使用的物品",
    "CreateItemOnPositionForLaunch": "在给定地点生成一个实际物品。目标地点可以是空中(但这不会清空这个位置)",
    "CreateItemOnPositionSync": "在给定位置创建一个可见的物品",
    "CreateModifierThinker": "生成一个不和任何NPC相关联的Modifier。(hCaster,hAbility,modifierName,paramTable,vOrigin,nTeamNumber,bPhantomBlocker)",
    "CreateRune": "",
    "CreateSceneEntity": "",
    "CreateTempTree": "生成一颗临时存在的树。(vLocation,flDuration).",
    "CreateTempTreeWithModel": "",
    "CreateTrigger": "CreateTrigger(vecMin,vecMax) :创建并返回一个AABB触发器",
    "CreateTriggerRadiusApproximate": "CreateTriggerRadiusApproximate(vecOrigin,flRadius) :创建并返回一个比给定radius大的AABB触发器",
    "CreateUniformRandomStream": "",
    "CreateUnitByName": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber)",
    "CreateUnitByNameAsync": "用DOTA单位的dota_npc_units.txt中的名字创建它(szUnitName,vLocation,bFindClearSpace,hNPCOwner,hUnitOwner,iTeamNumber,hCallback)",
    "CreateUnitFromTable": "",
    "CrossVectors": "",
    "DOTA_SpawnMapAtPosition": "",
    "DebugBreak": "在debugger（调试模式）中停止运行",
    "DebugCreateUnit": "",
    "DebugDrawBox": "显示一个debugoverlay窗口(origin,mins,maxs,r,g,b,a,duration)",
    "DebugDrawBoxDirection": "显示一个debugforward窗口(cent,min,max,forward,vRgb,a,duration)",
    "DebugDrawCircle": "显示一个debug圆(center,vRgb,a,rad,ztest,duration)",
    "DebugDrawClear": "尝试清理所有debugoverlay信息",
    "DebugDrawLine": "显示一个debugoverlay线段origin,target,r,g,b,ztest,duration)",
    "DebugDrawLine_vCol": "使用vec颜色显示一个debug线段(start,end,vRgb,a,ztest,duration)",
    "DebugDrawScreenTextLine": "显示给定行间距（lineoffset）的文字(x,y,lineOffset,text,r,g,b,a,duration)",
    "DebugDrawSphere": "显示一个debug球(center,vRgb,a,rad,ztest,duration)",
    "DebugDrawText": "显示3d文字(origin,text,bViewCheck,duration)",
    "DebugScreenTextPretty": "显示漂亮的debug文字(x,y,lineOffset,text,r,g,b,a,duration,font,size,bBold)",
    "DestroyDamageInfo": "",
    "DoCleaveAttack": "",
    "DoEntFire": "构造一个实体的输入/输出事件(szTarget,szAction,szValue,flDelay,hActivator,hCaller)",
    "DoEntFireByInstanceHandle": "EntFireByHandle:构造一个实体的输入/输出事件",
    "DoIncludeScript": "运行一个内部脚本",
    "DoScriptAssert": "ScriptAssert:断言传入数据是数值，输出信息并显示断言对话框（参考编程中的Assert功能，主要用于调试，译者注）",
    "DoUniqueString": "UniqueString:使用任意的根字符串构造一个保证在VM脚本运行周期内唯一的字符串。当给表增加数据但不确定已用关键字时有用",
    "DotProduct": "",
    "DropNeutralItemAtPositionForHero": "",
    "EmitAnnouncerSound": "对所有玩家播放播音员的声音。",
    "EmitAnnouncerSoundForPlayer": "对一位玩家播放播音员的音效。",
    "EmitAnnouncerSoundForTeam": "对一方队伍成员播放播音员的音效。",
    "EmitAnnouncerSoundForTeamOnLocation": "对在某个特定地点队伍成员播放播音员的音效",
    "EmitGlobalSound": "为所有玩家播放给定名称的音效",
    "EmitSoundOn": "在一个实体上播放给定名称的音效",
    "EmitSoundOnClient": "为指定玩家播放给定名称的音效",
    "EmitSoundOnEntityForPlayer": "",
    "EmitSoundOnLocationForAllies": "从处在某个地点的某个单位处播放音效，仅对这个单位的友军有效。(vLocation,soundName,hCaster)",
    "EmitSoundOnLocationForPlayer": "",
    "EmitSoundOnLocationWithCaster": "从处在某个地点的某个单位处播放音效。(vLocation,soundName,hCaster).",
    "EntIndexToHScript": "把一个实体的整数索引转化为表达该实体脚本实例的HScript",
    "ExecuteOrderFromTable": "从一个Script表发布命令",
    "ExponentialDecay": "滑的曲线，接近0时减少较慢",
    "FindClearRandomPositionAroundUnit": "",
    "FindClearSpaceForUnit": "在未被占用的地方创建单位",
    "FindSpawnEntityForTeam": "",
    "FindUnitsInLine": "在给定的一条线上用给定flags搜索单位(iTeamNumber,vStartPos,vEndPos,hCacheUnit,flWidth,iTeamFilter,iTypeFilter,iFlagFilter)",
    "FindUnitsInRadius": "在给定范围内用给定flags搜索单位(iTeamNumber,vPosition,hCacheUnit,flRadius,iTeamFilter,iTypeFilter,iFlagFilter,iOrder,bCanGrowCache)",
    "FireEntityIOInputNameOnly": "触发实体的动作输入w/no数据",
    "FireEntityIOInputString": "用给定字符串（由你分配内存）触发实体的动作输入",
    "FireEntityIOInputVec": "用给定的Vector(hEntity,szActionName,vector)触发实体的动作输入",
    "FireGameEvent": "触发一个预定义事件，可以在custom_events.txt或dota的资源/.res中找到",
    "FireGameEventLocal": "触发一个游戏事件但不广播给客户端",
    "FrameTime": "获取上一帧在服务器上花费的时间",
    "GetAbilityTextureNameForAbility": "",
    "GetActiveSpawnGroupHandle": "",
    "GetDedicatedServerKey": "",
    "GetDedicatedServerKeyV2": "",
    "GetEntityIndexForTreeId": "对于指定为DOTA_UNIT_ORDER_CAST_TARGET_TREE下的entindex_target类型的树，这个方法用来获取其实体索引。",
    "GetFrameCount": "返回引擎当然的帧数",
    "GetGroundHeight": "",
    "GetGroundPosition": "返回移动到地面的供给位置。第二个参数是一个NPC，用于测量碰撞体积",
    "GetItemCost": "通过名称获取一个物品的价格。",
    "GetItemDefOwnedCount": "",
    "GetItemDefQuantity": "",
    "GetListenServerHost": "在广播服务器获取本地玩家",
    "GetLobbyEventGameDetails": "",
    "GetMapName": "获取地图的名字",
    "GetMaxOutputDelay": "获取输出事件的最大延迟",
    "GetPhysAngularVelocity": "获取VPHYS或普通物体的角速度",
    "GetPhysVelocity": "获取VPHYS或普通物体的速度",
    "GetPotentialNeutralItemDrop": "",
    "GetSystemDate": "获取真实世界的日期",
    "GetSystemTime": "获取真实世界的时间",
    "GetSystemTimeMS": "",
    "GetTargetAOELocation": "",
    "GetTargetLinearLocation": "",
    "GetTeamHeroKills": "",
    "GetTeamName": "",
    "GetTreeIdForEntityIndex": "获取已给定实体索引的树的ID",
    "GetWorldMaxX": "获取地图X坐标最大值",
    "GetWorldMaxY": "获取地图Y坐标最大值",
    "GetWorldMinX": "获取地图X坐标最小值",
    "GetWorldMinY": "获取地图Y坐标最小值",
    "GetXPNeededToReachNextLevel": "",
    "InitLogFile": "如果给定文件不存在，用给定内容创建它；如果存在则不做任何动作",
    "IsClient": "",
    "IsDedicatedServer": "如果服务器开放返回true",
    "IsInToolsMode": "当此Lua脚本在Dota2创意工坊工具模式下运行时返回true。",
    "IsLocationVisible": "",
    "IsMangoTree": "",
    "IsMarkedForDeletion": "如果实体有效并被标记为删除返回true",
    "IsServer": "当Lua代码是从Server.dll中被运行的时候，返回True。",
    "IsUnitInValidPosition": "",
    "IsValidEntity": "检查给定hScript是否为有效实体",
    "LerpVectors": "",
    "LimitPathingSearchDepth": "设置寻路系统的搜索范围（应该是对于深度）",
    "LinkLuaModifier": "将一个Lua定义的Modifier和与其相关的类联系起来。如果这个Modifier的定义在Vscript根目录下，那么第二个argument(file_path)可能会被忽略。",
    "ListenToGameEvent": "从脚本给游戏事件注册一个listner，Tip:另外，为listenstandardengineevents,你也可以创建自己的事件，把它们放置在/scripts/custom_events.txt.",
    "LoadKeyValues": "用给定的关键字文件创建table",
    "LoadKeyValuesFromString": "用给定的关键字string创建table",
    "LocalTime": "",
    "MakeStringToken": "检查给定的hScript是否是有效实体（？）",
    "ManuallyTriggerSpawnGroupCompletion": "",
    "MinimapEvent": "设置一个小地图事件。(nTeamID,hEntity,nXCoord,nYCoord,nEventType,nEventDuration).",
    "Msg": "输出信息",
    "PauseGame": "暂停/开始游戏",
    "PlayerInstanceFromIndex": "通过索引获取玩家的脚本实例",
    "PrecacheEntityFromTable": "用关键字从table中预缓存一个实体",
    "PrecacheEntityListFromTable": "预缓存一个实体关键字列表",
    "PrecacheItemByNameAsync": "用DOTA物品的dota_npc_items.txt名称异步预缓存它,结束时提供回调",
    "PrecacheItemByNameSync": "用DOTA物品的dota_npc_items.txt名称预缓存它",
    "PrecacheModel": "手动预缓存一个单一模型",
    "PrecacheResource": "手动预缓存一个单一资源",
    "PrecacheUnitByNameAsync": "用DOTA单位的dota_npc_units.txt名称异步预缓存它,结束时提供回调",
    "PrecacheUnitByNameSync": "用DOTA单位的dota_npc_units.txt名称预缓存它",
    "PrecacheUnitFromTableAsync": "",
    "PrecacheUnitFromTableSync": "",
    "PrintLinkedConsoleMessage": "",
    "RandomFloat": "获取范围内随机float",
    "RandomInt": "获取范围内随机int",
    "RandomVector": "获取随机二维矢量",
    "RegisterCustomAnimationScriptForModel": "",
    "RegisterSpawnGroupFilterProxy": "为一个脚本基础的生成单位过滤器创建一个C代理",
    "ReloadMOTD": "重载MotD文件",
    "RemoveFOWViewer": "移除特定团队的临时视野 ( nTeamID, nViewerID )",
    "RemoveSpawnGroupFilterProxy": "为一个脚本基础的生成单位过滤器删除一个C代理",
    "ResolveNPCPositions": "CheckandfixunitsthathavebeenassignedapositioninsidecollisionradiusofotherNPCs.检查并固定一个被分配到其他NPC的碰撞半径内的某位置的单位。",
    "RollPercentage": "随机生成1-100内的数，小于等于给定数则返回true",
    "RollPseudoRandomPercentage": "",
    "RotateOrientation": "旋转一个QAngle，用另一个QAngle",
    "RotatePosition": "",
    "RotateQuaternionByAxisAngle": "围绕给定vector轴线旋转一个四元数",
    "RotationDelta": "两个QAngle间的delta值",
    "RotationDeltaAsAngularVelocity": "",
    "Say": "让实体说string,是否仅限队友可见",
    "ScreenShake": "用下列参数开始镜头摇晃：vecCenter,flAmplitude,flFrequency,flDuration,flRadius,eCommand(SHAKE_START=0,SHAKE_STOP=1),bAirShake",
    "SendOverheadEventMessage": "(DOTAPlayersendToPlayer,intiMessageType,EntitytargetEntity,intiValue,DOTAPlayersourcePlayer)-sendToPlayer和sourcePlayer允许为nil。-iMessageType是OVERHEAD_ALERT_分类中的一个。",
    "SendToConsole": "给控制台发送string作为客户端命令",
    "SendToServerConsole": "给控制台发送string作为服务器命令",
    "SetOpvarFloatAll": "为所有玩家设置opvar值",
    "SetOpvarFloatPlayer": "为单一玩家设置opvar值(szStackName,szOperatorName,szOpvarName,flOpvarValue,hEnt)",
    "SetPhysAngularVelocity": "",
    "SetQuestName": "设置当前任务名",
    "SetQuestPhase": "设置当前任务阶段",
    "SetRenderingEnabled": "为ehandle设置rendering（渲染）开/关",
    "SetTeamCustomHealthbarColor": "",
    "ShowCustomHeaderMessage": "",
    "ShowGenericPopup": "对所有玩家显示通用的弹出窗口",
    "ShowGenericPopupToPlayer": "对给定玩家显示通用的弹出窗口",
    "ShowMessage": "在所有客户端显示hud信息",
    "SpawnDOTAShopTriggerRadiusApproximate": "",
    "SpawnEntityFromTableAsynchronous": "",
    "SpawnEntityFromTableSynchronous": "从table同步生成一个实体",
    "SpawnEntityGroupFromTable": "从一系列生成表中分级生成一个实体组",
    "SpawnEntityListFromTableAsynchronous": "从一个生成表列表异步生成一个实体组，生成完成后会触发一次回调",
    "SpawnEntityListFromTableSynchronous": "从一个生成表列表同步生成一个实体组.",
    "SplineQuaternions": "(quaternion,quaternion,float)非常基础的v0到v1差值，t属于[0,1]为参数",
    "SplineVectors": "(vector,vector,float)非常基础的v0到v1差值，t属于[0,1]为参数",
    "StartSoundEvent": "开始音效事件",
    "StartSoundEventFromPosition": "在某个位置开始音效事件。",
    "StartSoundEventFromPositionReliable": "通过可靠的传递，在某个位置开始音效事件。",
    "StartSoundEventFromPositionUnreliable": "通过随意的传递，在某个位置开始音效事件。",
    "StartSoundEventReliable": "通过可靠的传递，开始音效事件。",
    "StartSoundEventUnreliable": "通过随意的传递，开始音效事件。",
    "StopEffect": "",
    "StopGlobalSound": "",
    "StopListeningToAllGameEvents": "停止listen在给定内容内的所有游戏事件",
    "StopListeningToGameEvent": "停止listen特定的游戏事件",
    "StopSoundEvent": "停止音效事件",
    "StopSoundOn": "停止实体上的命名音效",
    "Time": "获取当前服务器时间",
    "TraceCollideable": "传递table-输入:start,end,ent,(可选mins,maxs)--输出:pos,fraction,hit,startsolid,normal",
    "TraceHull": "传递table-输入:start,end,min,max,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
    "TraceLine": "传递table-输入:startpos,endpos,mask,ignore--输出:pos,fraction,hit,enthit,startsolid",
    "UTIL_AngleDiff": "",
    "UTIL_MessageText": "对特定的玩家显示信息。",
    "UTIL_MessageTextAll": "在文本框内对所有玩家显示信息。",
    "UTIL_MessageTextAll_WithContext": "",
    "UTIL_MessageText_WithContext": "",
    "UTIL_Remove": "删除给定实体",
    "UTIL_RemoveImmediate": "立即删除给定实体",
    "UTIL_ResetMessageText": "对某个玩家重新设置信息文本。",
    "UTIL_ResetMessageTextAll": "对所有玩家重新设置信息文本。",
    "UnitFilter": "当一个单位通过一系列过滤器时进行检查。(hNPC,nTargetTeam,nTargetType,nTargetFlags,nTeam",
    "UnloadSpawnGroup": "通过名称去除生成组",
    "UnloadSpawnGroupByHandle": "通过handle去除生成组",
    "UpdateEventPoints": "",
    "VectorAngles": "",
    "VectorToAngles": "为Vector获取Qangle（没有滚动）",
    "Warning": "输出警告",
    "cvar_getf": "获取给定cvar的值，返回float.",
    "cvar_setf": "设置给定cvar的值,传递float.",
    "rr_AddDecisionRule": "给决定数据库增加一个规则",
    "rr_CommitAIResponse": "把QueryBestResponse的结果交付给定的实体播放，用参数调用(entity,airesponse)",
    "rr_GetResponseTargets": "获取所有提供的表达者目标的table，格式为{name :handle,name:handle}.",
    "rr_QueryBestResponse": "参数:(hEnt,hQuery,hResult)//静态 :对实体的回复系统测试'query'并返回最佳回复(无回复返回nil)"
  },
  "HTTPRequest": {
    "__self": "HTTP请求",
    "__extends": "",
    "__globalAccessorVariable": "",
    "Send": "",
    "SetHTTPRequestAbsoluteTimeoutMS": "",
    "SetHTTPRequestGetOrPostParameter": "",
    "SetHTTPRequestHeaderValue": "",
    "SetHTTPRequestNetworkActivityTimeout": "",
    "SetHTTPRequestRawPostBody": ""
  },
  "CEntityInstance": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "ConnectOutput": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
    "Destroy": "",
    "DisconnectOutput": "从这个实体的I/O事件移除已连接的脚本方法",
    "DisconnectRedirectedOutput": "从传入实体的I/O事件移除已连接的脚本方法",
    "FireOutput": "触发实体的输出",
    "GetClassname": "",
    "GetDebugName": "如果没有定义的话获得实体名字的帮助",
    "GetEntityHandle": "获得这个实体的EHANDLE",
    "GetEntityIndex": "",
    "GetIntAttr": "获得整型属性",
    "GetName": "",
    "GetOrCreatePrivateScriptScope": "恢复实体相关的每个实例私有的脚本数据,必要时会创建",
    "GetOrCreatePublicScriptScope": "恢复实体相关的公用脚本数据,必要时会创建",
    "GetPrivateScriptScope": "恢复实体相关的每个实例私有的脚本数据",
    "GetPublicScriptScope": "恢复实体相关的公用脚本数据",
    "RedirectOutput": "添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法",
    "RemoveSelf": "删除这个实体",
    "SetIntAttr": "设置整型属性",
    "entindex": ""
  },
  "CDOTA_Item": {
    "__self": "物品基类",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "CanBeUsedOutOfInventory": "",
    "GetContainer": "获得物品所有者",
    "GetCost": "",
    "GetCurrentCharges": "获得物品的目前充能",
    "GetInitialCharges": "获得物品的初始充能",
    "GetItemSlot": "",
    "GetItemState": "",
    "GetParent": "",
    "GetPurchaseTime": "获得物品的购买时间",
    "GetPurchaser": "获得物品的购买者",
    "GetSecondaryCharges": "",
    "GetShareability": "",
    "IsAlertableItem": "",
    "IsCastOnPickup": "判断物品是否可以被捡起。",
    "IsCombinable": "判断物品是否可以合成。",
    "IsDisassemblable": "判断物品是否可以被拆分。",
    "IsDroppable": "判断物品是否可以被丢弃。",
    "IsInBackpack": "",
    "IsItem": "",
    "IsKillable": "判断是否可以被击杀。",
    "IsMuted": "判断是否可以被禁用（？）",
    "IsNeutralDrop": "",
    "IsPermanent": "判断物品是否是永久性的",
    "IsPurchasable": "判断物品是否可以被购买。",
    "IsRecipe": "判断物品是否是卷轴。",
    "IsRecipeGenerated": "判断物品是否是由卷轴合成的。",
    "IsSellable": "判断物品是否可以被出售。",
    "IsStackable": "判断物品是否可以叠加。",
    "LaunchLoot": "当物品掉落在地面时，将物品发射出去，使其落在某个地点。",
    "LaunchLootInitialHeight": "设置发射物品时的初始高度。",
    "LaunchLootRequiredHeight": "",
    "OnEquip": "",
    "OnUnequip": "",
    "RequiresCharges": "判断物品是否需要充能。",
    "SetCanBeUsedOutOfInventory": "",
    "SetCastOnPickup": "",
    "SetCurrentCharges": "设置物品的充能数",
    "SetDroppable": "",
    "SetItemState": "",
    "SetOnlyPlayerHeroPickup": "",
    "SetPurchaseTime": "设置物品的购买时间",
    "SetPurchaser": "设置物品的购买者",
    "SetSecondaryCharges": "",
    "SetSellable": "",
    "SetShareability": "",
    "SetStacksWithOtherOwners": "",
    "SpendCharge": "",
    "StacksWithOtherOwners": "",
    "Think": "判断此物品"
  },
  "CDOTABaseAbility": {
    "__self": "技能/物品的基类",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "CanAbilityBeUpgraded": "",
    "CastAbility": "",
    "ContinueCasting": "",
    "CreateVisibilityNode": "",
    "DecrementModifierRefCount": "",
    "EndChannel": "参数:boolbInterrupted",
    "EndCooldown": "刷新这个技能",
    "GetAOERadius": "",
    "GetAbilityDamage": "得到技能伤害",
    "GetAbilityDamageType": "得到技能伤害类型",
    "GetAbilityIndex": "",
    "GetAbilityKeyValues": "",
    "GetAbilityName": "",
    "GetAbilityTargetFlags": "",
    "GetAbilityTargetTeam": "",
    "GetAbilityTargetType": "",
    "GetAbilityType": "",
    "GetAnimationIgnoresModelScale": "",
    "GetAssociatedPrimaryAbilities": "",
    "GetAssociatedSecondaryAbilities": "",
    "GetAutoCastState": "",
    "GetBackswingTime": "",
    "GetBehavior": "",
    "GetBehaviorInt": "",
    "GetCastPoint": "",
    "GetCastRange": "",
    "GetCaster": "",
    "GetChannelStartTime": "",
    "GetChannelTime": "",
    "GetChannelledManaCostPerSecond": "",
    "GetCloneSource": "",
    "GetConceptRecipientType": "",
    "GetCooldown": "获得技能在给出的等级设定上的冷却时间,而不是目前的剩余的冷却时间",
    "GetCooldownTime": "",
    "GetCooldownTimeRemaining": "",
    "GetCurrentAbilityCharges": "",
    "GetCursorPosition": "",
    "GetCursorTarget": "",
    "GetCursorTargetingNothing": "",
    "GetDuration": "",
    "GetEffectiveCooldown": "",
    "GetGoldCost": "",
    "GetGoldCostForUpgrade": "",
    "GetHeroLevelRequiredToUpgrade": "",
    "GetIntrinsicModifierName": "",
    "GetLevel": "获得技能目前的等级",
    "GetLevelSpecialValueFor": "",
    "GetLevelSpecialValueNoOverride": "",
    "GetManaCost": "",
    "GetMaxLevel": "",
    "GetModifierValue": "",
    "GetModifierValueBonus": "",
    "GetPlaybackRateOverride": "",
    "GetSharedCooldownName": "",
    "GetSpecialValueFor": "",
    "GetStolenActivityModifier": "",
    "GetToggleState": "",
    "GetUpgradeRecommended": "",
    "HeroXPChange": "",
    "IncrementModifierRefCount": "",
    "IsActivated": "",
    "IsAttributeBonus": "",
    "IsChanneling": "返回目前技能是否在施法状态",
    "IsCooldownReady": "",
    "IsCosmetic": "",
    "IsFullyCastable": "返回技能能否被释放",
    "IsHidden": "",
    "IsHiddenAsSecondaryAbility": "",
    "IsHiddenWhenStolen": "",
    "IsInAbilityPhase": "返回技能目前是否在被释放",
    "IsItem": "",
    "IsOwnersGoldEnough": "",
    "IsOwnersGoldEnoughForUpgrade": "",
    "IsOwnersManaEnough": "",
    "IsPassive": "",
    "IsRefreshable": "",
    "IsSharedWithTeammates": "",
    "IsStealable": "",
    "IsStolen": "",
    "IsToggle": "",
    "IsTrained": "",
    "MarkAbilityButtonDirty": "标记这个技能图标表示需要刷新",
    "NumModifiersUsingAbility": "",
    "OnAbilityPhaseInterrupted": "",
    "OnAbilityPhaseStart": "",
    "OnAbilityPinged": "",
    "OnChannelFinish": "",
    "OnChannelThink": "",
    "OnHeroCalculateStatBonus": "",
    "OnHeroLevelUp": "",
    "OnOwnerDied": "",
    "OnOwnerSpawned": "",
    "OnSpellStart": "",
    "OnToggle": "",
    "OnUpgrade": "",
    "PayGoldCost": "",
    "PayGoldCostForUpgrade": "",
    "PayManaCost": "",
    "PlaysDefaultAnimWhenStolen": "",
    "ProcsMagicStick": "",
    "RefCountsModifiers": "",
    "RefreshCharges": "",
    "RefreshIntrinsicModifier": "",
    "RefundManaCost": "",
    "ResetToggleOnRespawn": "",
    "SetAbilityIndex": "",
    "SetActivated": "",
    "SetChanneling": "",
    "SetCurrentAbilityCharges": "",
    "SetFrozenCooldown": "",
    "SetHidden": "",
    "SetInAbilityPhase": "",
    "SetLevel": "设置这个技能的等级",
    "SetOverrideCastPoint": "",
    "SetRefCountsModifiers": "",
    "SetStealable": "",
    "SetStolen": "",
    "SetUpgradeRecommended": "",
    "ShouldUseResources": "",
    "SpeakAbilityConcept": "",
    "SpeakTrigger": "",
    "StartCooldown": "参数:fl冷却时间?",
    "ToggleAbility": "",
    "ToggleAutoCast": "",
    "UpgradeAbility": "",
    "UseResources": ""
  },
  "CBaseModelEntity": {
    "__self": "游戏模式的实体",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "GetAttachmentAngles": "",
    "GetAttachmentForward": "",
    "GetAttachmentOrigin": "",
    "GetMaterialGroupHash": "",
    "GetMaterialGroupMask": "",
    "GetModelScale": "",
    "GetRenderAlpha": "",
    "GetRenderColor": "",
    "ScriptLookupAttachment": "",
    "SetBodygroup": "",
    "SetBodygroupByName": "",
    "SetLightGroup": "SetLightGroup(string):设置实体所属的光照组。",
    "SetMaterialGroup": "",
    "SetMaterialGroupHash": "",
    "SetMaterialGroupMask": "",
    "SetModel": "设置模型",
    "SetModelScale": "",
    "SetRenderAlpha": "",
    "SetRenderColor": "SetRenderColor(r,g,b):设置实体的渲染颜色。",
    "SetRenderMode": "SetRenderMode(int):设置实体的渲染模式。",
    "SetSingleMeshGroup": "",
    "SetSize": "设置尺寸。",
    "SetSkin": ""
  },
  "CInfoPlayerStartDota": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "IsEnabled": "",
    "SetEnabled": ""
  },
  "CScriptPrecacheContext": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddResource": "预缓存指定资源",
    "GetValue": "读取一个键值（spawnkey）"
  },
  "CDOTA_ShopTrigger": {
    "__self": "商店的触发器",
    "__extends": "CBaseTrigger",
    "__globalAccessorVariable": "",
    "GetShopType": "",
    "SetShopType": ""
  },
  "CPointWorldText": {
    "__self": "",
    "__extends": "CBaseModelEntity",
    "__globalAccessorVariable": "",
    "SetMessage": ""
  },
  "CEnvEntityMaker": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "SpawnEntity": "在生成器的位置创建一个实体",
    "SpawnEntityAtEntityOrigin": "在指定实体的位置立刻创建一个实体",
    "SpawnEntityAtLocation": "在指定位置和方向创建一个实体，方向是角度制欧拉角(pitch,yaw,roll)",
    "SpawnEntityAtNamedEntityOrigin": "在指定名字实体的位置创建一个实体"
  },
  "CDOTA_BaseNPC_Creature": {
    "__self": "创建类角色基类",
    "__extends": "CDOTA_BaseNPC",
    "__globalAccessorVariable": "",
    "AddItemDrop": "为该生物添加特别的道具掉落",
    "CreatureLevelUp": "升级目标生物指定级别",
    "GetDisableResistance": "",
    "GetUltimateDisableResistance": "",
    "IsChampion": "是否为冠军生物",
    "IsReincarnating": "是否处于重生中",
    "RemoveAllItemDrops": "",
    "SetArmorGain": "设置该生物每级增加的护甲",
    "SetAttackTimeGain": "设置该生物每级增加的攻击速度",
    "SetBountyGain": "设置该生物每级增加的奖励金币",
    "SetChampion": "将该生物标记为冠军生物",
    "SetDamageGain": "设置该生物每级增加的攻击伤害",
    "SetDisableResistance": "",
    "SetDisableResistanceGain": "设置该生物每级增加的控制抗性",
    "SetHPGain": "设置该生物每级增加的生命值",
    "SetHPRegenGain": "设置该生物每级增加的生命回复",
    "SetMagicResistanceGain": "设置该生物每级增加的魔法抗性",
    "SetManaGain": "设置该生物每级增加的魔法值",
    "SetManaRegenGain": "设置该生物每级增加的魔法回复",
    "SetMoveSpeedGain": "设置该生物每级增加的移动速度",
    "SetRequiresReachingEndPath": "",
    "SetUltimateDisableResistance": "",
    "SetXPGain": "设置该生物每级增加的经验值"
  },
  "CDOTA_Ability_DataDriven": {
    "__self": "数据驱动类技能",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "ApplyDataDrivenModifier": "获取单位的攻击力。",
    "ApplyDataDrivenThinker": "在指定地点应用一个数据驱动thinker。"
  },
  "CDOTA_Unit_Nian": {
    "__self": "",
    "__extends": "CDOTA_BaseNPC_Creature",
    "__globalAccessorVariable": "",
    "GetHorn": "获取年兽角",
    "GetTail": "获取年兽尾巴",
    "IsHornAlive": "年兽的角巴是否损坏?",
    "IsTailAlive": "年兽的尾巴是否损坏?"
  },
  "CTakeDamageInfo": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddDamage": "增加伤害",
    "AddDamageType": "增加伤害类型",
    "AllowFriendlyFire": "",
    "CanBeBlocked": "",
    "GetAmmoType": "",
    "GetAttacker": "获得攻击者",
    "GetDamage": "得到伤害",
    "GetDamageCustom": "得到自定义伤害",
    "GetDamageForce": "得到伤害力量",
    "GetDamagePosition": "得到伤害位置",
    "GetDamageTaken": "取走伤害",
    "GetDamageType": "得到伤害类型",
    "GetInflictor": "",
    "GetMaxDamage": "得到最大伤害",
    "GetOriginalDamage": "获得原始伤害",
    "GetRadius": "",
    "GetReportedPosition": "",
    "GetStabilityDamage": "得到稳定的伤害",
    "HasDamageType": "伤害类型",
    "ScaleDamage": "伤害范围",
    "SetAllowFriendlyFire": "设置允许友军开火",
    "SetAmmoType": "",
    "SetAttacker": "",
    "SetCanBeBlocked": "",
    "SetDamage": "",
    "SetDamageCustom": "设置伤害习惯",
    "SetDamageForce": "让伤害开始",
    "SetDamagePosition": "设置损伤点",
    "SetDamageTaken": "拿出伤害设置",
    "SetDamageType": "设置伤害类型",
    "SetMaxDamage": "设置最高伤害",
    "SetOriginalDamage": "设置基础伤害",
    "SetRadius": "",
    "SetReportedPosition": "",
    "SetStabilityDamage": "设置稳定的伤害"
  },
  "CDOTA_CustomUIManager": {
    "__self": "自定义UI管理器",
    "__extends": "CustomUI",
    "__globalAccessorVariable": "",
    "DynamicHud_Create": "为某玩家建立一个新的自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID/*shouldbeunique*/,stringLayoutFileName,tableDialogVariables/*canbenil*/)",
    "DynamicHud_Destroy": "删除一个自定义用户界面元素。(intPlayerID/*-1meanseveryone*/,stringElementID)",
    "DynamicHud_SetDialogVariables": "为已有的用户界面元素添加/修改一个会话变量。(intPlayerID/*-1meanseveryone*/,stringElementID,tableDialogVariables)",
    "DynamicHud_SetVisible": "切换已有的用户见面元素的可见性。(intPlayerID/*-1meanseveryone*/,stringElementID,boolVisible)"
  },
  "CDOTAGameManager": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "GetHeroDataByName_Script": "",
    "GetHeroIDByName": "",
    "GetHeroNameByID": "",
    "GetHeroNameForUnitName": "",
    "GetHeroUnitNameByID": ""
  },
  "CDOTA_MapTree": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "CutDown": "砍掉这棵树",
    "CutDownRegrowAfter": "砍掉这棵树，一段时间后再生",
    "GrowBack": "再生一棵被砍掉的树",
    "IsStanding": "如果树站立着返回true,如果被砍掉返回false"
  },
  "CEnvProjectedTexture": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "SetFarRange": "设置光照最大距离",
    "SetLinearAttenuation": "设置光照线性淡化值",
    "SetNearRange": "设置光照最小距离",
    "SetQuadraticAttenuation": "设置光照二次项淡化值",
    "SetVolumetrics": "开关体积光参数:boolbOn,floatflIntensity,floatflNoise,intnPlanes,floatflPlaneOffset"
  },
  "Vector": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "Cross": "矢量叉积",
    "Dot": "矢量点积",
    "Length": "矢量长度（模）",
    "Length2D": "矢量XY平面上长度（模）",
    "Normalized": "返回单位矢量",
    "__add": "重载+.矢量加运算",
    "__div": "重载/.矢量除运算",
    "__eq": "重载==.矢量比较运算",
    "__len": "重载#返回矢量长度",
    "__mul": "重载*返回矢量乘运算",
    "__sub": "重载-.矢量减运算",
    "__tostring": "重载..转换矢量为字符串",
    "__unm": "重载-operator"
  },
  "CDOTA_Ability_Animation_TailSpin": {
    "__self": "",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "SetPlaybackRate": ""
  },
  "CDOTA_Item_DataDriven": {
    "__self": "数据驱动类物品基类",
    "__extends": "CDOTA_Item",
    "__globalAccessorVariable": "",
    "ApplyDataDrivenModifier": "应用一个数据驱动的Mordifier。",
    "ApplyDataDrivenThinker": "应用一个数据驱动的计时器到指定地点。"
  },
  "CDOTA_Modifier_Lua_Motion_Both": {
    "__self": "修改器的混合运动控制器",
    "__extends": "CDOTA_Modifier_Lua",
    "__globalAccessorVariable": "",
    "ApplyHorizontalMotionController": "启动水平运动控制器的特效。启动成功后返回True。",
    "ApplyVerticalMotionController": "启动垂直运动控制器的特效。启动成功后返回True。",
    "GetPriority": "获取优先级。",
    "OnHorizontalMotionInterrupted": "当水平运动被打断时进行回调。",
    "OnVerticalMotionInterrupted": "当竖直运动被打断时进行回调。",
    "SetPriority": "设置优先级。",
    "UpdateHorizontalMotion": "根据给定的间隔对NPC施加水平运动。",
    "UpdateVerticalMotion": "根据给定的间隔对NPC施加竖直运动。"
  },
  "CDOTA_ItemSpawner": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "GetItemName": ""
  },
  "CDOTA_SimpleObstruction": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "IsEnabled": "",
    "SetEnabled": ""
  },
  "CDOTA_Unit_Diretide_Portal": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "GetPartnerPortal": "",
    "ResetPortal": "",
    "SetInvasionRuneType": "",
    "SetPartnerPortal": "",
    "SetPortalActive": ""
  },
  "CLogicRelay": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "Trigger": ""
  },
  "CDebugOverlayScriptHelper": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "Axis": "绘制一个轴线。在世界空间中指定出发点和方向",
    "Box": "绘制一个世界空间轴向盒。在世界空间中指定边界",
    "BoxAngles": "在出发点绘制一个定向盒。在世界空间中指定边界",
    "Capsule": "绘制一个胶囊体。在世界空间中指定基部",
    "Circle": "绘制一个圆。在世界空间中指定中心",
    "CircleScreenOriented": "绘制一个指向屏幕的圆。在世界空间中指定中心",
    "Cone": "绘制一个线框锥形。在世界空间中指定结束点和方向",
    "Cross": "绘制一个对齐屏幕的十字。在世界空间中指定出发点",
    "Cross3D": "绘制一个对齐世界的十字。在世界空间中指定出发点",
    "Cross3DOriented": "绘制一个指向的十字。在世界空间中指定出发点",
    "DrawTickMarkedLine": "绘制一个短划线。在世界空间中指定结束点",
    "EntityAttachments": "绘制实体附件",
    "EntityAxis": "绘制实体源坐标轴",
    "EntityBounds": "绘制实体边界",
    "EntitySkeleton": "绘制实体骨架",
    "EntityText": "在实体上绘制文本",
    "FilledRect2D": "绘制一个2D矩形填充的屏幕空间。按照像素对齐",
    "HorzArrow": "绘制一个水平箭头。在世界空间中指定结束点",
    "Line": "绘制一个两点间连线",
    "Line2D": "绘制一个屏幕空间中亮点间连线",
    "PopDebugOverlayScope": "弹出蒙版分组用的标记，被标记的蒙版可被成批删除",
    "PushAndClearDebugOverlayScope": "推入一个蒙版分组用的标记。删除所有使用该蒙版ID的蒙版",
    "PushDebugOverlayScope": "推入一个蒙版分组用的标记。被标记的蒙版可被成批删除",
    "RemoveAllInScope": "移除指定标记的全部蒙版，无视其生命周期",
    "SolidCone": "绘制一个固体锥。在世界空间中指定出发点和方向",
    "Sphere": "绘制一个线框球体。在世界空间中指定中心",
    "SweptBox": "绘制一个扫描盒。在世界空间中指定结束点并在本地空间中指定边界",
    "Text": "绘制2D文本。在世界空间中指定出发点",
    "Texture": "绘制一个屏幕空间纹理。按照像素对齐",
    "Triangle": "绘制一个填充三角形。在世界空间中指定顶部",
    "UnitTestCycleOverlayRenderType": "转换蒙版混合类型,用于单位测试",
    "VectorText3D": "绘制3D文本。在世界空间中指定出发点和方向",
    "VertArrow": "绘制一个垂直箭头。在世界空间中指定结束点",
    "YawArrow": "绘制一个指定偏航角的箭头。在世界空间中指定结束点"
  },
  "CDOTA_Ability_Aghanim_Spear": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "LaunchSpear": ""
  },
  "CDOTA_Unit_Courier": {
    "__self": "信使类角色基类",
    "__extends": "CDOTA_BaseNPC",
    "__globalAccessorVariable": ""
  },
  "CDotaQuest": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "AddSubquest": "为该任务添加子任务",
    "CompleteQuest": "标记该任务完成",
    "GetSubquest": "用索引号找到该任务的子任务",
    "GetSubquestByName": "用任务名称找到该任务的子任务",
    "RemoveSubquest": "从该任务移除一个子任务",
    "SetTextReplaceString": "设置该任务的文本取代字符串",
    "SetTextReplaceValue": "设置任务数值"
  },
  "CDOTA_BaseNPC_Trap_Ward": {
    "__self": "",
    "__extends": "CDOTA_BaseNPC_Creature",
    "__globalAccessorVariable": "",
    "GetTrapTarget": "",
    "SetAnimation": ""
  },
  "CDOTA_Ability_Nian_Dive": {
    "__self": "",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "SetPlaybackRate": ""
  },
  "CFoWBlockerRegion": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddRectangularBlocker": "",
    "AddRectangularOutlineBlocker": ""
  },
  "CEntityScriptFramework": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": ""
  },
  "CMarkupVolumeTagged": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "HasTag": "查询该卷是否带有指定标签"
  },
  "GlobalSys": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "CommandLineCheck": "",
    "CommandLineFloat": "",
    "CommandLineInt": "",
    "CommandLineStr": ""
  },
  "CPointTemplate": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "DeleteCreatedSpawnGroups": "删除任何该点模板的刷新组。提示：并不删除点模板",
    "ForceSpawn": "强制刷新该点模板指向的全部实体",
    "GetSpawnedEntities": "获取最近被刷新的实体",
    "SetSpawnCallback": "设置刷新回调（hCallbackFunc,hCallbackScope,hCallbackData），当模板产生实体时回调。被刷新的实体作为数组被传入"
  },
  "CDOTAPlayer": {
    "__self": "玩家实体",
    "__extends": "CBaseAnimating",
    "__globalAccessorVariable": "",
    "CheckForCourierSpawning": "",
    "GetAssignedHero": "获取该玩家的英雄",
    "GetPlayerID": "获取该玩家的官方玩家ID（PlayerID）玩家不在队伍中时返回-1",
    "MakeRandomHeroSelection": "随机该玩家的英雄",
    "SetAssignedHeroEntity": "",
    "SetKillCamUnit": "设置英雄的击杀镜头单位（killcamunit）",
    "SetMusicStatus": "设置玩家的音乐状态，注意这只有在dota_music_battle_enable为off时才会有效",
    "SetSelectedHero": "",
    "SpawnCourierAtPosition": ""
  },
  "CBodyComponent": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddImpulseAtPosition": "在指定的世界位置施加一个物理推动",
    "AddVelocity": "为物理物件增加一个线速度或角速度",
    "DetachFromParent": "从其父项（parent）中分离",
    "GetSequence": "返回激活的序列（sequence）",
    "IsAttachedToParent": "是否依附父项（parent）",
    "LookupSequence": "输入名字返回序列（sequence）ID",
    "SequenceDuration": "按秒数返回指定序列（sequence）的持续时间",
    "SetAngularVelocity": "",
    "SetAnimation": "输入动画名称播放动作，需要模型拥有该动画",
    "SetMaterialGroup": "",
    "SetVelocity": ""
  },
  "CDOTA_Item_BagOfGold": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "SetLifeTime": ""
  },
  "ProjectileManager": {
    "__self": "投射物管理器",
    "__extends": "",
    "__globalAccessorVariable": "",
    "ChangeTrackingProjectileSpeed": "",
    "CreateLinearProjectile": "创建一个线性投射物并返回其ID",
    "CreateTrackingProjectile": "创建一个追踪投射物",
    "DestroyLinearProjectile": "摧毁指定ID的线性投射物",
    "DestroyTrackingProjectile": "",
    "GetLinearProjectileLocation": "",
    "GetLinearProjectileRadius": "",
    "GetLinearProjectileVelocity": "返回一个表示当前投射物速度的向量。",
    "GetTrackingProjectileLocation": "",
    "IsValidProjectile": "",
    "ProjectileDodge": "使得特定单位躲避投射物",
    "UpdateLinearProjectileDirection": ""
  },
  "CDOTA_Buff": {
    "__self": "状态咒语的基类",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddParticle": "增加粒子。",
    "DecrementStackCount": "将Mordifier的叠加层数-1",
    "Destroy": "运行所有相关的移除函数来移除这个Mordifier。",
    "DestroyOnExpire": "",
    "ForceRefresh": "运行所有相关的刷新函数，使Mordifier恢复到初始",
    "GetAbility": "获取产生这个Mordifier的技能。",
    "GetAuraDuration": "",
    "GetAuraOwner": "",
    "GetCaster": "获取产生这个Mordifier的单位。",
    "GetClass": "获取这个Mordifier所属的类。",
    "GetCreationTime": "获取这个Mordifier的创建时间。",
    "GetDieTime": "获取这个Mordifier的终止时间。",
    "GetDuration": "获取这个Mordifier的持续时间。",
    "GetElapsedTime": "获取这个Mordifier的消失时间。",
    "GetLastAppliedTime": "",
    "GetName": "获取这个Mordifier的名称。",
    "GetParent": "获取这个Mordifier所继承的单位。",
    "GetRemainingTime": "获取这个Mordifier的剩余时间。",
    "GetSerialNumber": "",
    "GetStackCount": "获取这个Mordifier的叠加层数。",
    "HasFunction": "",
    "IncrementStackCount": "使Mordifier的叠加层数+1。",
    "IsDebuff": "",
    "IsHexDebuff": "",
    "IsStunDebuff": "",
    "SendBuffRefreshToClients": "",
    "SetDuration": "设置持续时间。",
    "SetStackCount": "设置叠加层数。",
    "StartIntervalThink": "开始Mordifier的计时功能(OnIntervalThink)，根据给定的间隔(float)。值-1将会停止这个功能。"
  },
  "CBaseCombatCharacter": {
    "__self": "",
    "__extends": "CBaseFlex",
    "__globalAccessorVariable": ""
  },
  "CBasePlayer": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "GetEquippedWeapons": "",
    "GetUserID": "",
    "GetWeaponCount": "",
    "IsNoclipping": "玩家处于穿墙模式（noclipmode）下返回true"
  },
  "CBaseTrigger": {
    "__self": "触发器实体",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "Disable": "禁止触发器",
    "Enable": "允许触发器",
    "IsTouching": "检查指定实体是否正在接触触发器"
  },
  "GridNav": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "CanFindPath": "判断是否能从某个起始点移动到某个终点。(vStart,vEnd)",
    "DestroyTreesAroundPoint": "砍掉区域内所有的树。(vPosition,flRadius,bFullCollision",
    "FindPathLength": "找到两点间可通过的路径，并返回路径长度。如果寻路失败，将返回-1。float(vStart,vEnd)",
    "GetAllTreesAroundPoint": "以table形式返回附近所有的树木。HSCRIPTS(vPosition,flRadius,bFullCollision).",
    "GridPosToWorldCenterX": "获取指定X索引号的世界中心X位置（网格到世界）",
    "GridPosToWorldCenterY": "获取指定Y索引号的世界中心Y位置（网格到世界）",
    "IsBlocked": "检查给定位置是否被阻挡",
    "IsNearbyTree": "",
    "IsTraversable": "检查给予维持是否可通过",
    "RegrowAllTrees": "",
    "WorldToGridPosX": "获取指定世界X位置的X索引（世界到网格）",
    "WorldToGridPosY": "获取指定世界Y位置的Y索引（世界到网格）"
  },
  "CLogicScript": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": ""
  },
  "CScriptUniformRandomStream": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "RandomFloat": "",
    "RandomFloatExp": "",
    "RandomInt": "",
    "RollPercentage": ""
  },
  "CDOTA_Item_Physical": {
    "__self": "",
    "__extends": "CBaseAnimating",
    "__globalAccessorVariable": "",
    "GetContainedItem": "返回禁用的物品?",
    "GetCreationTime": "返回物品第一次出现在地图上的时间",
    "SetContainedItem": "设置禁用的物品?"
  },
  "CBaseAnimating": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "ActiveSequenceDuration": "",
    "GetCycle": "",
    "GetGraphParameter": "",
    "GetSequence": "",
    "IsSequenceFinished": "查询主序列是否播放结束",
    "ResetSequence": "",
    "SequenceDuration": "",
    "SetCycle": "",
    "SetGraphLookTarget": "",
    "SetGraphParameter": "",
    "SetGraphParameterBool": "",
    "SetGraphParameterEnum": "",
    "SetGraphParameterFloat": "",
    "SetGraphParameterInt": "",
    "SetGraphParameterVector": "",
    "SetPoseParameter": "将指定的位置参数（poseparameter）设定为指定值",
    "SetSequence": "",
    "StopAnimation": ""
  },
  "CCustomNetTableManager": {
    "__self": "自定义网表，用于同步数据",
    "__extends": "",
    "__globalAccessorVariable": "CustomNetTables",
    "GetTableValue": "",
    "SetTableValue": ""
  },
  "CScriptKeyValues": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "GetValue": "读取一个键值（spawnkey）"
  },
  "CScriptHeroList": {
    "__self": "英雄列表",
    "__extends": "HeroList",
    "__globalAccessorVariable": "",
    "GetAllHeroes": "返回当前世界全部英雄",
    "GetHero": "获取英雄列表中第N位英雄",
    "GetHeroCount": "返回当前世界英雄数目"
  },
  "CScriptHTTPRequest": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "Send": "",
    "SetHTTPRequestAbsoluteTimeoutMS": "",
    "SetHTTPRequestGetOrPostParameter": "",
    "SetHTTPRequestHeaderValue": "",
    "SetHTTPRequestNetworkActivityTimeout": "",
    "SetHTTPRequestRawPostBody": ""
  },
  "CInfoWorldLayer": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "HideWorldLayer": "",
    "ShowWorldLayer": ""
  },
  "CBaseFlex": {
    "__self": "",
    "__extends": "CBaseAnimating",
    "__globalAccessorVariable": "",
    "GetCurrentScene": "返回最早激活的场景实体的实例（如果存在的话）",
    "GetSceneByIndex": "返回指定索引号的场景实体的实例",
    "ScriptPlayScene": ""
  },
  "CSceneEntity": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "AddBroadcastTeamTarget": "在记分板列表上增加一个组（使用索引号）",
    "Cancel": "取消场景重播",
    "EstimateLength": "返回场景长度（秒）",
    "FindCamera": "获取镜头",
    "FindNamedEntity": "通过一个实体参照，比如!target，获取场景物体中的实际实体",
    "IsPaused": "场景是否被暂停",
    "IsPlayingBack": "场景是否正播放",
    "LoadSceneFromString": "输入虚拟场景名和VCD字符串，载入场景",
    "RemoveBroadcastTeamTarget": "从记分板列表上移除一个组（使用索引号）",
    "Start": "开始场景重播，参数为激活者实体（activatorEntity）"
  },
  "CDOTA_Ability_Lua": {
    "__self": "脚本驱动类技能",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "CastFilterResult": "判断一个无目标的命令是否有效",
    "CastFilterResultLocation": "(VectorvLocation)判断一个作用于某个地点的命令是否有效",
    "CastFilterResultTarget": "(HSCRIPThTarget)判断一个作用于某个单位的命令是否有效",
    "GetAOERadius": "",
    "GetAssociatedPrimaryAbilities": "获取相互关联的技能Returnsabilitiesthatarestolensimultaneously,orotherwiserelatedinfunctionality.",
    "GetAssociatedSecondaryAbilities": "",
    "GetBehavior": "返回技能的施法动作类型",
    "GetCastAnimation": "返回技能的施法动画",
    "GetCastPoint": "",
    "GetCastRange": "返回技能的施法范围",
    "GetChannelAnimation": "返回技能的持续施法动画",
    "GetChannelTime": "返回技能的持续施法时间",
    "GetChannelledManaCostPerSecond": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
    "GetConceptRecipientType": "返回该技能被释放时将听到语音的单位",
    "GetCooldown": "返回技能的CD",
    "GetCustomCastError": "返回一条失效的无目标命令的错误信息",
    "GetCustomCastErrorLocation": "(VectorvLocation)返回一条失效的作用于地点的命令的错误信息",
    "GetCustomCastErrorTarget": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
    "GetGoldCost": "返回某等级的金钱花费（当前为-1）",
    "GetIntrinsicModifierName": "返回被该技能被动施加的Mordifier",
    "GetManaCost": "返回某等级的魔法消耗（当前为-1）",
    "GetPlaybackRateOverride": "返回施法动画的播放速度",
    "IsHiddenAbilityCastable": "返回当该技能不在动作面板上时是否能使用",
    "IsHiddenWhenStolen": "返回该技能被技能窃取后是否是隐藏的",
    "IsRefreshable": "返回该技能是否能被刷新球刷新",
    "IsStealable": "返回该技能是否能被窃取",
    "OnAbilityPhaseInterrupted": "施法被打断",
    "OnAbilityPhaseStart": "施法开始（施法成功时返回True）",
    "OnAbilityPinged": "",
    "OnChannelFinish": "(boolbInterrupted)持续施法完成",
    "OnChannelThink": "(floatflInterval)持续施法开始",
    "OnHeroCalculateStatBonus": "施法者（仅限英雄）升级，得到技能加点,或receivedanewstatbonus.",
    "OnHeroDiedNearby": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
    "OnHeroLevelUp": "施法者升级",
    "OnInventoryContentsChanged": "施法者物品库存发生变化",
    "OnItemEquipped": "(HSCRIPThItem)施法者装备了物品",
    "OnOwnerDied": "施法者死亡",
    "OnOwnerSpawned": "施法者第一次出生或重生",
    "OnProjectileHit": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
    "OnProjectileHitHandle": "",
    "OnProjectileHit_ExtraData": "(HSCRIPThTarget,VectorvLocation,tablekv)投射物撞击到某目标或者到达指定位置(目标不可用)",
    "OnProjectileThink": "(VectorvLocation)投射物正在运动",
    "OnProjectileThinkHandle": "",
    "OnProjectileThink_ExtraData": "(VectorvLocation,tablekv)投射物正在运动",
    "OnSpellStart": "施法前摇结束，技能效果开始",
    "OnStolen": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
    "OnToggle": "Abilityistoggledon/off.技能被开启/关闭",
    "OnUnStolen": "当技能未被（成功）窃取时，进行的某特殊行为",
    "OnUpgrade": "技能升级",
    "ProcsMagicStick": "返回该技能是否会增加周围单位的魔棒点数",
    "ResetToggleOnRespawn": "",
    "SpeakTrigger": "返回所使用的语音类型"
  },
  "CPointClientUIWorldPanel": {
    "__self": "",
    "__extends": "CBaseModelEntity",
    "__globalAccessorVariable": "",
    "AcceptUserInput": "",
    "AddCSSClasses": "",
    "IgnoreUserInput": "",
    "IsGrabbable": "",
    "RemoveCSSClasses": ""
  },
  "CPointEntity": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": ""
  },
  "CDOTA_Ability_Nian_Leap": {
    "__self": "",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "SetPlaybackRate": ""
  },
  "CPhysicsProp": {
    "__self": "",
    "__extends": "CBaseAnimating",
    "__globalAccessorVariable": "",
    "DisableMotion": "禁止该元件运动",
    "EnableMotion": "允许该元件运动",
    "SetDynamicVsDynamicContinuous": ""
  },
  "CDOTA_Ability_Animation_Attack": {
    "__self": "技能攻击动画",
    "__extends": "CDOTABaseAbility",
    "__globalAccessorVariable": "",
    "SetPlaybackRate": "重写播放速率"
  },
  "CDOTA_PlayerResource": {
    "__self": "玩家数据管理",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "PlayerResource",
    "AddAegisPickup": "",
    "AddCandyEvent": "",
    "AddClaimedFarm": "",
    "AddGoldSpentOnSupport": "",
    "AddNeutralItemToStash": "",
    "AddRunePickup": "",
    "AreUnitsSharedWithPlayerID": "",
    "CanRepick": "",
    "ClearKillsMatrix": "",
    "ClearLastHitMultikill": "",
    "ClearLastHitStreak": "",
    "ClearRawPlayerDamageMatrix": "",
    "ClearStreak": "",
    "GetAegisPickups": "",
    "GetAssists": "",
    "GetBroadcasterChannel": "",
    "GetBroadcasterChannelSlot": "",
    "GetClaimedDenies": "",
    "GetClaimedFarm": "",
    "GetClaimedMisses": "",
    "GetConnectionState": "返回一个指示玩家连接状态的数字。0-无连接.1-机器人连入.2-玩家连入.3机器人/玩家断线.",
    "GetCreepDamageTaken": "",
    "GetCustomBuybackCooldown": "",
    "GetCustomBuybackCost": "",
    "GetCustomTeamAssignment": "返回玩家要加入的队伍编号",
    "GetDamageDoneToHero": "",
    "GetDeaths": "",
    "GetDenies": "",
    "GetEventGameCustomActionClaimCount": "",
    "GetEventGameCustomActionClaimCountByName": "",
    "GetEventPointsForPlayerID": "",
    "GetEventPremiumPoints": "",
    "GetEventRanks": "",
    "GetGold": "返回指定玩家现有金钱量",
    "GetGoldLostToDeath": "",
    "GetGoldPerMin": "",
    "GetGoldSpentOnBuybacks": "",
    "GetGoldSpentOnConsumables": "",
    "GetGoldSpentOnItems": "",
    "GetGoldSpentOnSupport": "",
    "GetHealing": "",
    "GetHeroDamageTaken": "",
    "GetKills": "返回指定玩家击杀次数",
    "GetKillsDoneToHero": "返回攻击者(第一个参数)杀死指定受害者(第二个参数)的次数",
    "GetLastHitMultikill": "",
    "GetLastHitStreak": "",
    "GetLastHits": "",
    "GetLevel": "",
    "GetLiveSpectatorTeam": "",
    "GetMisses": "",
    "GetNearbyCreepDeaths": "",
    "GetNetWorth": "",
    "GetNthCourierForTeam": "",
    "GetNthPlayerIDOnTeam": "",
    "GetNumConsumablesPurchased": "",
    "GetNumCouriersForTeam": "",
    "GetNumItemsPurchased": "",
    "GetPartyID": "",
    "GetPlayer": "",
    "GetPlayerCount": "获取未加入队伍的观战者和玩家数量。",
    "GetPlayerCountForTeam": "获取队伍中的玩家数量。",
    "GetPlayerLoadedCompletely": "",
    "GetPlayerName": "",
    "GetRawPlayerDamage": "",
    "GetReliableGold": "返回指定玩家现有可靠金钱量",
    "GetRespawnSeconds": "",
    "GetRoshanKills": "",
    "GetRunePickups": "",
    "GetSelectedHeroEntity": "",
    "GetSelectedHeroID": "",
    "GetSelectedHeroName": "",
    "GetSteamAccountID": "获取32位SteamID",
    "GetSteamID": "获取64位SteamID",
    "GetStreak": "",
    "GetStuns": "",
    "GetTeam": "",
    "GetTeamKills": "",
    "GetTeamPlayerCount": "获取处于有效队伍（天辉，夜魇，或者自定义队伍）的玩家数量。",
    "GetTimeOfLastConsumablePurchase": "",
    "GetTimeOfLastDeath": "",
    "GetTimeOfLastItemPurchase": "",
    "GetTotalEarnedGold": "",
    "GetTotalEarnedXP": "",
    "GetTotalGoldSpent": "",
    "GetTowerDamageTaken": "",
    "GetTowerKills": "",
    "GetUnitShareMaskForPlayer": "",
    "GetUnreliableGold": "返回指定玩家现有不可靠金钱量",
    "GetXPPerMin": "",
    "HasCustomGameTicketForPlayerID": "当玩家拥有通行证时返回true",
    "HasRandomed": "",
    "HasSelectedHero": "",
    "HasSetEventGameCustomActionClaimCount": "",
    "HaveAllPlayersJoined": "",
    "IncrementAssists": "",
    "IncrementClaimedDenies": "",
    "IncrementClaimedMisses": "",
    "IncrementDeaths": "",
    "IncrementDenies": "",
    "IncrementKills": "",
    "IncrementLastHitMultikill": "",
    "IncrementLastHitStreak": "",
    "IncrementLastHits": "",
    "IncrementMisses": "",
    "IncrementNearbyCreepDeaths": "",
    "IncrementStreak": "",
    "IncrementTotalEarnedXP": "",
    "IsBroadcaster": "",
    "IsDisableHelpSetForPlayerID": "",
    "IsFakeClient": "",
    "IsHeroSelected": "",
    "IsHeroSharedWithPlayerID": "",
    "IsValidPlayer": "",
    "IsValidPlayerID": "",
    "IsValidTeamPlayer": "",
    "IsValidTeamPlayerID": "",
    "ModifyGold": "",
    "NumPlayers": "",
    "NumTeamPlayers": "",
    "RecordConsumableAbilityChargeChange": "",
    "ReplaceHeroWith": "(玩家ID,英雄职业名,金钱,经验值)-将玩家的英雄替换成指定的英雄、金钱和经验值",
    "ResetBuybackCostTime": "",
    "ResetTotalEarnedGold": "",
    "SetBuybackCooldownTime": "",
    "SetBuybackGoldLimitTime": "",
    "SetCameraTarget": "(玩家ID,实体)-强制玩家镜头跟随目标实体",
    "SetCanRepick": "",
    "SetCustomBuybackCooldown": "设置玩家买活冷却时间",
    "SetCustomBuybackCost": "设置玩家买活花费",
    "SetCustomIntParam": "",
    "SetCustomPlayerColor": "为玩家设定自定义颜色（将显示在小地图，计分板等）。",
    "SetCustomTeamAssignment": "设置玩家要加入的队伍",
    "SetGold": "设置玩家的可靠/不可靠金钱数",
    "SetHasRandomed": "",
    "SetLastBuybackTime": "",
    "SetOverrideSelectionEntity": "强制玩家选择实体。",
    "SetUnitShareMaskForPlayer": "",
    "SpendGold": "",
    "UpdateTeamSlot": "",
    "WhoSelectedHero": ""
  },
  "CParticleSystem": {
    "__self": "",
    "__extends": "CBaseModelEntity",
    "__globalAccessorVariable": ""
  },
  "CDOTA_Modifier_Lua_Horizontal_Motion": {
    "__self": "修改器的水平运动控制器",
    "__extends": "CDOTA_Modifier_Lua",
    "__globalAccessorVariable": "",
    "ApplyHorizontalMotionController": "启动水平运动控制器的特效。启动成功后返回True。",
    "GetPriority": "获取优先级。",
    "OnHorizontalMotionInterrupted": "当运动被打断时进行回调。",
    "SetPriority": "设置优先级。",
    "UpdateHorizontalMotion": "根据给定的间隔对NPC施加水平运动"
  },
  "CNativeOutputs": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "AddOutput": "增加一个输出",
    "Init": "初始化输出"
  },
  "CDOTA_Unit_CustomGameAnnouncer": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "SetServerAuthoritative": ""
  },
  "Convars": {
    "__self": "控制台",
    "__extends": "Convars",
    "__globalAccessorVariable": "ConVars",
    "GetBool": "获取指定的控制台变量（convar）的boolean值",
    "GetCommandClient": "返回输入该控制台指令的玩家",
    "GetDOTACommandClient": "返回输入该控制台指令的DOTA玩家",
    "GetFloat": "将指定的控制台变量（convar）作为float返回.不存在时返回nil",
    "GetInt": "将指定的控制台变量（convar）作为int返回.不存在时返回nil",
    "GetStr": "将指定的控制台变量（convar）作为string返回.不存在时返回nil",
    "RegisterCommand": "注册一个控制台指令",
    "RegisterConvar": "注册一个新的控制台变量",
    "SetBool": "将指定控制台变量（convar）设置为指定bool",
    "SetFloat": "将指定控制台变量（convar）设置为指定float",
    "SetInt": "将指定控制台变量（convar）设置为指定int",
    "SetStr": "将指定控制台变量（convar）设置为指定string"
  },
  "CDOTA_Item_Lua": {
    "__self": "脚本驱动类物品基类",
    "__extends": "CDOTA_Item",
    "__globalAccessorVariable": "",
    "CanUnitPickUp": "",
    "CastFilterResult": "判断一个无目标的命令是否有效",
    "CastFilterResultLocation": "(VectorvLocation)判断一个作用于地点的命令是否有效",
    "CastFilterResultTarget": "(HSCRIPThTarget)判断一个作用于目标的命令是否有效",
    "GetAssociatedPrimaryAbilities": "",
    "GetAssociatedSecondaryAbilities": "",
    "GetBehavior": "返回技能的施法动作类型",
    "GetCastRange": "返回技能的施法范围",
    "GetChannelTime": "返回技能的持续施法时间",
    "GetChannelledManaCostPerSecond": "返回当前等级下，技能持续施法时的每秒魔法消耗(当前为-1)",
    "GetConceptRecipientType": "返回该技能被释放时将听到语音的单位",
    "GetCooldown": "返回技能的CD",
    "GetCustomCastError": "返回一条失效的无目标命令的错误信息",
    "GetCustomCastErrorLocation": "(VectorvLocation)返回一条失效的作用与地点的命令的错误信息",
    "GetCustomCastErrorTarget": "(HSCRIPThTarget)返回一条失效的指向目标的命令的错误信息",
    "GetGoldCost": "返回某等级的金钱花费（当前为-1）",
    "GetIntrinsicModifierName": "返回被该技能被动地施加的Mordifier",
    "GetManaCost": "返回某等级的魔法消耗（当前为-1）",
    "GetPlaybackRateOverride": "返回施法动画的播放速度",
    "IsHiddenAbilityCastable": "返回当该技能不在动作面板上时是否能使用",
    "IsHiddenWhenStolen": "返回该技能被技能窃取后是否是隐藏的",
    "IsMuted": "",
    "IsRefreshable": "返回该技能是否能被刷新球刷新",
    "IsStealable": "返回该技能是否能被窃取",
    "OnAbilityPhaseInterrupted": "施法被打断",
    "OnAbilityPhaseStart": "施法开始（施法成功时返回True）",
    "OnChannelFinish": "(boolbInterrupted)持续施法完成",
    "OnChannelThink": "(floatflInterval)持续施法开始",
    "OnChargeCountChanged": "",
    "OnHeroCalculateStatBonus": "",
    "OnHeroDiedNearby": "一个英雄在附近死亡(比如说骨灰盒的效果)时,获取参数表",
    "OnHeroLevelUp": "施法者升级",
    "OnInventoryContentsChanged": "施法者物品库存发生变化",
    "OnItemEquipped": "(HSCRIPThItem)施法者装备了物品",
    "OnOwnerDied": "施法者死亡",
    "OnOwnerSpawned": "施法者第一次出生或重生",
    "OnProjectileHit": "(HSCRIPThTarget,VectorvLocation)投射物撞击到某目标或者到达指定位置(目标不可用)",
    "OnProjectileThink": "(VectorvLocation)投射物正在运动",
    "OnSpellStart": "施法前摇结束，技能效果开始",
    "OnStolen": "(HSCRIPThAbility)当技能被窃取时，进行的某特殊行为",
    "OnToggle": "技能被开启/关闭",
    "OnUnStolen": "当技能未被（成功）窃取时，进行的某特殊行为",
    "OnUpgrade": "技能升级",
    "ProcsMagicStick": "返回该技能是否会增加周围单位的魔棒点数",
    "SpeakTrigger": "返回所使用的语音类型"
  },
  "CDOTA_BaseNPC_Hero": {
    "__self": "英雄类角色基类",
    "__extends": "CDOTA_BaseNPC",
    "__globalAccessorVariable": "",
    "AddExperience": "给单位增加经验值",
    "Buyback": "花费金钱并买活英雄",
    "CalculateStatBonus": "英雄返回属性后，重新计算全部属性",
    "CanEarnGold": "返回布尔值，买活返回金钱限制时间是否少于游戏时间（其实就是是否能够正常返回金钱.....）",
    "ClearLastHitMultikill": "数值存储在玩家资源(PlayerResource)中",
    "ClearLastHitStreak": "数值存储在玩家资源(PlayerResource)中",
    "ClearStreak": "数值存储在玩家资源(PlayerResource)中",
    "GetAbilityPoints": "返回未分配的技能点数",
    "GetAdditionalOwnedUnits": "返回玩家拥有的额外单位",
    "GetAgility": "返回敏捷值",
    "GetAgilityGain": "返回敏捷成长",
    "GetAssists": "返回助攻数，数值存储在玩家资源(PlayerResource)中",
    "GetAttacker": "",
    "GetBaseAgility": "返回基础敏捷",
    "GetBaseDamageMax": "返回基础攻击伤害最大值，英雄的基础攻击伤害也会受到属性影响",
    "GetBaseDamageMin": "返回基础攻击伤害最小值，英雄的基础攻击伤害也会受到属性影响",
    "GetBaseIntellect": "返回基础智力",
    "GetBaseManaRegen": "",
    "GetBaseStrength": "返回基础力量",
    "GetBonusDamageFromPrimaryStat": "返回来自主属性奖励的攻击伤害值",
    "GetBuybackCooldownTime": "返回该英雄买活CD的剩余时间",
    "GetBuybackCost": "返回买活所需金钱",
    "GetBuybackGoldLimitTime": "返回买活所带来的金钱惩罚剩余时间",
    "GetCurrentXP": "返回当前经验值",
    "GetDeathGoldCost": "返回死亡损失金钱",
    "GetDeaths": "返回死亡次数",
    "GetDenies": "返回反补次数",
    "GetGold": "返回该英雄拥有者所有的金钱数量",
    "GetGoldBounty": "",
    "GetHeroID": "",
    "GetIncreasedAttackSpeed": "返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响",
    "GetIntellect": "返回智力值",
    "GetIntellectGain": "返回智力成长",
    "GetKills": "返回击杀数，数值存储在玩家资源(PlayerResource)中",
    "GetLastHits": "返回正补数，数值存储在玩家资源(PlayerResource)中",
    "GetMostRecentDamageTime": "返回最近一次伤害时间",
    "GetMultipleKillCount": "返回多杀计数",
    "GetNumAttackers": "",
    "GetNumItemsInInventory": "返回玩家拥有的物品数量。",
    "GetNumItemsInStash": "返回玩家储藏处内",
    "GetPhysicalArmorBaseValue": "返回基础护甲值。",
    "GetPlayerID": "返回英雄拥有者的ID",
    "GetPrimaryAttribute": "返回英雄主要属性，0=力量,1=敏捷,2=智力.",
    "GetPrimaryStatValue": "返回主属性值",
    "GetReplicatingOtherHero": "",
    "GetRespawnTime": "返回复活时间",
    "GetRespawnsDisabled": "返回该英雄是否被禁止复活。",
    "GetStreak": "返回连杀数",
    "GetStrength": "返回力量值",
    "GetStrengthGain": "返回力量成长",
    "GetTimeUntilRespawn": "返回复活所需的时间",
    "GetTogglableWearable": "返回物品栏中可佩带（可切换）的物品。",
    "HasAnyAvailableInventorySpace": "返回是否有可用物品栏空间",
    "HasFlyingVision": "返回是否拥有空中视野",
    "HasOwnerAbandoned": "",
    "HasRoomForItem": "参数:constcharpItemName,boolbIncludeStashCombines,boolbAllowSelling",
    "HeroLevelUp": "升级英雄,参数决定是否播放升级效果.",
    "IncrementAssists": "数值存储在玩家资源(PlayerResource)中",
    "IncrementDeaths": "数值存储在玩家资源(PlayerResource)中",
    "IncrementDenies": "数值存储在玩家资源(PlayerResource)中",
    "IncrementKills": "增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中",
    "IncrementLastHitMultikill": "数值存储在玩家资源(PlayerResource)中",
    "IncrementLastHitStreak": "数值存储在玩家资源(PlayerResource)中",
    "IncrementLastHits": "数值存储在玩家资源(PlayerResource)中",
    "IncrementNearbyCreepDeaths": "数值存储在玩家资源(PlayerResource)中",
    "IncrementStreak": "数值存储在玩家资源(PlayerResource)中",
    "IsBuybackDisabledByReapersScythe": "是否被死神镰刀禁止买活",
    "IsReincarnating": "是否处于重生中",
    "IsStashEnabled": "",
    "KilledHero": "参数:英雄,加害者",
    "ModifyAgility": "增加指定值到英雄基础敏捷，随后调用CalculateStatBonus",
    "ModifyGold": "给予英雄金钱。参数:int金钱数,bool是否为可靠金钱,int原因",
    "ModifyGoldFiltered": "",
    "ModifyIntellect": "增加指定值到英雄基础智力，随后调用CalculateStatBonus",
    "ModifyStrength": "增加指定值到英雄基础力量，随后调用CalculateStatBonus",
    "PerformTaunt": "",
    "RecordLastHit": "",
    "RespawnHero": "",
    "SetAbilityPoints": "设置当前可用技能点",
    "SetBaseAgility": "设置基础敏捷",
    "SetBaseIntellect": "设置基础智力",
    "SetBaseStrength": "设置基础力量",
    "SetBotDifficulty": "设置人机对战的难度。",
    "SetBuyBackDisabledByReapersScythe": "设置是否被死神镰刀禁止买活",
    "SetBuybackCooldownTime": "设置买活冷却时间",
    "SetBuybackGoldLimitTime": "设置买活后金钱惩罚时间",
    "SetCustomDeathXP": "",
    "SetGold": "设置英雄拥有者的金钱",
    "SetPlayerID": "",
    "SetPrimaryAttribute": "设置英雄的主属性值。",
    "SetRespawnPosition": "",
    "SetRespawnsDisabled": "禁止英雄复活。",
    "SetStashEnabled": "",
    "SetTimeUntilRespawn": "",
    "ShouldDoFlyHeightVisual": "",
    "SpendGold": "参数:int金钱,int原因",
    "UpgradeAbility": "升级指定技能，需要英雄拥有该技能和技能点",
    "WillReincarnate": ""
  },
  "CDOTA_Modifier_Lua_Vertical_Motion": {
    "__self": "修改器的垂直运动控制器",
    "__extends": "CDOTA_Modifier_Lua",
    "__globalAccessorVariable": "",
    "ApplyVerticalMotionController": "启动垂直运动控制器的特效。启动成功后返回True。",
    "GetMotionPriority": "获取优先级。",
    "OnVerticalMotionInterrupted": "当竖直运动被打断时进行回调",
    "SetMotionPriority": "设置优先级。",
    "UpdateVerticalMotion": "根据给定的间隔对NPC施加竖直运动。"
  },
  "CDOTAVoteSystem": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "StartVote": "开始投票，详细由传入的table制定"
  },
  "CDOTA_BaseNPC_Building": {
    "__self": "建筑类角色基类",
    "__extends": "CDOTA_BaseNPC",
    "__globalAccessorVariable": "",
    "GetInvulnCount": "返回建筑无敌计数",
    "SetInvulnCount": "设置建筑无敌计数"
  },
  "CDOTAGamerules": {
    "__self": "游戏规则工具",
    "__extends": "",
    "__globalAccessorVariable": "GameRules",
    "AddBotPlayerWithEntityScript": "",
    "AddEventMetadataLeaderboardEntry": "",
    "AddEventMetadataLeaderboardEntryRawScore": "",
    "AddItemToWhiteList": "",
    "AddMinimapDebugPoint": "",
    "AddMinimapDebugPointForTeam": "",
    "BeginNightstalkerNight": "",
    "BeginTemporaryNight": "",
    "BotPopulate": "",
    "Defeated": "",
    "DidMatchSignoutTimeOut": "",
    "EnableCustomGameSetupAutoLaunch": "",
    "ExecuteTeamPing": "",
    "FinishCustomGameSetup": "",
    "ForceCreepSpawn": "",
    "ForceGameStart": "",
    "GetAnnouncer": "",
    "GetBannedHeroes": "",
    "GetCustomGameDifficulty": "",
    "GetCustomGameTeamMaxPlayers": "",
    "GetDOTATime": "",
    "GetDifficulty": "",
    "GetDroppedItem": "",
    "GetGameFrameTime": "",
    "GetGameModeEntity": "",
    "GetGameSessionConfigValue": "",
    "GetGameTime": "",
    "GetItemStockCount": "",
    "GetItemStockDuration": "",
    "GetItemStockTime": "",
    "GetMatchID": "",
    "GetMatchSignoutComplete": "",
    "GetNextBountyRuneSpawnTime": "",
    "GetNextRuneSpawnTime": "",
    "GetNianTotalDamageTaken": ",获得年兽/年兽的全部伤害",
    "GetPlayerCustomGameAccountRecord": "",
    "GetStateTransitionTime": "",
    "GetTimeOfDay": "",
    "GetWeatherWindDirection": "",
    "IncreaseItemStock": "",
    "IsCheatMode": "",
    "IsDaytime": "",
    "IsGamePaused": "",
    "IsHeroRespawnEnabled": "",
    "IsInBanPhase": "",
    "IsItemInWhiteList": "",
    "IsNightstalkerNight": "",
    "IsTemporaryNight": "",
    "LockCustomGameSetupTeamAssignment": "",
    "MakeTeamLose": "",
    "ModifyGoldFiltered": "",
    "NumDroppedItems": "",
    "PlayerHasCustomGameHostPrivileges": "",
    "Playtesting_UpdateAddOnKeyValues": "",
    "PrepareSpawners": "",
    "RemoveFakeClient": "",
    "RemoveItemFromWhiteList": "",
    "ResetDefeated": "",
    "ResetGameTime": "",
    "ResetToCustomGameSetup": "",
    "ResetToHeroSelection": "",
    "SendCustomMessage": "",
    "SendCustomMessageToTeam": "",
    "SetAllowOutpostBonuses": "",
    "SetCreepMinimapIconScale": "",
    "SetCreepSpawningEnabled": "",
    "SetCustomGameAccountRecordSaveFunction": "",
    "SetCustomGameAllowBattleMusic": "",
    "SetCustomGameAllowHeroPickMusic": "",
    "SetCustomGameAllowMusicAtGameStart": "",
    "SetCustomGameAllowSecondaryAbilitiesOnOtherUnits": "",
    "SetCustomGameBansPerTeam": "",
    "SetCustomGameDifficulty": "",
    "SetCustomGameEndDelay": "",
    "SetCustomGameSetupAutoLaunchDelay": "",
    "SetCustomGameSetupRemainingTime": "",
    "SetCustomGameSetupTimeout": "",
    "SetCustomGameTeamMaxPlayers": "",
    "SetCustomVictoryMessage": "",
    "SetCustomVictoryMessageDuration": "",
    "SetEventMetadataCustomTable": "",
    "SetEventSignoutCustomTable": "",
    "SetFilterMoreGold": "",
    "SetFirstBloodActive": "",
    "SetGameTimeFrozen": "",
    "SetGameWinner": "",
    "SetGlyphCooldown": "",
    "SetGoldPerTick": "",
    "SetGoldTickTime": "",
    "SetHeroMinimapIconScale": "",
    "SetHeroRespawnEnabled": "",
    "SetHeroSelectPenaltyTime": "",
    "SetHeroSelectionTime": "",
    "SetHideKillMessageHeaders": "",
    "SetIgnoreLobbyTeamsInCustomGame": "",
    "SetItemStockCount": "",
    "SetNextBountyRuneSpawnTime": "",
    "SetNextRuneSpawnTime": "",
    "SetOverlayHealthBarUnit": "",
    "SetPostGameTime": "",
    "SetPreGameTime": "",
    "SetRuneMinimapIconScale": "",
    "SetRuneSpawnTime": "",
    "SetSafeToLeave": "",
    "SetSameHeroSelectionEnabled": "",
    "SetShowcaseTime": "",
    "SetSpeechUseSpawnInsteadOfRespawnConcept": "",
    "SetStartingGold": "",
    "SetStrategyTime": "",
    "SetTimeOfDay": "",
    "SetTreeRegrowTime": "",
    "SetUseBaseGoldBountyOnHeroes": "",
    "SetUseCustomHeroXPValues": "",
    "SetUseUniversalShopMode": "",
    "SetWeatherWindDirection": "",
    "SetWhiteListEnabled": "",
    "SpawnAndReleaseCreeps": "",
    "SpawnNeutralCreeps": "",
    "State_Get": ""
  },
  "CDOTA_BaseNPC": {
    "__self": "非玩家角色基类",
    "__extends": "CBaseFlex",
    "__globalAccessorVariable": "",
    "AddAbility": "以技能名称为该单位新增技能，并且返回该技能句柄。",
    "AddActivityModifier": "",
    "AddItem": "增加物品到该单位的库存。",
    "AddItemByName": "向玩家的库存添加一个物品。",
    "AddNewModifier": "为该单位增加修改器。",
    "AddNoDraw": "为单位添加NoDraw的flag。",
    "AddSpeechBubble": "为单位添加一个会话气泡（可同时存在1-4个）。",
    "AlertNearbyUnits": "",
    "AngerNearbyUnits": "",
    "AttackNoEarlierThan": "",
    "AttackReady": "",
    "BoundingRadius2D": "",
    "CalculateGenericBonuses": "",
    "CanEntityBeSeenByMyTeam": "",
    "CanSellItems": "",
    "CastAbilityImmediately": "技能立即施法。",
    "CastAbilityNoTarget": "无目标的施放技能(hAbility,iPlayerIndex)。",
    "CastAbilityOnPosition": "对一地点施放技能。",
    "CastAbilityOnTarget": "对一实体施放技能。",
    "CastAbilityToggle": "切换技能(hAbility,iPlayerIndex)。",
    "ChangeTeam": "",
    "ClearActivityModifiers": "",
    "DestroyAllSpeechBubbles": "",
    "DisassembleItem": "拆解该单位库存中过时的物品",
    "DropItemAtPosition": "将物品扔在指定地点。",
    "DropItemAtPositionImmediate": "立即将物品扔在指定地点。",
    "EjectItemFromStash": "自库存栏丢落指定的物品。",
    "FaceTowards": "",
    "FadeGesture": "",
    "FindAbilityByName": "以名称寻找技能。",
    "FindAllModifiers": "以table形式返回该单位所具有的所有Modifier。",
    "FindAllModifiersByName": "根据Modifier的名字，以table形式返回该单位所具有的modifier。",
    "FindItemInInventory": "",
    "FindModifierByName": "根据给定的名称，返回modifier的句柄。如果没有找到该名称，将返回nil。",
    "FindModifierByNameAndCaster": "根据给定的名称，返回某施法者所具有modifier的句柄。如果没有找到该名称，将返回nil。",
    "ForceKill": "强制击杀该单位。",
    "ForcePlayActivityOnce": "",
    "GetAbilityByIndex": "以下标值检索该单位的技能。0是第一个技能",
    "GetAbilityCount": "获取拥有的技能数量。",
    "GetAcquisitionRange": "获取单位的自动收集距离。",
    "GetAdditionalBattleMusicWeight": "获取当与该单位战斗时将会计算的战斗音乐权重。",
    "GetAggroTarget": "获取该单位的仇恨目标。",
    "GetAttackAnimationPoint": "",
    "GetAttackCapability": "获取单位的攻击能力。",
    "GetAttackDamage": "获取该单位伤害最大值与最小值之间的随机整数。",
    "GetAttackRangeBuffer": "获取状态增加的攻击距离。",
    "GetAttackSpeed": "获取该单位的攻速。",
    "GetAttackTarget": "返回该单位的攻击目标。",
    "GetAttacksPerSecond": "获取APS值(每秒能够打几下)。",
    "GetAverageTrueAttackDamage": "获取该单位最大伤害值与最小伤害值的平均数。(当前攻击）",
    "GetBaseAttackRange": "获取单位的基础攻击距离(修改器不列入计算)。",
    "GetBaseAttackTime": "",
    "GetBaseDamageMax": "获取最大伤害值。",
    "GetBaseDamageMin": "获取最小伤害值。",
    "GetBaseDayTimeVisionRange": "获取单位的基础日间视野距离(修改器不列入计算)。",
    "GetBaseHealthRegen": "获取单位的基础血量恢复值。",
    "GetBaseMagicalResistanceValue": "获取单位的基础魔法抗性值。",
    "GetBaseMaxHealth": "获取基础血量值。",
    "GetBaseMoveSpeed": "获取基础跑速。",
    "GetBaseNightTimeVisionRange": "获取单位基础的夜间视野距离(修改器不列入计算)。",
    "GetBonusManaRegen": "",
    "GetCastPoint": "",
    "GetCastRangeBonus": "",
    "GetCloneSource": "获取米波的主身（如果这个单位是米波）。",
    "GetCollisionPadding": "返回该单位的碰撞体积。",
    "GetCooldownReduction": "",
    "GetCreationTime": "",
    "GetCurrentActiveAbility": "获取该单位正在使用中的法术。",
    "GetCurrentVisionRange": "获取当前的视野距离。",
    "GetCursorCastTarget": "获取鼠标指定的施法目标。",
    "GetCursorPosition": "获取鼠标位置。",
    "GetCursorTargetingNothing": "",
    "GetDamageMax": "获得该单位的最大攻击伤害。",
    "GetDamageMin": "获得该单位的最小攻击伤害。",
    "GetDayTimeVisionRange": "获取该单位的日间视野(将修改器并入计算)。",
    "GetDeathXP": "获取该单位的击杀经验值奖赏。",
    "GetDisplayAttackSpeed": "",
    "GetEvasion": "",
    "GetForceAttackTarget": "",
    "GetGoldBounty": "获取该单位的击杀金钱奖赏。",
    "GetHasteFactor": "",
    "GetHealthDeficit": "返回损失的血量(最大血量-当前血量)。",
    "GetHealthPercent": "获取该单位当前的血量百分比。",
    "GetHealthRegen": "获取该单位当前的血量恢复值。",
    "GetHullRadius": "获取该单位的碰撞体积半径。",
    "GetIdealSpeed": "获取该单位的跑速(将修改器并入计算)。",
    "GetIdealSpeedNoSlows": "",
    "GetIncreasedAttackSpeed": "",
    "GetInitialGoalEntity": "返回该单位初始的路径点。",
    "GetInitialGoalPosition": "",
    "GetItemInSlot": "以下标值获取物品栏中的物品。",
    "GetLastAttackTime": "",
    "GetLastDamageTime": ",得到这个NPC最后一次受到伤害的时间",
    "GetLastIdleChangeTime": "获取该单位最后进入/离开闲置状态的时间。",
    "GetLevel": "返回该单位当前的等级。",
    "GetMagicalArmorValue": "返回该单位当前的魔法抗性值。",
    "GetMainControllingPlayer": "返回控制该单位的玩家ID。",
    "GetMana": "获取该单位的魔力值。",
    "GetManaPercent": "获取该单位的剩余魔力值百分比。",
    "GetManaRegen": "获取该单位的魔力恢复值。",
    "GetMaxMana": "获取单位的最大法力值。",
    "GetMaximumGoldBounty": "获取击杀该单位所得的最大金钱。",
    "GetMinimumGoldBounty": "获取击杀该单位所得的最小金钱。",
    "GetModelRadius": "获取模型大小半径。",
    "GetModifierCount": "返回该单位所拥有的修改器数量。",
    "GetModifierNameByIndex": "以下标值索引修改器，并返回修改器名称字符串。",
    "GetModifierStackCount": "",
    "GetMoveSpeedModifier": "",
    "GetMustReachEachGoalEntity": "该单位是否被要求走访每个路径点?",
    "GetNeutralSpawnerName": "",
    "GetNeverMoveToClearSpace": "",
    "GetNightTimeVisionRange": "返回夜间视野距离(将修改器并入计算)。",
    "GetOpposingTeamNumber": "",
    "GetPaddedCollisionRadius": "获取单位碰撞体积半径。",
    "GetPhysicalArmorBaseValue": "返回基础护甲值。",
    "GetPhysicalArmorValue": "返回当前的护甲值。",
    "GetPlayerOwner": "获取拥有此单位的玩家实体。",
    "GetPlayerOwnerID": "获取拥有此单位的玩家ID。",
    "GetProjectileSpeed": "",
    "GetRangeToUnit": "",
    "GetRangedProjectileName": "",
    "GetSecondsPerAttack": "",
    "GetSpellAmplification": "",
    "GetStatusResistance": "",
    "GetTotalPurchasedUpgradeGoldCost": "获取用在升级的金钱。",
    "GetUnitLabel": "",
    "GetUnitName": "获取单位名称。",
    "GiveMana": "给予此单位指定的魔法值。(Giffmemana!)",
    "HasAbility": "以技能名称搜寻该单位是否拥有此技能。",
    "HasAnyActiveAbilities": "",
    "HasAttackCapability": "",
    "HasFlyMovementCapability": "",
    "HasFlyingVision": "",
    "HasGroundMovementCapability": "",
    "HasInventory": "",
    "HasItemInInventory": "以物品名称搜寻该单位是否拥有此物品。",
    "HasModifier": "以修改器名称搜寻该单位是否拥有此修改器。",
    "HasMovementCapability": "",
    "HasScepter": "",
    "Heal": "治疗该单位。",
    "Hold": "命令单位在原地待命。",
    "Interrupt": "打断施法",
    "InterruptChannel": "",
    "InterruptMotionControllers": "",
    "IsAlive": "此单位是否还活着?没有死亡",
    "IsAncient": "该生物是否为远古野怪?",
    "IsAttackImmune": "",
    "IsAttacking": "",
    "IsAttackingEntity": "",
    "IsBarracks": "",
    "IsBlind": "",
    "IsBlockDisabled": "",
    "IsBoss": "",
    "IsBuilding": "",
    "IsChanneling": "",
    "IsClone": "",
    "IsCommandRestricted": "",
    "IsConsideredHero": "",
    "IsControllableByAnyPlayer": "该单位是否为非Bot玩家所控制?",
    "IsCourier": "",
    "IsCreature": "此单位是否为怪物类型单位?",
    "IsCreep": "",
    "IsCreepHero": "",
    "IsCurrentlyHorizontalMotionControlled": "",
    "IsCurrentlyVerticalMotionControlled": "",
    "IsDisarmed": "",
    "IsDominated": "",
    "IsEvadeDisabled": "",
    "IsFort": "",
    "IsFrozen": "",
    "IsHero": "此单位是否为英雄或英雄幻象?",
    "IsHexed": "",
    "IsIdle": "该生物是否处于闲置状态?",
    "IsIllusion": "该单位是否为幻象单位?",
    "IsInRangeOfShop": "",
    "IsInvisible": "",
    "IsInvulnerable": "",
    "IsLowAttackPriority": "",
    "IsMagicImmune": "该单位是否魔法免疫?",
    "IsMovementImpaired": "",
    "IsMoving": "",
    "IsMuted": "",
    "IsNeutralUnitType": "该单位是否为野怪?",
    "IsNightmared": "",
    "IsOpposingTeam": "",
    "IsOther": "",
    "IsOutOfGame": "",
    "IsOwnedByAnyPlayer": "该单位是否为非Bot之玩家所有?",
    "IsPhantom": "该单位是否为幻象单位?",
    "IsPhantomBlocker": "",
    "IsPhased": "是否在相位状态?",
    "IsPositionInRange": "是否在某点的范围内",
    "IsRangedAttacker": "该单位攻击类型是否为远程攻击?",
    "IsRealHero": "返回该单位是否为真正的英雄单位，而非小兵或是幻象。",
    "IsReincarnating": "",
    "IsRooted": "",
    "IsShrine": "",
    "IsSilenced": "该单位是否被沉默?",
    "IsSpeciallyDeniable": "",
    "IsStunned": "该单位是否被晕眩了?",
    "IsSummoned": "此单位是否为召唤物?",
    "IsTempestDouble": "",
    "IsTower": "此单位是否为塔?",
    "IsUnableToMiss": "",
    "IsUnselectable": "",
    "IsUntargetable": "",
    "Kill": "杀死一个单位，参数为使用的技能与攻击者。",
    "MakeIllusion": "",
    "MakePhantomBlocker": "",
    "MakeVisibleDueToAttack": "",
    "MakeVisibleToTeam": "",
    "ManageModelChanges": "",
    "ModifyHealth": "设置血量为所指定的值",
    "MoveToNPC": "移动至指定的单位。",
    "MoveToNPCToGiveItem": "将身上的物品丢给指定的单位。",
    "MoveToPosition": "移动到指定的位置。",
    "MoveToPositionAggressive": "移动到指定的位置。",
    "MoveToTargetToAttack": "移动至指定的单位，并且发动攻击。",
    "NoHealthBar": "",
    "NoTeamMoveTo": "",
    "NoTeamSelect": "",
    "NoUnitCollision": "",
    "NotOnMinimap": "",
    "NotOnMinimapForEnemies": "",
    "NotifyWearablesOfModelChange": "通知模型的可穿戴性发生了改变。",
    "PassivesDisabled": "",
    "PatrolToPosition": "",
    "PerformAttack": "对一单位执行攻击。",
    "PickupDroppedItem": "捡起掉落的物品。",
    "PickupRune": "捡起神符。",
    "PlayVCD": "",
    "ProvidesVision": "",
    "Purge": "(boolRemovePositiveBuffs,boolRemoveDebuffs,boolBuffsCreatedThisFrameOnly,boolRemoveStuns,boolRemoveExceptions根据增益、减益等一系列条件，清除单位的BUFF。",
    "QueueConcept": "",
    "QueueTeamConcept": "",
    "QueueTeamConceptNoSpectators": "",
    "ReduceMana": "移除单位的魔力，不过是用在该单位非自愿失去魔力，而非用在使用技能消耗魔力的情况。",
    "RemoveAbility": "以技能名称移除该单位相应的技能。",
    "RemoveAbilityByHandle": "",
    "RemoveAbilityFromIndexByName": "",
    "RemoveAllModifiers": "",
    "RemoveGesture": "移除某个动作。",
    "RemoveHorizontalMotionController": "移除水平方向上的运动控制器。",
    "RemoveItem": "将该单位库存中的过期物品移除。",
    "RemoveModifierByName": "以名称移除修改器。",
    "RemoveModifierByNameAndCaster": "以施法者与修改器名称移除修改器。",
    "RemoveNoDraw": "",
    "RemoveVerticalMotionController": "移除垂直方向上的运动控制器。",
    "RespawnUnit": "复活该单位。",
    "Script_GetAttackRange": "",
    "Script_IsDeniable": "",
    "SellItem": "卖出该单位的物品。",
    "SetAbilityByIndex": "改变技能Index",
    "SetAcquisitionRange": "",
    "SetAdditionalBattleMusicWeight": "获取当与该单位战斗时将会计算的战斗音乐权重。",
    "SetAggroTarget": "将这个单位的仇恨目标设为某个单位。",
    "SetAttackCapability": "",
    "SetAttacking": "",
    "SetBaseAttackTime": "",
    "SetBaseDamageMax": "设置基础最大攻击力。",
    "SetBaseDamageMin": "设置基础最小攻击力。",
    "SetBaseHealthRegen": "",
    "SetBaseMagicalResistanceValue": "设置基础魔法抗性值。",
    "SetBaseManaRegen": "设置基础魔力恢复值。",
    "SetBaseMaxHealth": "设置基础最大血量。",
    "SetBaseMoveSpeed": "设置基础跑速。",
    "SetCanSellItems": "设置这个单位是否能出售物品。",
    "SetControllableByPlayer": "以玩家ID设置该单位的控制权。",
    "SetCursorCastTarget": "",
    "SetCursorPosition": "",
    "SetCursorTargetingNothing": "",
    "SetCustomHealthLabel": "",
    "SetDayTimeVisionRange": "设置基础的视间视野距离。",
    "SetDeathXP": "",
    "SetForceAttackTarget": "",
    "SetForceAttackTargetAlly": "",
    "SetHasInventory": "",
    "SetHullRadius": "设置该单位的碰撞半径。",
    "SetIdleAcquire": "",
    "SetInitialGoalEntity": "设置该单位的初始路径点。",
    "SetInitialGoalPosition": "",
    "SetMana": "设置该单位的魔力值。",
    "SetMaxMana": "",
    "SetMaximumGoldBounty": "设置该单位的最高赏金。",
    "SetMinimumGoldBounty": "设置该单位的最低赏金。",
    "SetModifierStackCount": "",
    "SetMoveCapability": "",
    "SetMustReachEachGoalEntity": "设置该单位是否要走访每个路径点。",
    "SetNeverMoveToClearSpace": "如果设置为True，则不会将该单位移动到净空的地方。",
    "SetNightTimeVisionRange": "设置基础夜间视野距离。",
    "SetOrigin": "设置单位位置。",
    "SetOriginalModel": "设置单位原模型。",
    "SetPhysicalArmorBaseValue": "设置基础护甲值。",
    "SetRangedProjectileName": "",
    "SetRevealRadius": "",
    "SetShouldDoFlyHeightVisual": "",
    "SetStolenScepter": "",
    "SetUnitCanRespawn": "",
    "SetUnitName": "",
    "ShouldIdleAcquire": "",
    "SpeakConcept": "",
    "SpendMana": "消耗魔力，可以用在技能消耗或使用物品。",
    "StartGesture": "向单位添加给定的动作。",
    "StartGestureFadeWithSequenceSettings": "",
    "StartGestureWithFade": "",
    "StartGestureWithPlaybackRate": "向单位添加给定的动作，带有自定义的动作速度。",
    "Stop": "使该单位暂停当前动作。",
    "StopFacing": "",
    "SwapAbilities": "交换两个技能的字段，并设置其是否生效。",
    "SwapItems": "交换两个物品的位置。",
    "TakeItem": "隐藏物品",
    "TimeUntilNextAttack": "",
    "TriggerModifierDodge": "",
    "TriggerSpellAbsorb": "判断传递的技能是否会触发该单位的技能吸收",
    "TriggerSpellReflect": "触发类似于清莲宝珠一样的效果。",
    "UnHideAbilityToSlot": "",
    "UnitCanRespawn": "",
    "WasKilledPassively": ""
  },
  "CInfoData": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "QueryColor": "查询该键值颜色数据",
    "QueryFloat": "查询该键值浮点（float）数据",
    "QueryInt": "查询该键值整型（int）数据",
    "QueryNumber": "查询该键值数值数据",
    "QueryString": "查询该键值字符串（string）数据",
    "QueryVector": "查询该键值矢量（vector）数据"
  },
  "CScriptParticleManager": {
    "__self": "粒子特效管理器",
    "__extends": "ParticleManager",
    "__globalAccessorVariable": "",
    "CreateParticle": "创建一个新的粒子特效",
    "CreateParticleForPlayer": "创建一个只对指定玩家播放的粒子特效",
    "CreateParticleForTeam": "创建一个仅为某方队伍播放的粒子特效。",
    "DestroyParticle": "清除粒子。",
    "GetParticleReplacement": "",
    "ReleaseParticleIndex": "施放指定粒子特效索引号",
    "SetParticleAlwaysSimulate": "",
    "SetParticleControl": "设置控制粒子特效的控制点数据",
    "SetParticleControlEnt": "",
    "SetParticleControlFallback": "",
    "SetParticleControlForward": "设置粒子的前进运动",
    "SetParticleControlOrientation": "设置粒子的三向运动。",
    "SetParticleControlOrientationFLU": "",
    "SetParticleFoWProperties": "",
    "SetParticleShouldCheckFoW": ""
  },
  "CDOTA_BaseNPC_NeutralItemStash": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": ""
  },
  "CEntities": {
    "__self": "实体管理工具",
    "__extends": "",
    "__globalAccessorVariable": "Entities",
    "CreateByClassname": "用类名来创建一个实体",
    "FindAllByClassname": "通过类名来寻找所有实体.返回被找到实体的数组或表.",
    "FindAllByClassnameWithin": "在一个半径范围内通过类名寻找实体.",
    "FindAllByModel": "通过模型名字来找到对象.",
    "FindAllByName": "通过名字来寻找所有实体.返回被找到实体的数组或表.",
    "FindAllByNameWithin": "在半径范围内通过名字来寻找实体.",
    "FindAllByTarget": "通过目标名字来寻找实体",
    "FindAllInSphere": "在(球形)范围内寻找实体",
    "FindByClassname": "通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByClassnameNearest": "在最近一个点通过类名寻找实体",
    "FindByClassnameWithin": "在半径范围内通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByModel": "通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByModelWithin": "在半径范围内通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByName": "通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByNameNearest": "通过名字寻找最近原点的实体",
    "FindByNameWithin": "在半径范围内通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindByTarget": "通过目标名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "FindInSphere": "在半径范围内寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找",
    "First": "在实体数组或表中开始一个迭代程序",
    "GetLocalPlayer": "",
    "Next": "从指定列表中的实体开始迭代"
  },
  "CDOTA_BaseNPC_Shop": {
    "__self": "商店类角色基类",
    "__extends": "CDOTA_BaseNPC_Building",
    "__globalAccessorVariable": "",
    "GetShopType": "",
    "SetShopType": ""
  },
  "SteamInfo": {
    "__self": "",
    "__extends": "",
    "__globalAccessorVariable": "",
    "IsPublicUniverse": ""
  },
  "CCustomGameEventManager": {
    "__self": "自定义事件管理器",
    "__extends": "",
    "__globalAccessorVariable": "CustomGameEventManager",
    "RegisterListener": "(stringEventName,funcCallbackFunction)-监听指定自定义事件，注册一个回调函数，在指定事件触发时被调用。返回一个监听者ID用来在以后取消监听。",
    "Send_ServerToAllClients": "",
    "Send_ServerToPlayer": "",
    "Send_ServerToTeam": "",
    "UnregisterListener": "(intListnerID)-对指定的监听者取消监听。"
  },
  "CDOTABaseGameMode": {
    "__self": "基础游戏模式工具",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "AddItemToCustomShop": "",
    "AddRealTimeCombatAnalyzerQuery": "",
    "AllocateFowBlockerRegion": "",
    "AreWeatherEffectsDisabled": "",
    "ClearBountyRunePickupFilter": "清除脚本过滤器--控制触发赏金符时的行为的",
    "ClearDamageFilter": "清除脚本过滤器--控制单位造成伤害",
    "ClearExecuteOrderFilter": "清除脚本过滤器--在单位捡起物品时生效的",
    "ClearHealingFilter": "",
    "ClearItemAddedToInventoryFilter": "清除脚本过滤器--在物品放入物品栏时生效的",
    "ClearModifierGainedFilter": "清除脚本过滤器--控制Modifier控制器的",
    "ClearModifyExperienceFilter": "清除脚本过滤器--控制单位的经验机制的",
    "ClearModifyGoldFilter": "清除脚本过滤器--控制英雄金钱机制的",
    "ClearRuneSpawnFilter": "清除脚本过滤器--控制神符刷新的",
    "ClearTrackingProjectileFilter": "清除脚本过滤器--控制追踪投射物的",
    "DisableClumpingBehaviorByDefault": "",
    "DisableHudFlip": "",
    "GetAlwaysShowPlayerInventory": "返回是否不论任何单位被选中，始终在HUD上显示英雄的物品库存",
    "GetAlwaysShowPlayerNames": "",
    "GetAnnouncerDisabled": "返回游戏内播音员是否被禁用",
    "GetCameraDistanceOverride": "返回是否设置摄像机距离Dota内的默认值为1134",
    "GetCustomAttributeDerivedStatValue": "",
    "GetCustomBackpackCooldownPercent": "",
    "GetCustomBackpackSwapCooldown": "",
    "GetCustomBuybackCooldownEnabled": "返回是否允许自定义的买活CD",
    "GetCustomBuybackCostEnabled": "返回是否允许自定义的买活金钱",
    "GetCustomDireScore": "",
    "GetCustomGlyphCooldown": "",
    "GetCustomHeroMaxLevel": "返回是否允许改变英雄的最高等级（默认25）",
    "GetCustomRadiantScore": "",
    "GetCustomScanCooldown": "",
    "GetEventGameSeed": "",
    "GetEventWindowStartTime": "",
    "GetFixedRespawnTime": "返回是否返回固定的复活时间",
    "GetFogOfWarDisabled": "返回是否关闭/开启战争迷雾",
    "GetGoldSoundDisabled": "返回是否开启/关闭获得金钱时的音效",
    "GetHUDVisible": "",
    "GetMaximumAttackSpeed": "获取单位的最大攻击速度",
    "GetMinimumAttackSpeed": "获取单位的最小攻击速度",
    "GetRecommendedItemsDisabled": "返回是否开启/关闭推荐出装在商店中的显示",
    "GetRespawnTimeScale": "",
    "GetStashPurchasingDisabled": "返回是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
    "GetStickyItemDisabled": "返回是否隐藏快速购买处的物品",
    "GetTopBarTeamValuesOverride": "返回是否覆盖游戏界面顶部的队伍比分",
    "GetTopBarTeamValuesVisible": "返回是否关闭/开启游戏界面顶部的队伍比分",
    "GetTowerBackdoorProtectionEnabled": "返回是否启用/禁用偷塔保护",
    "GetUseCustomHeroLevels": "返回自定义经验机制是否被使用",
    "IsBuybackEnabled": "返回是否启用/禁用买活",
    "IsDaynightCycleDisabled": "",
    "ListenForQueryFailed": "",
    "ListenForQueryProgressChanged": "",
    "ListenForQuerySucceeded": "",
    "RemoveItemFromCustomShop": "",
    "RemoveRealTimeCombatAnalyzerQuery": "",
    "SetAbilityTuningValueFilter": "设置一个过滤器，用来控制技能所用到的调整值(修改数据table并返回True来使用新值，,返回False来使用旧值)",
    "SetAllowNeutralItemDrops": "",
    "SetAlwaysShowPlayerInventory": "不论任何单位被选中，始终在HUD上显示英雄的物品库存",
    "SetAlwaysShowPlayerNames": "",
    "SetAnnouncerDisabled": "禁用播音员",
    "SetBotThinkingEnabled": "允许/禁止机器人思考，需要与DotaPvP高度相似的三路线地图、商店等",
    "SetBotsAlwaysPushWithHuman": "设置Bot玩家是否总是跟从人类玩家进行推进",
    "SetBotsInLateGame": "",
    "SetBotsMaxPushTier": "设置Bot玩家将推进到哪一级别的防御塔（-1代表不推进）",
    "SetBountyRunePickupFilter": "设置一个过滤器，用来控制触发赏金符时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetBountyRuneSpawnInterval": "",
    "SetBuybackEnabled": "完全允许/禁止买活",
    "SetCameraDistanceOverride": "设置默认的镜头距离Dota默认为1134",
    "SetCameraSmoothCountOverride": "",
    "SetCameraZRange": "",
    "SetCustomAttributeDerivedStatValue": "",
    "SetCustomBackpackCooldownPercent": "",
    "SetCustomBackpackSwapCooldown": "",
    "SetCustomBuybackCooldownEnabled": "开启该选项来允许自定义买活冷却时间",
    "SetCustomBuybackCostEnabled": "开启该选项来允许自定义买活花费",
    "SetCustomDireScore": "",
    "SetCustomGameForceHero": "强制单人游戏英雄的选择",
    "SetCustomGlyphCooldown": "",
    "SetCustomHeroMaxLevel": "定义最大英雄等级（默认为25）",
    "SetCustomRadiantScore": "",
    "SetCustomScanCooldown": "",
    "SetCustomTerrainWeatherEffect": "",
    "SetCustomXPRequiredToReachNextLevel": "定义英雄经验值表(table)",
    "SetDamageFilter": "设置一个过滤器，用来控制单位受到伤害时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetDaynightCycleDisabled": "",
    "SetDeathOverlayDisabled": "",
    "SetDefaultStickyItem": "",
    "SetDraftingBanningTimeOverride": "",
    "SetDraftingHeroPickSelectTimeOverride": "",
    "SetExecuteOrderFilter": "设置一个过滤器，用来控制单位捡起物品时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetFixedRespawnTime": "",
    "SetFogOfWarDisabled": "开关战争迷雾",
    "SetForceRightClickAttackDisabled": "",
    "SetFountainConstantManaRegen": "设定泉水给予的固定魔法的恢复速率(默认为-1)",
    "SetFountainPercentageHealthRegen": "设定泉水给予的的百分比生命恢复速率(默认为-1)",
    "SetFountainPercentageManaRegen": "设定泉水给予的百分比魔法恢复速率(默认为-1)",
    "SetFreeCourierModeEnabled": "",
    "SetFriendlyBuildingMoveToEnabled": "",
    "SetGoldSoundDisabled": "是否禁止获取金钱时的声音提示",
    "SetHUDVisible": "设置HUD元素是否可见",
    "SetHealingFilter": "",
    "SetHudCombatEventsDisabled": "",
    "SetItemAddedToInventoryFilter": "设置一个过滤器，用来控制物品被放入物品栏时的行为。",
    "SetKillableTombstones": "",
    "SetKillingSpreeAnnouncerDisabled": "",
    "SetLoseGoldOnDeath": "设置禁用死亡时损失金钱",
    "SetMaximumAttackSpeed": "设置单位的最大攻击速度",
    "SetMinimumAttackSpeed": "设置单位的最小攻击速度",
    "SetModifierGainedFilter": "设置一个过滤器，用来控制Modifier的获得,返回Flase来删除Modifier",
    "SetModifyExperienceFilter": "设置一个过滤器，用来控制英雄经验值被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetModifyGoldFilter": "设置一个过滤器，用来控制英雄的金钱被改变时的行为(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetNeutralItemHideUndiscoveredEnabled": "",
    "SetNeutralStashEnabled": "",
    "SetNeutralStashTeamViewOnlyEnabled": "",
    "SetOverrideSelectionEntity": "覆盖默认选择实体，替代所有玩家的英雄",
    "SetPauseEnabled": "",
    "SetPowerRuneSpawnInterval": "",
    "SetRandomHeroBonusItemGrantDisabled": "",
    "SetRecommendedItemsDisabled": "是否禁止显示商店中的推荐购买物品",
    "SetRemoveIllusionsOnDeath": "使幻象死亡时立即消失，而不是延迟数秒",
    "SetRespawnTimeScale": "",
    "SetRuneEnabled": "设定某种神符是否启用",
    "SetRuneSpawnFilter": "设置一个过滤器，用来控制神符的刷新(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetSelectionGoldPenaltyEnabled": "",
    "SetSendToStashEnabled": "",
    "SetStashPurchasingDisabled": "是否关闭/开启储藏处购买功能。如果该功能被关闭，英雄必须在商店范围内购买物品",
    "SetStickyItemDisabled": "隐藏快速购买处的物品",
    "SetTPScrollSlotItemOverride": "",
    "SetTopBarTeamValue": "设置顶端的队伍数值",
    "SetTopBarTeamValuesOverride": "是否覆盖顶端的队伍数值",
    "SetTopBarTeamValuesVisible": "开关顶端的队伍数值",
    "SetTowerBackdoorProtectionEnabled": "开关偷塔保护",
    "SetTrackingProjectileFilter": "设置一个过滤器，用来控制追踪投射物(改变数据表并返回True来使用新值,返回False来取消事件)",
    "SetUnseenFogOfWarEnabled": "启用/禁用战争迷雾。启用时，玩家从未探测过的区域将会完全被战争迷雾掩盖",
    "SetUseCustomHeroLevels": "开关自定义英雄英雄经验表，该表必须提前被定义",
    "SetUseDefaultDOTARuneSpawnLogic": "",
    "SetWeatherEffectsDisabled": ""
  },
  "CDOTA_Modifier_Lua": {
    "__self": "脚本驱动的修改器基类",
    "__extends": "CDOTA_Buff",
    "__globalAccessorVariable": "",
    "AllowIllusionDuplicate": "幻象是否继承这个Mordifier",
    "CanParentBeAutoAttacked": "",
    "DestroyOnExpire": "Buff是否会在Mordifier到期时被移除",
    "GetAttributes": "返回被应用到Mordifier上的属性类别",
    "GetAuraDuration": "",
    "GetAuraEntityReject": "返回实体是否在某些条件下获得光环",
    "GetAuraRadius": "返回光环半径",
    "GetAuraSearchFlags": "返回光环施加效果时的Flag",
    "GetAuraSearchTeam": "返回光环效果将施加的队伍",
    "GetAuraSearchType": "返回光环效果将施加的单位类型",
    "GetEffectAttachType": "通过GetEffectName获取将添加的粒子特效类型",
    "GetEffectName": "返回Mordifier运行时所产生的粒子特效的名称",
    "GetHeroEffectName": "返回Mordifier运行时所产生的英雄粒子特效的名称",
    "GetModifierAura": "返回这个Mordifier将施加的二级Mordifier名称(如果一级Mordifier是光环)",
    "GetPriority": "",
    "GetStatusEffectName": "返回Mordifier运行时所产生的状态粒子特效的名称",
    "GetTexture": "返回Mordifier的图标",
    "HeroEffectPriority": "英雄特效的显示优先级(更高的数字在Buff栏中被优先显示)",
    "IsAura": "这个Mordifier是否是光环",
    "IsAuraActiveOnDeath": "返回携带单位死后其光环是否有效",
    "IsDebuff": "返回这个Mordifier是否是Debuff",
    "IsHidden": "返回这个Mordifier是否在状态栏中显示",
    "IsPermanent": "",
    "IsPurgable": "返回这个Mordifier是否能被清除",
    "IsPurgeException": "返回这个Mordifier是否能被强力驱散清除",
    "IsStunDebuff": "返回这个Mordifier是否是眩晕类Debuff",
    "OnCreated": "在Mordifier被创建时运行",
    "OnDestroy": "在Mordifier清楚时运行",
    "OnIntervalThink": "当计时器间隔开始时",
    "OnRefresh": "当Mordifier被刷新时运行",
    "OnRemoved": "",
    "OnStackCountChanged": "",
    "RemoveOnDeath": "返回持有者死亡时Mordifier是否被移除",
    "SetHasCustomTransmitterData": "",
    "ShouldUseOverheadOffset": "",
    "StatusEffectPriority": "状态特效的显示优先级(更高的数字在Buff栏中被优先显示)"
  },
  "CDotaSubquestBase": {
    "__self": "",
    "__extends": "CBaseEntity",
    "__globalAccessorVariable": "",
    "CompleteSubquest": "完成子任务",
    "SetTextReplaceString": "设置该任务的文本取代字符串",
    "SetTextReplaceValue": "设置任务数值"
  },
  "CBaseEntity": {
    "__self": "实体的基类",
    "__extends": "CEntityInstance",
    "__globalAccessorVariable": "",
    "AddEffects": "",
    "ApplyAbsVelocityImpulse": "添加一个速度冲击",
    "ApplyLocalAngularVelocityImpulse": "添加一个角速度的冲击",
    "Attribute_GetFloatValue": "",
    "Attribute_GetIntValue": "",
    "Attribute_SetFloatValue": "",
    "Attribute_SetIntValue": "",
    "DeleteAttribute": "",
    "EmitSound": "播放这个实体的声音。",
    "EmitSoundParams": "播放/修改这个实体的声音.当音调,音量或播放时间大于零时改变声音",
    "EyeAngles": "获得这个实体的视角qangles",
    "EyePosition": "获得指向视角位置的矢量,位置为绝对坐标",
    "FirstMoveChild": "",
    "FollowEntity": "",
    "GatherCriteria": "返回一个表包含用在这个实体的判定的标准.这个表等同于传入脚本方法的调用.",
    "GetAbsOrigin": "",
    "GetAbsScale": "",
    "GetAngles": "",
    "GetAnglesAsVector": "获得实体的颠簸,偏航,摇晃的矢量",
    "GetAngularVelocity": "获得当前角速度,返回颠簸,偏航,摇晃的矢量",
    "GetBaseVelocity": "获得基础速度",
    "GetBoundingMaxs": "获得一个包含最大范围,以物体为中心的矢量",
    "GetBoundingMins": "获得一个包含最小范围,以物体为中心的矢量",
    "GetBounds": "获得一个以物体为中心,包含“Mins”和“Maxs”矢量的表",
    "GetCenter": "获得指向物体中心的矢量,以绝对坐标的形式",
    "GetChildren": "获得继承这个实体的实体",
    "GetContext": "GetContext(name):检查一个对象的状态然后返回对象是否可用.可能返回string,float,或nil(如果对象没有找到)",
    "GetForwardVector": "获得这个实体的前进矢量",
    "GetHealth": "",
    "GetLocalAngles": "",
    "GetLocalAngularVelocity": "可能为当前角速度",
    "GetLocalOrigin": "",
    "GetLocalScale": "",
    "GetLocalVelocity": "获得实体相对速度",
    "GetMass": "",
    "GetMaxHealth": "",
    "GetModelName": "获得模型的名字",
    "GetMoveParent": "如果在有继承对象,恢复实体所继承的对象",
    "GetOrigin": "",
    "GetOwner": "获得实体的所有者",
    "GetOwnerEntity": "获得拥有者的实体,如果有的话",
    "GetRightVector": "获得实体的右方矢量",
    "GetRootMoveParent": "如果在继承关系里,在继承关系中寻找所继承的根源对象",
    "GetSoundDuration": "返回声音的播放时间.传入声音名字和可选的应用模型名字.",
    "GetSpawnGroupHandle": "",
    "GetTeam": "",
    "GetTeamNumber": "获取此实体的队伍编号",
    "GetUpVector": "获得实体的上方矢量",
    "GetVelocity": "",
    "HasAttribute": "",
    "IsAlive": "",
    "IsNPC": "",
    "IsPlayer": "是否为玩家的实体",
    "Kill": "",
    "NextMovePeer": "",
    "OverrideFriction": "暂时重设阻力的持续时间和值",
    "PrecacheScriptSound": "预载声音文件",
    "RemoveEffects": "",
    "SetAbsAngles": "",
    "SetAbsOrigin": "设置绝对来源",
    "SetAbsScale": "",
    "SetAngles": "设置实体的颠簸,偏航,摇晃",
    "SetAngularVelocity": "设置当前角速度,使用实数颠簸,偏航,摇晃速度",
    "SetConstraint": "",
    "SetContext": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个字符串.持续一段时间.(0代表永久)",
    "SetContextNum": "SetContext(名字,值,持续时间):存储任何在实体对话内容里的配对值.值是一个数字(int或者float).持续一段时间.(0代表永久)",
    "SetContextThink": "在这个实体上设置一个计时器（a:标示字符,b:执行函数c:延迟执行的时间）",
    "SetEntityName": "",
    "SetForwardVector": "设置实体的方向为前进矢量",
    "SetFriction": "设置玩家阻力,无视物体",
    "SetGravity": "设置玩家引力,无视物体",
    "SetHealth": "",
    "SetLocalAngles": "",
    "SetLocalOrigin": "",
    "SetLocalScale": "",
    "SetMass": "",
    "SetMaxHealth": "",
    "SetOrigin": "",
    "SetOwner": "设定实体的所有者",
    "SetParent": "设定这个实体的所继承的父实体",
    "SetTeam": "",
    "SetVelocity": "",
    "StopSound": "停止播放这个实体的特定的声音",
    "TakeDamage": "将损坏应用于此实体。使用CreateDamageInfo()创建一个damageinfo对象。",
    "TransformPointEntityToWorld": "",
    "TransformPointWorldToEntity": "",
    "Trigger": "触发这个实体的触发器",
    "ValidatePrivateScriptScope": ""
  },
  "CDOTATutorial": {
    "__self": "",
    "__extends": "Tutorial",
    "__globalAccessorVariable": "",
    "AddBot": "",
    "AddQuest": "",
    "AddShopWhitelistItem": "",
    "CompleteQuest": "",
    "CreateLocationTask": "",
    "EnableCreepAggroViz": "",
    "EnablePlayerOffscreenTip": "",
    "EnableTowerAggroViz": "",
    "FinishTutorial": "",
    "ForceGameStart": "",
    "GetTimeFrozen": "",
    "IsItemInWhiteList": "",
    "RemoveShopWhitelistItem": "",
    "SelectHero": "",
    "SelectPlayerTeam": "",
    "SetItemGuide": "",
    "SetOrModifyPlayerGold": "",
    "SetQuickBuy": "",
    "SetShopOpen": "",
    "SetTimeFrozen": "",
    "SetTutorialConvar": "",
    "SetTutorialUI": "",
    "SetWhiteListEnabled": "",
    "StartTutorialMode": "",
    "UpgradePlayerAbility": ""
  }
}
