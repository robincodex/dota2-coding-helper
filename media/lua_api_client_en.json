{
  "CDOTAGameManager":[{
      "desc":"Get the hero unit ",
      "func":"( string_1 )",
      "name":"GetHeroDataByName_Script",
      "return":"table"
    },{
      "desc":"Get the hero ID given the hero name.",
      "func":"( string_1 )",
      "name":"GetHeroIDByName",
      "return":"int"
    },{
      "desc":"Get the hero name given a hero ID.",
      "func":"( int_1 )",
      "name":"GetHeroNameByID",
      "return":"string"
    },{
      "desc":"Get the hero name given a unit name.",
      "func":"( string_1 )",
      "name":"GetHeroNameForUnitName",
      "return":"string"
    },{
      "desc":"Get the hero unit name given the hero ID.",
      "func":"( int_1 )",
      "name":"GetHeroUnitNameByID",
      "return":"string"
    }],
  "C_BaseEntity":[{
      "desc":"",
      "func":"()",
      "name":"GetAbsOrigin",
      "return":"Vector"
    },{
      "desc":"",
      "func":"()",
      "name":"GetTeamNumber",
      "return":"int"
    },{
      "desc":"Set a think function on this entity.",
      "func":"( string pszContextName, handle hThinkFunc, float flInterval )",
      "name":"SetContextThink",
      "return":"void"
    }],
  "Globals":[{
      "desc":"Returns the number of degrees difference between two yaw angles",
      "func":"( float_1, float_2 )",
      "name":"AngleDiff",
      "return":"float"
    },{
      "desc":"AppendToLogFile is deprecated. Print to the console for logging instead.",
      "func":"( string_1, string_2 )",
      "name":"AppendToLogFile",
      "return":"void"
    },{
      "desc":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis",
      "func":"( Vector_1, float_2 )",
      "name":"AxisAngleToQuaternion",
      "return":"Quaternion"
    },{
      "desc":"Compute the closest point on the OBB of an entity.",
      "func":"( handle_1, Vector_2 )",
      "name":"CalcClosestPointOnEntityOBB",
      "return":"Vector"
    },{
      "desc":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping.",
      "func":"( handle_1, handle_2 )",
      "name":"CalcDistanceBetweenEntityOBB",
      "return":"float"
    },{
      "desc":"",
      "func":"( Vector_1, Vector_2, Vector_3 )",
      "name":"CalcDistanceToLineSegment2D",
      "return":"float"
    },{
      "desc":"Create all I/O events for a particular entity",
      "func":"( ehandle_1 )",
      "name":"CancelEntityIOEvents",
      "return":"void"
    },{
      "desc":"Pass table - Inputs: entity, effect",
      "func":"( handle_1 )",
      "name":"CreateEffect",
      "return":"bool"
    },{
      "desc":"Create an HTTP request.",
      "func":"( string_1, string_2 )",
      "name":"CreateHTTPRequest",
      "return":"handle"
    },{
      "desc":"Create an HTTP request.",
      "func":"( string_1, string_2 )",
      "name":"CreateHTTPRequestScriptVM",
      "return":"handle"
    },{
      "desc":"(vector,vector) cross product between two vectors",
      "func":"( Vector_1, Vector_2 )",
      "name":"CrossVectors",
      "return":"Vector"
    },{
      "desc":"Breaks in the debugger",
      "func":"()",
      "name":"DebugBreak",
      "return":"void"
    },{
      "desc":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )",
      "func":"( Vector_1, Vector_2, Vector_3, int_4, int_5, int_6, int_7, float_8 )",
      "name":"DebugDrawBox",
      "return":"void"
    },{
      "desc":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)",
      "func":"( Vector_1, Vector_2, Vector_3, Vector_4, Vector_5, float_6, float_7 )",
      "name":"DebugDrawBoxDirection",
      "return":"void"
    },{
      "desc":"Draw a debug circle (center, vRgb, a, rad, ztest, duration)",
      "func":"( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
      "name":"DebugDrawCircle",
      "return":"void"
    },{
      "desc":"Try to clear all the debug overlay info",
      "func":"()",
      "name":"DebugDrawClear",
      "return":"void"
    },{
      "desc":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration)",
      "func":"( Vector_1, Vector_2, int_3, int_4, int_5, bool_6, float_7 )",
      "name":"DebugDrawLine",
      "return":"void"
    },{
      "desc":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)",
      "func":"( Vector_1, Vector_2, Vector_3, bool_4, float_5 )",
      "name":"DebugDrawLine_vCol",
      "return":"void"
    },{
      "desc":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)",
      "func":"( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9 )",
      "name":"DebugDrawScreenTextLine",
      "return":"void"
    },{
      "desc":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration)",
      "func":"( Vector_1, Vector_2, float_3, float_4, bool_5, float_6 )",
      "name":"DebugDrawSphere",
      "return":"void"
    },{
      "desc":"Draw text in 3d (origin, text, bViewCheck, duration)",
      "func":"( Vector_1, string_2, bool_3, float_4 )",
      "name":"DebugDrawText",
      "return":"void"
    },{
      "desc":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)",
      "func":"( float_1, float_2, int_3, string_4, int_5, int_6, int_7, int_8, float_9, string_10, int_11, bool_12 )",
      "name":"DebugScreenTextPretty",
      "return":"void"
    },{
      "desc":"Execute a script (internal)",
      "func":"( string_1, handle_2 )",
      "name":"DoIncludeScript",
      "return":"bool"
    },{
      "desc":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.",
      "func":"( bool_1, string_2 )",
      "name":"DoScriptAssert",
      "return":"void"
    },{
      "desc":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.",
      "func":"( string_1 )",
      "name":"DoUniqueString",
      "return":"string"
    },{
      "desc":"Play named sound on Entity",
      "func":"( string_1, handle_2 )",
      "name":"EmitSoundOn",
      "return":"void"
    },{
      "desc":"Play named sound only on the client for the passed in player",
      "func":"( string_1, handle_2 )",
      "name":"EmitSoundOnClient",
      "return":"void"
    },{
      "desc":"Turn an entity index integer to an HScript representing that entity's script instance.",
      "func":"( int_1 )",
      "name":"EntIndexToHScript",
      "return":"handle"
    },{
      "desc":"Smooth curve decreasing slower as it approaches zero",
      "func":"( float_1, float_2, float_3 )",
      "name":"ExponentialDecay",
      "return":"float"
    },{
      "desc":"Fire Entity's Action Input w/no data",
      "func":"( ehandle_1, string_2 )",
      "name":"FireEntityIOInputNameOnly",
      "return":"void"
    },{
      "desc":"Fire Entity's Action Input with passed String - you own the memory",
      "func":"( ehandle_1, string_2, string_3 )",
      "name":"FireEntityIOInputString",
      "return":"void"
    },{
      "desc":"Fire Entity's Action Input with passed Vector - you own the memory",
      "func":"( ehandle_1, string_2, Vector_3 )",
      "name":"FireEntityIOInputVec",
      "return":"void"
    },{
      "desc":"Fire a game event.",
      "func":"( string_1, handle_2 )",
      "name":"FireGameEvent",
      "return":"void"
    },{
      "desc":"Fire a game event without broadcasting to the client.",
      "func":"( string_1, handle_2 )",
      "name":"FireGameEventLocal",
      "return":"void"
    },{
      "desc":"Get the time spent on the server in the last frame",
      "func":"()",
      "name":"FrameTime",
      "return":"float"
    },{
      "desc":"Returns the engines current frame count",
      "func":"()",
      "name":"GetFrameCount",
      "return":"int"
    },{
      "desc":"Get the local player on a listen server.",
      "func":"()",
      "name":"GetListenServerHost",
      "return":"handle"
    },{
      "desc":"Get the local player ID.",
      "func":"()",
      "name":"GetLocalPlayerID",
      "return":"int"
    },{
      "desc":"Get the local player team.",
      "func":"()",
      "name":"GetLocalPlayerTeam",
      "return":"int"
    },{
      "desc":"Get the name of the map.",
      "func":"()",
      "name":"GetMapName",
      "return":"string"
    },{
      "desc":"Get the longest delay for all events attached to an output",
      "func":"( ehandle_1, string_2 )",
      "name":"GetMaxOutputDelay",
      "return":"float"
    },{
      "desc":"Get Angular Velocity for VPHYS or normal object. Returns a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
      "func":"( handle_1 )",
      "name":"GetPhysAngularVelocity",
      "return":"Vector"
    },{
      "desc":"Get Velocity for VPHYS or normal object",
      "func":"( handle_1 )",
      "name":"GetPhysVelocity",
      "return":"Vector"
    },{
      "desc":"InitLogFile is deprecated. Print to the console for logging instead.",
      "func":"( string_1, string_2 )",
      "name":"InitLogFile",
      "return":"void"
    },{
      "desc":"Returns true if this is lua running from the client.dll.",
      "func":"()",
      "name":"IsClient",
      "return":"bool"
    },{
      "desc":"Returns true if this server is a dedicated server.",
      "func":"()",
      "name":"IsDedicatedServer",
      "return":"bool"
    },{
      "desc":"Returns true if this is lua running within tools mode.",
      "func":"()",
      "name":"IsInToolsMode",
      "return":"bool"
    },{
      "desc":"Returns true if the entity is valid and marked for deletion.",
      "func":"( handle_1 )",
      "name":"IsMarkedForDeletion",
      "return":"bool"
    },{
      "desc":"Returns true if this is lua running from the server.dll.",
      "func":"()",
      "name":"IsServer",
      "return":"bool"
    },{
      "desc":"Checks to see if the given hScript is a valid entity",
      "func":"( handle_1 )",
      "name":"IsValidEntity",
      "return":"bool"
    },{
      "desc":"(vector,vector,float) lerp between two vectors by a float factor returning new vector",
      "func":"( Vector_1, Vector_2, float_3 )",
      "name":"LerpVectors",
      "return":"Vector"
    },{
      "desc":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType).",
      "func":"( string_1, string_2, int_3 )",
      "name":"LinkLuaModifier",
      "return":"void"
    },{
      "desc":"Register as a listener for a game event from script.",
      "func":"( string_1, handle_2, handle_3 )",
      "name":"ListenToGameEvent",
      "return":"int"
    },{
      "desc":"Creates a table from the specified keyvalues text file",
      "func":"( string_1 )",
      "name":"LoadKeyValues",
      "return":"table"
    },{
      "desc":"Creates a table from the specified keyvalues string",
      "func":"( string_1 )",
      "name":"LoadKeyValuesFromString",
      "return":"table"
    },{
      "desc":"Get the current local time",
      "func":"()",
      "name":"LocalTime",
      "return":"table"
    },{
      "desc":"Checks to see if the given hScript is a valid entity",
      "func":"( string_1 )",
      "name":"MakeStringToken",
      "return":"int"
    },{
      "desc":"Print a message",
      "func":"( string_1 )",
      "name":"Msg",
      "return":"void"
    },{
      "desc":"Get a script instance of a player by index.",
      "func":"( int_1 )",
      "name":"PlayerInstanceFromIndex",
      "return":"handle"
    },{
      "desc":"Precache an entity from KeyValues in table",
      "func":"( string_1, handle_2, handle_3 )",
      "name":"PrecacheEntityFromTable",
      "return":"void"
    },{
      "desc":"Precache a list of entity KeyValues tables",
      "func":"( handle_1, handle_2 )",
      "name":"PrecacheEntityListFromTable",
      "return":"void"
    },{
      "desc":"Print a console message with a linked console command",
      "func":"( string_1, string_2 )",
      "name":"PrintLinkedConsoleMessage",
      "return":"void"
    },{
      "desc":"Get a random float within a range",
      "func":"( float_1, float_2 )",
      "name":"RandomFloat",
      "return":"float"
    },{
      "desc":"Get a random int within a range",
      "func":"( int_1, int_2 )",
      "name":"RandomInt",
      "return":"int"
    },{
      "desc":"Create a C proxy for a script-based spawn group filter",
      "func":"( string_1 )",
      "name":"RegisterSpawnGroupFilterProxy",
      "return":"void"
    },{
      "desc":"Reloads the MotD file",
      "func":"()",
      "name":"ReloadMOTD",
      "return":"void"
    },{
      "desc":"Remove the C proxy for a script-based spawn group filter",
      "func":"( string_1 )",
      "name":"RemoveSpawnGroupFilterProxy",
      "return":"void"
    },{
      "desc":"Rotate a QAngle by another QAngle.",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotateOrientation",
      "return":"QAngle"
    },{
      "desc":"Rotate a Vector around a point.",
      "func":"( Vector_1, QAngle_2, Vector_3 )",
      "name":"RotatePosition",
      "return":"Vector"
    },{
      "desc":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis",
      "func":"( Quaternion_1, Vector_2, float_3 )",
      "name":"RotateQuaternionByAxisAngle",
      "return":"Quaternion"
    },{
      "desc":"Find the delta between two QAngles.",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotationDelta",
      "return":"QAngle"
    },{
      "desc":"converts delta QAngle to an angular velocity Vector",
      "func":"( QAngle_1, QAngle_2 )",
      "name":"RotationDeltaAsAngularVelocity",
      "return":"Vector"
    },{
      "desc":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake",
      "func":"( Vector_1, float_2, float_3, float_4, float_5, int_6, bool_7 )",
      "name":"ScreenShake",
      "return":"void"
    },{
      "desc":"Send a string to the console as a client command",
      "func":"( string_1 )",
      "name":"SendToConsole",
      "return":"void"
    },{
      "desc":"Sets an opvar value for all players",
      "func":"( string_1, string_2, string_3, float_4 )",
      "name":"SetOpvarFloatAll",
      "return":"void"
    },{
      "desc":"Sets an opvar value for a single player",
      "func":"( string_1, string_2, string_3, float_4, handle_5 )",
      "name":"SetOpvarFloatPlayer",
      "return":"void"
    },{
      "desc":"Set Angular Velocity for VPHYS or normal object, from a vector of the axis of rotation, multiplied by the degrees of rotation per second.",
      "func":"( handle_1, Vector_2 )",
      "name":"SetPhysAngularVelocity",
      "return":"void"
    },{
      "desc":"Set the current quest name.",
      "func":"( string_1 )",
      "name":"SetQuestName",
      "return":"void"
    },{
      "desc":"Set the current quest phase.",
      "func":"( int_1 )",
      "name":"SetQuestPhase",
      "return":"void"
    },{
      "desc":"Set rendering on/off for an ehandle",
      "func":"( ehandle_1, bool_2 )",
      "name":"SetRenderingEnabled",
      "return":"void"
    },{
      "desc":"Synchronously spawns a single entity from a table",
      "func":"( string_1, handle_2 )",
      "name":"SpawnEntityFromTableSynchronous",
      "return":"handle"
    },{
      "desc":"Hierarchically spawn an entity group from a set of spawn tables.",
      "func":"( handle_1, bool_2, handle_3 )",
      "name":"SpawnEntityGroupFromTable",
      "return":"bool"
    },{
      "desc":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete",
      "func":"( handle_1, handle_2 )",
      "name":"SpawnEntityListFromTableAsynchronous",
      "return":"int"
    },{
      "desc":"Synchronously spawn an entity group from a list of spawn tables.",
      "func":"( handle_1 )",
      "name":"SpawnEntityListFromTableSynchronous",
      "return":"handle"
    },{
      "desc":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]",
      "func":"( Quaternion_1, Quaternion_2, float_3 )",
      "name":"SplineQuaternions",
      "return":"Quaternion"
    },{
      "desc":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]",
      "func":"( Vector_1, Vector_2, float_3 )",
      "name":"SplineVectors",
      "return":"Vector"
    },{
      "desc":"Start a sound event",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEvent",
      "return":"void"
    },{
      "desc":"Start a sound event from position",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPosition",
      "return":"void"
    },{
      "desc":"Start a sound event from position with reliable delivery",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPositionReliable",
      "return":"void"
    },{
      "desc":"Start a sound event from position with optional delivery",
      "func":"( string_1, Vector_2 )",
      "name":"StartSoundEventFromPositionUnreliable",
      "return":"void"
    },{
      "desc":"Start a sound event with reliable delivery",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEventReliable",
      "return":"void"
    },{
      "desc":"Start a sound event with optional delivery",
      "func":"( string_1, handle_2 )",
      "name":"StartSoundEventUnreliable",
      "return":"void"
    },{
      "desc":"Pass entity and effect name",
      "func":"( handle_1, string_2 )",
      "name":"StopEffect",
      "return":"void"
    },{
      "desc":"Stop listening to all game events within a specific context.",
      "func":"( handle_1 )",
      "name":"StopListeningToAllGameEvents",
      "return":"void"
    },{
      "desc":"Stop listening to a particular game event.",
      "func":"( int_1 )",
      "name":"StopListeningToGameEvent",
      "return":"bool"
    },{
      "desc":"Stops a sound event with optional delivery",
      "func":"( string_1, handle_2 )",
      "name":"StopSoundEvent",
      "return":"void"
    },{
      "desc":"Stop named sound on Entity",
      "func":"( string_1, handle_2 )",
      "name":"StopSoundOn",
      "return":"void"
    },{
      "desc":"Get the current server time",
      "func":"()",
      "name":"Time",
      "return":"float"
    },{
      "desc":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal",
      "func":"( handle_1 )",
      "name":"TraceCollideable",
      "return":"bool"
    },{
      "desc":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
      "func":"( handle_1 )",
      "name":"TraceHull",
      "return":"bool"
    },{
      "desc":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
      "func":"( handle_1 )",
      "name":"TraceLine",
      "return":"bool"
    },{
      "desc":"Removes the specified entity",
      "func":"( handle_1 )",
      "name":"UTIL_Remove",
      "return":"void"
    },{
      "desc":"Immediately removes the specified entity",
      "func":"( handle_1 )",
      "name":"UTIL_RemoveImmediate",
      "return":"void"
    },{
      "desc":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam",
      "func":"( handle_1, int_2, int_3, int_4, int_5 )",
      "name":"UnitFilter",
      "return":"int"
    },{
      "desc":"Unload a spawn group by name",
      "func":"( string_1 )",
      "name":"UnloadSpawnGroup",
      "return":"void"
    },{
      "desc":"Unload a spawn group by handle",
      "func":"( int_1 )",
      "name":"UnloadSpawnGroupByHandle",
      "return":"void"
    },{
      "desc":"Get Qangles (with no roll) for a Vector.",
      "func":"( Vector_1 )",
      "name":"VectorToAngles",
      "return":"QAngle"
    },{
      "desc":"Print a warning",
      "func":"( string_1 )",
      "name":"Warning",
      "return":"void"
    },{
      "desc":"Gets the value of the given cvar, as a float.",
      "func":"( string_1 )",
      "name":"cvar_getf",
      "return":"float"
    },{
      "desc":"Sets the value of the given cvar, as a float.",
      "func":"( string_1, float_2 )",
      "name":"cvar_setf",
      "return":"bool"
    },{
      "desc":"Add a rule to the decision database.",
      "func":"( handle_1 )",
      "name":"rr_AddDecisionRule",
      "return":"bool"
    },{
      "desc":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)",
      "func":"( handle_1, handle_2 )",
      "name":"rr_CommitAIResponse",
      "return":"bool"
    },{
      "desc":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }.",
      "func":"()",
      "name":"rr_GetResponseTargets",
      "return":"handle"
    },{
      "desc":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found).",
      "func":"( handle_1, handle_2, handle_3 )",
      "name":"rr_QueryBestResponse",
      "return":"bool"
    }],
  "C_DOTABaseAbility":[{
      "desc":"",
      "func":"()",
      "name":"GetBehavior",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCaster",
      "return":"handle"
    },{
      "desc":"Return the level of the ability",
      "func":"()",
      "name":"GetLevel",
      "return":"int"
    },{
      "desc":"Gets a value from this ability's special value block for its current level.",
      "func":"( string szName )",
      "name":"GetSpecialValueFor",
      "return":"table"
    },{
      "desc":"Whether or not this ability is toggled.",
      "func":"()",
      "name":"GetToggleState",
      "return":"bool"
    },{
      "desc":"Whether or not this ability is an item.",
      "func":"()",
      "name":"IsItem",
      "return":"bool"
    }],
  "C_DOTA_Modifier_Lua":[{
      "desc":"True/false if this modifier is active on illusions.",
      "func":"()",
      "name":"AllowIllusionDuplicate",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"CanParentBeAutoAttacked",
      "return":"bool"
    },{
      "desc":"True/false if this buff is removed when the duration expires.",
      "func":"()",
      "name":"DestroyOnExpire",
      "return":"bool"
    },{
      "desc":"Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
      "func":"()",
      "name":"GetAttributes",
      "return":"int"
    },{
      "desc":"Returns aura stickiness",
      "func":"()",
      "name":"GetAuraDuration",
      "return":"float"
    },{
      "desc":"Return true/false if this entity should receive the aura under specific conditions",
      "func":"( handle hEntity )",
      "name":"GetAuraEntityReject",
      "return":"bool"
    },{
      "desc":"Return the range around the parent this aura tries to apply its buff.",
      "func":"()",
      "name":"GetAuraRadius",
      "return":"int"
    },{
      "desc":"Return the unit flags this aura respects when placing buffs.",
      "func":"()",
      "name":"GetAuraSearchFlags",
      "return":"int"
    },{
      "desc":"Return the teams this aura applies its buff to.",
      "func":"()",
      "name":"GetAuraSearchTeam",
      "return":"int"
    },{
      "desc":"Return the unit classifications this aura applies its buff to.",
      "func":"()",
      "name":"GetAuraSearchType",
      "return":"int"
    },{
      "desc":"Return the attach type of the particle system from GetEffectName.",
      "func":"()",
      "name":"GetEffectAttachType",
      "return":"int"
    },{
      "desc":"Return the name of the particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetEffectName",
      "return":"string"
    },{
      "desc":"Return the name of the hero effect particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetHeroEffectName",
      "return":"string"
    },{
      "desc":"The name of the secondary modifier that will be applied by this modifier (if it is an aura).",
      "func":"()",
      "name":"GetModifierAura",
      "return":"string"
    },{
      "desc":"Return the priority order this modifier will be applied over others.",
      "func":"()",
      "name":"GetPriority",
      "return":"int"
    },{
      "desc":"Return the name of the status effect particle system that is created while this modifier is active.",
      "func":"()",
      "name":"GetStatusEffectName",
      "return":"string"
    },{
      "desc":"Return the name of the buff icon to be shown for this modifier.",
      "func":"()",
      "name":"GetTexture",
      "return":"string"
    },{
      "desc":"Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
      "func":"()",
      "name":"HeroEffectPriority",
      "return":"int"
    },{
      "desc":"True/false if this modifier is an aura.",
      "func":"()",
      "name":"IsAura",
      "return":"bool"
    },{
      "desc":"True/false if this aura provides buffs when the parent is dead.",
      "func":"()",
      "name":"IsAuraActiveOnDeath",
      "return":"bool"
    },{
      "desc":"True/false if this modifier should be displayed as a debuff.",
      "func":"()",
      "name":"IsDebuff",
      "return":"bool"
    },{
      "desc":"True/false if this modifier should be displayed on the buff bar.",
      "func":"()",
      "name":"IsHidden",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPermanent",
      "return":"bool"
    },{
      "desc":"True/false if this modifier can be purged.",
      "func":"()",
      "name":"IsPurgable",
      "return":"bool"
    },{
      "desc":"True/false if this modifier can be purged by strong dispels.",
      "func":"()",
      "name":"IsPurgeException",
      "return":"bool"
    },{
      "desc":"True/false if this modifier is considered a stun for purge reasons.",
      "func":"()",
      "name":"IsStunDebuff",
      "return":"bool"
    },{
      "desc":"Runs when the modifier is created.",
      "func":"( handle table )",
      "name":"OnCreated",
      "return":"void"
    },{
      "desc":"Runs when the modifier is destroyed (after unit loses modifier).",
      "func":"()",
      "name":"OnDestroy",
      "return":"void"
    },{
      "desc":"Runs when the think interval occurs.",
      "func":"()",
      "name":"OnIntervalThink",
      "return":"void"
    },{
      "desc":"Runs when the modifier is refreshed.",
      "func":"( handle table )",
      "name":"OnRefresh",
      "return":"void"
    },{
      "desc":"Runs when the modifier is destroyed (before unit loses modifier).",
      "func":"()",
      "name":"OnRemoved",
      "return":"void"
    },{
      "desc":"Runs when stack count changes (param is old count).",
      "func":"( int iStackCount )",
      "name":"OnStackCountChanged",
      "return":"void"
    },{
      "desc":"True/false if this modifier is removed when the parent dies.",
      "func":"()",
      "name":"RemoveOnDeath",
      "return":"bool"
    },{
      "desc":"Apply the overhead offset to the attached effect.",
      "func":"()",
      "name":"ShouldUseOverheadOffset",
      "return":"bool"
    },{
      "desc":"Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
      "func":"()",
      "name":"StatusEffectPriority",
      "return":"int"
    }],
  "GlobalSys":[{
      "desc":"CommandLineCheck(name) : returns true if the command line param was used, otherwise false.",
      "func":"( string_1 )",
      "name":"CommandLineCheck",
      "return":"table"
    },{
      "desc":"CommandLineFloat(name) : returns the command line param as a float.",
      "func":"( string_1, float_2 )",
      "name":"CommandLineFloat",
      "return":"table"
    },{
      "desc":"CommandLineInt(name) : returns the command line param as an int.",
      "func":"( string_1, int_2 )",
      "name":"CommandLineInt",
      "return":"table"
    },{
      "desc":"CommandLineStr(name) : returns the command line param as a string.",
      "func":"( string_1, string_2 )",
      "name":"CommandLineStr",
      "return":"table"
    }],
  "Convars":[{
      "desc":"GetBool(name) : returns the convar as a boolean flag.",
      "func":"( string_1 )",
      "name":"GetBool",
      "return":"table"
    },{
      "desc":"GetCommandClient() : returns the player who issued this console command.",
      "func":"()",
      "name":"GetCommandClient",
      "return":"handle"
    },{
      "desc":"GetDOTACommandClient() : returns the DOTA player who issued this console command.",
      "func":"()",
      "name":"GetDOTACommandClient",
      "return":"handle"
    },{
      "desc":"GetFloat(name) : returns the convar as a float. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetFloat",
      "return":"table"
    },{
      "desc":"GetInt(name) : returns the convar as an int. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetInt",
      "return":"table"
    },{
      "desc":"GetStr(name) : returns the convar as a string. May return null if no such convar.",
      "func":"( string_1 )",
      "name":"GetStr",
      "return":"table"
    },{
      "desc":"RegisterCommand(name, fn, helpString, flags) : register a console command.",
      "func":"( string_1, handle_2, string_3, int_4 )",
      "name":"RegisterCommand",
      "return":"void"
    },{
      "desc":"RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.",
      "func":"( string_1, string_2, string_3, int_4 )",
      "name":"RegisterConvar",
      "return":"void"
    },{
      "desc":"SetBool(name, val) : sets the value of the convar to the bool.",
      "func":"( string_1, bool_2 )",
      "name":"SetBool",
      "return":"void"
    },{
      "desc":"SetFloat(name, val) : sets the value of the convar to the float.",
      "func":"( string_1, float_2 )",
      "name":"SetFloat",
      "return":"void"
    },{
      "desc":"SetInt(name, val) : sets the value of the convar to the int.",
      "func":"( string_1, int_2 )",
      "name":"SetInt",
      "return":"void"
    },{
      "desc":"SetStr(name, val) : sets the value of the convar to the string.",
      "func":"( string_1, string_2 )",
      "name":"SetStr",
      "return":"void"
    }],
  "C_BaseModelEntity":[{
      "desc":"GetRenderAlpha(): Get the alpha modulation of this entity.",
      "func":"()",
      "name":"GetRenderAlpha",
      "return":"int"
    }],
  "CDOTA_Modifier_Lua_Horizontal_Motion":[{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnHorizontalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateHorizontalMotion",
      "return":"void"
    }],
  "CDOTA_Modifier_Lua_Motion_Both":[{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnHorizontalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnVerticalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateHorizontalMotion",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateVerticalMotion",
      "return":"void"
    }],
  "C_DOTA_BaseNPC":[{
      "desc":"",
      "func":"()",
      "name":"GetAbilityCount",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttackSpeed",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAttacksPerSecond",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseAttackTime",
      "return":"float"
    },{
      "desc":"Returns base magical armor value.",
      "func":"()",
      "name":"GetBaseMagicalResistanceValue",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetBaseMoveSpeed",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCastRangeBonus",
      "return":"float"
    },{
      "desc":"Returns the size of the collision padding around the hull.",
      "func":"()",
      "name":"GetCollisionPadding",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCooldownReduction",
      "return":"float"
    },{
      "desc":"Gets the current vision range.",
      "func":"()",
      "name":"GetCurrentVisionRange",
      "return":"int"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"()",
      "name":"GetDayTimeVisionRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetHasteFactor",
      "return":"float"
    },{
      "desc":"Get the current health percent of the unit.",
      "func":"()",
      "name":"GetHealthPercent",
      "return":"int"
    },{
      "desc":"Get the collision hull radius of this NPC.",
      "func":"()",
      "name":"GetHullRadius",
      "return":"float"
    },{
      "desc":"Returns speed after all modifiers.",
      "func":"()",
      "name":"GetIdealSpeed",
      "return":"float"
    },{
      "desc":"Returns speed after all modifiers, but excluding those that reduce speed.",
      "func":"()",
      "name":"GetIdealSpeedNoSlows",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIncreasedAttackSpeed",
      "return":"float"
    },{
      "desc":"Returns the level of this unit.",
      "func":"()",
      "name":"GetLevel",
      "return":"int"
    },{
      "desc":"Returns current magical armor value.",
      "func":"()",
      "name":"GetMagicalArmorValue",
      "return":"float"
    },{
      "desc":"Get the mana on this unit.",
      "func":"()",
      "name":"GetMana",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetManaRegen",
      "return":"float"
    },{
      "desc":"Get the maximum mana of this unit.",
      "func":"()",
      "name":"GetMaxMana",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetModelRadius",
      "return":"float"
    },{
      "desc":"Gets the stack count of a given modifier.",
      "func":"( string pszScriptName, handle hCaster )",
      "name":"GetModifierStackCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( float flBaseSpeed, bool bReturnUnslowed )",
      "name":"GetMoveSpeedModifier",
      "return":"float"
    },{
      "desc":"Returns the vision range after modifiers.",
      "func":"()",
      "name":"GetNightTimeVisionRange",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetOpposingTeamNumber",
      "return":"int"
    },{
      "desc":"Get the collision hull radius (including padding) of this NPC.",
      "func":"()",
      "name":"GetPaddedCollisionRadius",
      "return":"float"
    },{
      "desc":"Returns base physical armor value.",
      "func":"()",
      "name":"GetPhysicalArmorBaseValue",
      "return":"float"
    },{
      "desc":"Returns current physical armor value.",
      "func":"( bool bIgnoreBase )",
      "name":"GetPhysicalArmorValue",
      "return":"float"
    },{
      "desc":"Get the owner player ID for this unit.",
      "func":"()",
      "name":"GetPlayerOwnerID",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSecondsPerAttack",
      "return":"float"
    },{
      "desc":"Get how much gold has been spent on ability upgrades.",
      "func":"()",
      "name":"GetTotalPurchasedUpgradeGoldCost",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetUnitLabel",
      "return":"string"
    },{
      "desc":"Get the name of this unit.",
      "func":"()",
      "name":"GetUnitName",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"HasAttackCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasFlyMovementCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasFlyingVision",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasGroundMovementCapability",
      "return":"bool"
    },{
      "desc":"See whether this unit has an item by name.",
      "func":"( string pItemName )",
      "name":"HasItemInInventory",
      "return":"bool"
    },{
      "desc":"Sees if this unit has a given modifier.",
      "func":"( string pszScriptName )",
      "name":"HasModifier",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasMovementCapability",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"HasScepter",
      "return":"bool"
    },{
      "desc":"Is this unit an Ancient?",
      "func":"()",
      "name":"IsAncient",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAttackImmune",
      "return":"bool"
    },{
      "desc":"Is this unit a Barracks?",
      "func":"()",
      "name":"IsBarracks",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsBlind",
      "return":"bool"
    },{
      "desc":"Is this unit a boss?",
      "func":"()",
      "name":"IsBoss",
      "return":"bool"
    },{
      "desc":"Is this unit a building?",
      "func":"()",
      "name":"IsBuilding",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCommandRestricted",
      "return":"bool"
    },{
      "desc":"Is this unit a considered a hero for targeting purposes?",
      "func":"()",
      "name":"IsConsideredHero",
      "return":"bool"
    },{
      "desc":"Is this unit controlled by any non-bot player?",
      "func":"()",
      "name":"IsControllableByAnyPlayer",
      "return":"bool"
    },{
      "desc":"Is this unit a courier?",
      "func":"()",
      "name":"IsCourier",
      "return":"bool"
    },{
      "desc":"Is this a Creature type NPC?",
      "func":"()",
      "name":"IsCreature",
      "return":"bool"
    },{
      "desc":"Is this unit a creep?",
      "func":"()",
      "name":"IsCreep",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDisarmed",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDominated",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsEvadeDisabled",
      "return":"bool"
    },{
      "desc":"Is this unit an Ancient?",
      "func":"()",
      "name":"IsFort",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsFrozen",
      "return":"bool"
    },{
      "desc":"Is this a hero or hero illusion?",
      "func":"()",
      "name":"IsHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHexed",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsIllusion",
      "return":"bool"
    },{
      "desc":"Does this unit have an inventory.",
      "func":"()",
      "name":"IsInventoryEnabled",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInvisible",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInvulnerable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsLowAttackPriority",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMagicImmune",
      "return":"bool"
    },{
      "desc":"Is this unit moving?",
      "func":"()",
      "name":"IsMoving",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    },{
      "desc":"Is this a neutral?",
      "func":"()",
      "name":"IsNeutralUnitType",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsNightmared",
      "return":"bool"
    },{
      "desc":"Is this unit a ward-type unit?",
      "func":"()",
      "name":"IsOther",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsOutOfGame",
      "return":"bool"
    },{
      "desc":"Is this unit owned by any non-bot player?",
      "func":"()",
      "name":"IsOwnedByAnyPlayer",
      "return":"bool"
    },{
      "desc":"Is this a phantom unit?",
      "func":"()",
      "name":"IsPhantom",
      "return":"bool"
    },{
      "desc":"Is this unit a ranged attacker?",
      "func":"()",
      "name":"IsRangedAttacker",
      "return":"bool"
    },{
      "desc":"Is this a real hero?",
      "func":"()",
      "name":"IsRealHero",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRooted",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSilenced",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSpeciallyDeniable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStunned",
      "return":"bool"
    },{
      "desc":"Is this unit summoned?",
      "func":"()",
      "name":"IsSummoned",
      "return":"bool"
    },{
      "desc":"Is this a tower?",
      "func":"()",
      "name":"IsTower",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsUnselectable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsUntargetable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoHealthBar",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoTeamMoveTo",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoTeamSelect",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NoUnitCollision",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NotOnMinimap",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"NotOnMinimapForEnemies",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"PassivesDisabled",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"ProvidesVision",
      "return":"bool"
    },{
      "desc":"Gets this unit's attack range after all modifiers.",
      "func":"()",
      "name":"Script_GetAttackRange",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"Script_IsDeniable",
      "return":"bool"
    },{
      "desc":"Can the unit respawn?",
      "func":"()",
      "name":"UnitCanRespawn",
      "return":"bool"
    }],
  "CBodyComponent":[{
      "desc":"Apply an impulse at a worldspace position to the physics",
      "func":"( Vector_1, Vector_2 )",
      "name":"AddImpulseAtPosition",
      "return":"void"
    },{
      "desc":"Add linear and angular velocity to the physics object",
      "func":"( Vector_1, Vector_2 )",
      "name":"AddVelocity",
      "return":"void"
    },{
      "desc":"Detach from its parent",
      "func":"()",
      "name":"DetachFromParent",
      "return":"void"
    },{
      "desc":"Returns the active sequence",
      "func":"()",
      "name":"GetSequence",
      "return":"<unknown>"
    },{
      "desc":"Is attached to parent",
      "func":"()",
      "name":"IsAttachedToParent",
      "return":"bool"
    },{
      "desc":"Returns a sequence id given a name",
      "func":"( string_1 )",
      "name":"LookupSequence",
      "return":"<unknown>"
    },{
      "desc":"Returns the duration in seconds of the specified sequence",
      "func":"( string_1 )",
      "name":"SequenceDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"( Vector_1 )",
      "name":"SetAngularVelocity",
      "return":"void"
    },{
      "desc":"Pass string for the animation to play on this model",
      "func":"( string_1 )",
      "name":"SetAnimation",
      "return":"void"
    },{
      "desc":"",
      "func":"( utlstringtoken_1 )",
      "name":"SetMaterialGroup",
      "return":"void"
    },{
      "desc":"",
      "func":"( Vector_1 )",
      "name":"SetVelocity",
      "return":"void"
    }],
  "C_PointWorldText":[{
      "desc":"Set the message on this entity.",
      "func":"( string pMessage )",
      "name":"SetMessage",
      "return":"void"
    }],
  "C_BaseCombatCharacter":[],
  "Constants":{
    "DOTALimits_t":[{
        "desc":"Default number of players per team.",
        "name":"DOTA_DEFAULT_MAX_TEAM",
        "value":5
      },{
        "desc":"Default number of non-spectator players supported.",
        "name":"DOTA_DEFAULT_MAX_TEAM_PLAYERS",
        "value":10
      },{
        "desc":"Max number of player teams supported.",
        "name":"DOTA_MAX_PLAYER_TEAMS",
        "value":10
      },{
        "desc":"Max number of viewers in a spectator lobby.",
        "name":"DOTA_MAX_SPECTATOR_LOBBY_SIZE",
        "value":15
      },{
        "desc":"Max number of non-spectator players supported.",
        "name":"DOTA_MAX_TEAM_PLAYERS",
        "value":24
      },{
        "desc":"Max number of players per team.",
        "name":"DOTA_MAX_TEAM",
        "value":24
      },{
        "desc":"How many spectators can watch.",
        "name":"DOTA_MAX_SPECTATOR_TEAM_SIZE",
        "value":40
      },{
        "desc":"Max number of players connected to the server including spectators.",
        "name":"DOTA_MAX_PLAYERS",
        "value":64
      }],
    "DOTATeam_t":[{
        "desc":"",
        "name":"DOTA_TEAM_FIRST",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_TEAM_GOODGUYS",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_TEAM_BADGUYS",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_TEAM_NEUTRALS",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_TEAM_NOTEAM",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_MIN",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_1",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_2",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_COUNT",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_3",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_4",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_5",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_6",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_7",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_8",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_TEAM_CUSTOM_MAX",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_TEAM_COUNT",
        "value":14
      }],
    "modifierremove":[{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ALL",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ENEMY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_BUFF_REMOVE_ALLY",
        "value":2
      }],
    "DOTASpeechType_t":[{
        "desc":"",
        "name":"DOTA_SPEECH_USER_INVALID",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_SINGLE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_TEAM",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_TEAM_NEARBY",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_NEARBY",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_SPEECH_USER_ALL",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_SPEECH_GOOD_TEAM",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_SPEECH_BAD_TEAM",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_SPEECH_SPECTATOR",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_SPEECH_RECIPIENT_TYPE_MAX",
        "value":9
      }],
    "DOTA_UNIT_TARGET_TYPE":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_HERO",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_CREEP",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_BUILDING",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_COURIER",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_BASIC",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_OTHER",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_ALL",
        "value":55
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TREE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_CUSTOM",
        "value":128
      }],
    "DOTAAbilitySpeakTrigger_t":[{
        "desc":"",
        "name":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_SPEAK_CAST",
        "value":1
      }],
    "DOTA_RUNES":[{
        "desc":"",
        "name":"DOTA_RUNE_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_RUNE_DOUBLEDAMAGE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_RUNE_HASTE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_RUNE_ILLUSION",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_RUNE_INVISIBILITY",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_RUNE_REGENERATION",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_RUNE_BOUNTY",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_RUNE_ARCANE",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_RUNE_XP",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_RUNE_COUNT",
        "value":8
      }],
    "modifierstate":[{
        "desc":"",
        "name":"MODIFIER_STATE_ROOTED",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_STATE_DISARMED",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_STATE_ATTACK_IMMUNE",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_STATE_SILENCED",
        "value":3
      },{
        "desc":"",
        "name":"MODIFIER_STATE_MUTED",
        "value":4
      },{
        "desc":"",
        "name":"MODIFIER_STATE_STUNNED",
        "value":5
      },{
        "desc":"",
        "name":"MODIFIER_STATE_HEXED",
        "value":6
      },{
        "desc":"",
        "name":"MODIFIER_STATE_INVISIBLE",
        "value":7
      },{
        "desc":"",
        "name":"MODIFIER_STATE_INVULNERABLE",
        "value":8
      },{
        "desc":"",
        "name":"MODIFIER_STATE_MAGIC_IMMUNE",
        "value":9
      },{
        "desc":"",
        "name":"MODIFIER_STATE_PROVIDES_VISION",
        "value":10
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NIGHTMARED",
        "value":11
      },{
        "desc":"",
        "name":"MODIFIER_STATE_BLOCK_DISABLED",
        "value":12
      },{
        "desc":"",
        "name":"MODIFIER_STATE_EVADE_DISABLED",
        "value":13
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNSELECTABLE",
        "value":14
      },{
        "desc":"",
        "name":"MODIFIER_STATE_CANNOT_TARGET_ENEMIES",
        "value":15
      },{
        "desc":"",
        "name":"MODIFIER_STATE_CANNOT_MISS",
        "value":16
      },{
        "desc":"",
        "name":"MODIFIER_STATE_SPECIALLY_DENIABLE",
        "value":17
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FROZEN",
        "value":18
      },{
        "desc":"",
        "name":"MODIFIER_STATE_COMMAND_RESTRICTED",
        "value":19
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NOT_ON_MINIMAP",
        "value":20
      },{
        "desc":"",
        "name":"MODIFIER_STATE_LOW_ATTACK_PRIORITY",
        "value":21
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_HEALTH_BAR",
        "value":22
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FLYING",
        "value":23
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_UNIT_COLLISION",
        "value":24
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_TEAM_MOVE_TO",
        "value":25
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NO_TEAM_SELECT",
        "value":26
      },{
        "desc":"",
        "name":"MODIFIER_STATE_PASSIVES_DISABLED",
        "value":27
      },{
        "desc":"",
        "name":"MODIFIER_STATE_DOMINATED",
        "value":28
      },{
        "desc":"",
        "name":"MODIFIER_STATE_BLIND",
        "value":29
      },{
        "desc":"",
        "name":"MODIFIER_STATE_OUT_OF_GAME",
        "value":30
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FAKE_ALLY",
        "value":31
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
        "value":32
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TRUESIGHT_IMMUNE",
        "value":33
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNTARGETABLE",
        "value":34
      },{
        "desc":"",
        "name":"MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS",
        "value":35
      },{
        "desc":"",
        "name":"MODIFIER_STATE_ALLOW_PATHING_TROUGH_TREES",
        "value":36
      },{
        "desc":"",
        "name":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
        "value":37
      },{
        "desc":"",
        "name":"MODIFIER_STATE_UNSLOWABLE",
        "value":38
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TETHERED",
        "value":39
      },{
        "desc":"",
        "name":"MODIFIER_STATE_IGNORING_STOP_ORDERS",
        "value":40
      },{
        "desc":"",
        "name":"MODIFIER_STATE_FEARED",
        "value":41
      },{
        "desc":"",
        "name":"MODIFIER_STATE_TAUNTED",
        "value":42
      },{
        "desc":"",
        "name":"MODIFIER_STATE_LAST",
        "value":43
      }],
    "modifierpriority":[{
        "desc":"",
        "name":"MODIFIER_PRIORITY_LOW",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_NORMAL",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_HIGH",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_ULTRA",
        "value":3
      },{
        "desc":"",
        "name":"MODIFIER_PRIORITY_SUPER_ULTRA",
        "value":4
      }],
    "DOTA_ABILITY_BEHAVIOR":[{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_LAST_RESORT_POINT",
        "value":-2147483648
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_SUPPRESS_ASSOCIATED_CONSUMABLE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_FREE_DRAW_TARGETING",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_CAN_SELF_CAST",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNLOCKED_BY_EFFECT_INDEX",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_HIDDEN",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_PASSIVE",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NO_TARGET",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_POINT",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AOE",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_CHANNELLED",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ITEM",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_TOGGLE",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AUTOCAST",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
        "value":16384
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
        "value":32768
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_AURA",
        "value":65536
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ATTACK",
        "value":131072
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
        "value":262144
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
        "value":524288
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
        "value":1048576
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
        "value":2097152
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
        "value":4194304
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
        "value":8388608
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
        "value":16777216
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
        "value":33554432
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
        "value":67108864
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
        "value":134217728
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
        "value":268435456
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
        "value":536870912
      },{
        "desc":"",
        "name":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING",
        "value":1073741824
      }],
    "UnitFilterResult":[{
        "desc":"",
        "name":"UF_SUCCESS",
        "value":0
      },{
        "desc":"",
        "name":"UF_FAIL_FRIENDLY",
        "value":1
      },{
        "desc":"",
        "name":"UF_FAIL_ENEMY",
        "value":2
      },{
        "desc":"",
        "name":"UF_FAIL_HERO",
        "value":3
      },{
        "desc":"",
        "name":"UF_FAIL_CONSIDERED_HERO",
        "value":4
      },{
        "desc":"",
        "name":"UF_FAIL_CREEP",
        "value":5
      },{
        "desc":"",
        "name":"UF_FAIL_BUILDING",
        "value":6
      },{
        "desc":"",
        "name":"UF_FAIL_COURIER",
        "value":7
      },{
        "desc":"",
        "name":"UF_FAIL_OTHER",
        "value":8
      },{
        "desc":"",
        "name":"UF_FAIL_ANCIENT",
        "value":9
      },{
        "desc":"",
        "name":"UF_FAIL_ILLUSION",
        "value":10
      },{
        "desc":"",
        "name":"UF_FAIL_SUMMONED",
        "value":11
      },{
        "desc":"",
        "name":"UF_FAIL_DOMINATED",
        "value":12
      },{
        "desc":"",
        "name":"UF_FAIL_MELEE",
        "value":13
      },{
        "desc":"",
        "name":"UF_FAIL_RANGED",
        "value":14
      },{
        "desc":"",
        "name":"UF_FAIL_DEAD",
        "value":15
      },{
        "desc":"",
        "name":"UF_FAIL_MAGIC_IMMUNE_ALLY",
        "value":16
      },{
        "desc":"",
        "name":"UF_FAIL_MAGIC_IMMUNE_ENEMY",
        "value":17
      },{
        "desc":"",
        "name":"UF_FAIL_INVULNERABLE",
        "value":18
      },{
        "desc":"",
        "name":"UF_FAIL_IN_FOW",
        "value":19
      },{
        "desc":"",
        "name":"UF_FAIL_INVISIBLE",
        "value":20
      },{
        "desc":"",
        "name":"UF_FAIL_NOT_PLAYER_CONTROLLED",
        "value":21
      },{
        "desc":"",
        "name":"UF_FAIL_ATTACK_IMMUNE",
        "value":22
      },{
        "desc":"",
        "name":"UF_FAIL_CUSTOM",
        "value":23
      },{
        "desc":"",
        "name":"UF_FAIL_INVALID_LOCATION",
        "value":24
      },{
        "desc":"",
        "name":"UF_FAIL_DISABLE_HELP",
        "value":25
      },{
        "desc":"",
        "name":"UF_FAIL_OUT_OF_WORLD",
        "value":26
      },{
        "desc":"",
        "name":"UF_FAIL_NIGHTMARED",
        "value":27
      },{
        "desc":"",
        "name":"UF_FAIL_OBSTRUCTED",
        "value":28
      }],
    "LuaModifierType":[{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_NONE",
        "value":0
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_HORIZONTAL",
        "value":1
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_VERTICAL",
        "value":2
      },{
        "desc":"",
        "name":"LUA_MODIFIER_MOTION_BOTH",
        "value":3
      },{
        "desc":"",
        "name":"LUA_MODIFIER_INVALID",
        "value":4
      }],
    "DOTA_UNIT_TARGET_FLAGS":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_DEAD",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
        "value":64
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
        "value":128
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NO_INVIS",
        "value":256
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
        "value":512
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
        "value":1024
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
        "value":2048
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
        "value":4096
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
        "value":8192
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
        "value":16384
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
        "value":32768
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
        "value":65536
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
        "value":131072
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
        "value":262144
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
        "value":524288
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES",
        "value":1048576
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_FLAG_RESPECT_OBSTRUCTIONS",
        "value":2097152
      }],
    "DOTA_SHOP_TYPE":[{
        "desc":"",
        "name":"DOTA_SHOP_HOME",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_SHOP_SIDE",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_SHOP_SECRET",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_SHOP_GROUND",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_SHOP_SIDE2",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_SHOP_SECRET2",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_SHOP_CUSTOM",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_SHOP_NEUTRALS",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_SHOP_NONE",
        "value":8
      }],
    "AttributeDerivedStats":[{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_DAMAGE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_HP",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH_HP_REGEN",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_DAMAGE",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_ARMOR",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY_ATTACK_SPEED",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_DAMAGE",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLIGENCE_MANA_REGEN",
        "value":8
      }],
    "AbilityLearnResult_t":[{
        "desc":"",
        "name":"ABILITY_CAN_BE_UPGRADED",
        "value":0
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
        "value":1
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
        "value":2
      },{
        "desc":"",
        "name":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
        "value":3
      },{
        "desc":"",
        "name":"ABILITY_NOT_LEARNABLE",
        "value":4
      }],
    "modifierfunction":[{
        "desc":"GetModifierPreAttack_BonusDamage",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
        "value":0
      },{
        "desc":"GetModifierPreAttack_BonusDamage_Target",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET",
        "value":1
      },{
        "desc":"GetModifierPreAttack_BonusDamage_Proc",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
        "value":2
      },{
        "desc":"GetModifierPreAttack_BonusDamagePostCrit",
        "name":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
        "value":3
      },{
        "desc":"GetModifierBaseAttack_BonusDamage",
        "name":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
        "value":4
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Physical",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
        "value":5
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Magical",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
        "value":6
      },{
        "desc":"GetModifierProcAttack_BonusDamage_Pure",
        "name":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
        "value":7
      },{
        "desc":"GetModifierProcAttack_Feedback",
        "name":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
        "value":8
      },{
        "desc":"GetModifierOverrideAttackDamage",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE",
        "value":9
      },{
        "desc":"GetModifierPreAttack",
        "name":"MODIFIER_PROPERTY_PRE_ATTACK",
        "value":10
      },{
        "desc":"GetModifierInvisibilityLevel",
        "name":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
        "value":11
      },{
        "desc":"GetModifierInvisibilityAttackBehaviorException",
        "name":"MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION",
        "value":12
      },{
        "desc":"GetModifierPersistentInvisibility",
        "name":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
        "value":13
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
        "value":14
      },{
        "desc":"GetModifierMoveSpeedOverride",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
        "value":15
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
        "value":16
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage_Unique",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
        "value":17
      },{
        "desc":"GetModifierMoveSpeedBonus_Percentage_Unique_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
        "value":18
      },{
        "desc":"GetModifierMoveSpeedBonus_Special_Boots",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
        "value":19
      },{
        "desc":"GetModifierMoveSpeedBonus_Special_Boots_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
        "value":20
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant_Unique",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE",
        "value":21
      },{
        "desc":"GetModifierMoveSpeedBonus_Constant_Unique_2",
        "name":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2",
        "value":22
      },{
        "desc":"GetModifierMoveSpeed_Absolute",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
        "value":23
      },{
        "desc":"GetModifierMoveSpeed_AbsoluteMin",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
        "value":24
      },{
        "desc":"GetModifierMoveSpeed_AbsoluteMax",
        "name":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX",
        "value":25
      },{
        "desc":"GetModifierIgnoreMovespeedLimit",
        "name":"MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT",
        "value":26
      },{
        "desc":"GetModifierMoveSpeed_Limit",
        "name":"MODIFIER_PROPERTY_MOVESPEED_LIMIT",
        "value":27
      },{
        "desc":"GetModifierAttackSpeedBaseOverride",
        "name":"MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
        "value":28
      },{
        "desc":"GetModifierFixedAttackRate",
        "name":"MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
        "value":29
      },{
        "desc":"GetModifierAttackSpeedBonus_Constant",
        "name":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
        "value":30
      },{
        "desc":"GetModifierCooldownReduction_Constant",
        "name":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
        "value":31
      },{
        "desc":"GetModifierBaseAttackTimeConstant",
        "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
        "value":32
      },{
        "desc":"GetModifierBaseAttackTimeConstant_Adjust",
        "name":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST",
        "value":33
      },{
        "desc":"GetModifierAttackPointConstant",
        "name":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
        "value":34
      },{
        "desc":"GetModifierDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
        "value":35
      },{
        "desc":"GetModifierDamageOutgoing_Percentage_Illusion",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
        "value":36
      },{
        "desc":"GetModifierDamageOutgoing_Percentage_Illusion_Amplify",
        "name":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY",
        "value":37
      },{
        "desc":"GetModifierTotalDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
        "value":38
      },{
        "desc":"GetModifierSpellAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
        "value":39
      },{
        "desc":"GetModifierSpellAmplify_PercentageUnique",
        "name":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE",
        "value":40
      },{
        "desc":"GetModifierHealAmplify_PercentageSource",
        "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE",
        "value":41
      },{
        "desc":"GetModifierHealAmplify_PercentageTarget",
        "name":"MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET",
        "value":42
      },{
        "desc":"GetModifierHPRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
        "value":43
      },{
        "desc":"GetModifierLifestealRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE",
        "value":44
      },{
        "desc":"GetModifierMPRegenAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE",
        "value":45
      },{
        "desc":"GetModifierMPRestoreAmplify_Percentage",
        "name":"MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE",
        "value":46
      },{
        "desc":"GetModifierBaseDamageOutgoing_Percentage",
        "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
        "value":47
      },{
        "desc":"GetModifierBaseDamageOutgoing_PercentageUnique",
        "name":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
        "value":48
      },{
        "desc":"GetModifierIncomingDamage_Percentage",
        "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
        "value":49
      },{
        "desc":"GetModifierIncomingPhysicalDamage_Percentage",
        "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
        "value":50
      },{
        "desc":"GetModifierIncomingPhysicalDamageConstant",
        "name":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
        "value":51
      },{
        "desc":"GetModifierIncomingSpellDamageConstant",
        "name":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
        "value":52
      },{
        "desc":"GetModifierEvasion_Constant",
        "name":"MODIFIER_PROPERTY_EVASION_CONSTANT",
        "value":53
      },{
        "desc":"GetModifierNegativeEvasion_Constant",
        "name":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
        "value":54
      },{
        "desc":"GetModifierStatusResistance",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE",
        "value":55
      },{
        "desc":"GetModifierStatusResistanceStacking",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING",
        "value":56
      },{
        "desc":"GetModifierStatusResistanceCaster",
        "name":"MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER",
        "value":57
      },{
        "desc":"GetModifierAvoidDamage",
        "name":"MODIFIER_PROPERTY_AVOID_DAMAGE",
        "value":58
      },{
        "desc":"GetModifierAvoidSpell",
        "name":"MODIFIER_PROPERTY_AVOID_SPELL",
        "value":59
      },{
        "desc":"GetModifierMiss_Percentage",
        "name":"MODIFIER_PROPERTY_MISS_PERCENTAGE",
        "value":60
      },{
        "desc":"GetModifierPhysicalArmorBase_Percentage",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE",
        "value":61
      },{
        "desc":"GetModifierPhysicalArmorTotal_Percentage",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE",
        "value":62
      },{
        "desc":"GetModifierPhysicalArmorBonus",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
        "value":63
      },{
        "desc":"GetModifierPhysicalArmorBonusUnique",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
        "value":64
      },{
        "desc":"GetModifierPhysicalArmorBonusUniqueActive",
        "name":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
        "value":65
      },{
        "desc":"GetModifierIgnorePhysicalArmor",
        "name":"MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
        "value":66
      },{
        "desc":"GetModifierMagicalResistanceBaseReduction",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION",
        "value":67
      },{
        "desc":"GetModifierMagicalResistanceDirectModification",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
        "value":68
      },{
        "desc":"GetModifierMagicalResistanceBonus",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
        "value":69
      },{
        "desc":"GetModifierMagicalResistanceBonusIllusions",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS",
        "value":70
      },{
        "desc":"GetModifierMagicalResistanceDecrepifyUnique",
        "name":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
        "value":71
      },{
        "desc":"GetModifierBaseRegen",
        "name":"MODIFIER_PROPERTY_BASE_MANA_REGEN",
        "value":72
      },{
        "desc":"GetModifierConstantManaRegen",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
        "value":73
      },{
        "desc":"GetModifierConstantManaRegenUnique",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
        "value":74
      },{
        "desc":"GetModifierTotalPercentageManaRegen",
        "name":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
        "value":75
      },{
        "desc":"GetModifierConstantHealthRegen",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
        "value":76
      },{
        "desc":"GetModifierHealthRegenPercentage",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
        "value":77
      },{
        "desc":"GetModifierHealthRegenPercentageUnique",
        "name":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE",
        "value":78
      },{
        "desc":"GetModifierHealthBonus",
        "name":"MODIFIER_PROPERTY_HEALTH_BONUS",
        "value":79
      },{
        "desc":"GetModifierManaBonus",
        "name":"MODIFIER_PROPERTY_MANA_BONUS",
        "value":80
      },{
        "desc":"GetModifierExtraStrengthBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
        "value":81
      },{
        "desc":"GetModifierExtraHealthBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
        "value":82
      },{
        "desc":"GetModifierExtraManaBonus",
        "name":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
        "value":83
      },{
        "desc":"GetModifierExtraHealthPercentage",
        "name":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
        "value":84
      },{
        "desc":"GetModifierExtraManaPercentage",
        "name":"MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE",
        "value":85
      },{
        "desc":"GetModifierBonusStats_Strength",
        "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
        "value":86
      },{
        "desc":"GetModifierBonusStats_Agility",
        "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
        "value":87
      },{
        "desc":"GetModifierBonusStats_Intellect",
        "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
        "value":88
      },{
        "desc":"GetModifierBonusStats_Strength_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE",
        "value":89
      },{
        "desc":"GetModifierBonusStats_Agility_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE",
        "value":90
      },{
        "desc":"GetModifierBonusStats_Intellect_Percentage",
        "name":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE",
        "value":91
      },{
        "desc":"GetModifierCastRangeBonus",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS",
        "value":92
      },{
        "desc":"GetModifierCastRangeBonusTarget",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET",
        "value":93
      },{
        "desc":"GetModifierCastRangeBonusStacking",
        "name":"MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
        "value":94
      },{
        "desc":"GetModifierAttackRangeOverride",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE",
        "value":95
      },{
        "desc":"GetModifierAttackRangeBonus",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
        "value":96
      },{
        "desc":"GetModifierAttackRangeBonusUnique",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
        "value":97
      },{
        "desc":"GetModifierAttackRangeBonusPercentage",
        "name":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE",
        "value":98
      },{
        "desc":"GetModifierMaxAttackRange",
        "name":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
        "value":99
      },{
        "desc":"GetModifierProjectileSpeedBonus",
        "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
        "value":100
      },{
        "desc":"GetModifierProjectileSpeedBonusPercentage",
        "name":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE",
        "value":101
      },{
        "desc":"GetModifierProjectileName",
        "name":"MODIFIER_PROPERTY_PROJECTILE_NAME",
        "value":102
      },{
        "desc":"ReincarnateTime",
        "name":"MODIFIER_PROPERTY_REINCARNATION",
        "value":103
      },{
        "desc":"GetModifierConstantRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME",
        "value":104
      },{
        "desc":"GetModifierPercentageRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
        "value":105
      },{
        "desc":"GetModifierStackingRespawnTime",
        "name":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
        "value":106
      },{
        "desc":"GetModifierPercentageCooldown",
        "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
        "value":107
      },{
        "desc":"GetModifierPercentageCooldownOngoing",
        "name":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING",
        "value":108
      },{
        "desc":"GetModifierPercentageCasttime",
        "name":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
        "value":109
      },{
        "desc":"GetModifierPercentageManacost",
        "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
        "value":110
      },{
        "desc":"GetModifierPercentageManacostStacking",
        "name":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING",
        "value":111
      },{
        "desc":"GetModifierConstantDeathGoldCost",
        "name":"MODIFIER_PROPERTY_DEATHGOLDCOST",
        "value":112
      },{
        "desc":"GetModifierPercentageExpRateBoost",
        "name":"MODIFIER_PROPERTY_EXP_RATE_BOOST",
        "value":113
      },{
        "desc":"GetModifierPreAttack_CriticalStrike",
        "name":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
        "value":114
      },{
        "desc":"GetModifierPreAttack_Target_CriticalStrike",
        "name":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
        "value":115
      },{
        "desc":"GetModifierMagical_ConstantBlock",
        "name":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
        "value":116
      },{
        "desc":"GetModifierPhysical_ConstantBlock",
        "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
        "value":117
      },{
        "desc":"GetModifierPhysical_ConstantBlockSpecial",
        "name":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
        "value":118
      },{
        "desc":"GetModifierPhysical_ConstantBlockUnavoidablePreArmor",
        "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
        "value":119
      },{
        "desc":"GetModifierTotal_ConstantBlock",
        "name":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
        "value":120
      },{
        "desc":"GetOverrideAnimation",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
        "value":121
      },{
        "desc":"GetOverrideAnimationWeight",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
        "value":122
      },{
        "desc":"GetOverrideAnimationRate",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
        "value":123
      },{
        "desc":"GetAbsorbSpell",
        "name":"MODIFIER_PROPERTY_ABSORB_SPELL",
        "value":124
      },{
        "desc":"GetReflectSpell",
        "name":"MODIFIER_PROPERTY_REFLECT_SPELL",
        "value":125
      },{
        "desc":"GetDisableAutoAttack",
        "name":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
        "value":126
      },{
        "desc":"GetBonusDayVision",
        "name":"MODIFIER_PROPERTY_BONUS_DAY_VISION",
        "value":127
      },{
        "desc":"GetBonusNightVision",
        "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
        "value":128
      },{
        "desc":"GetBonusNightVisionUnique",
        "name":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
        "value":129
      },{
        "desc":"GetBonusVisionPercentage",
        "name":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
        "value":130
      },{
        "desc":"GetFixedDayVision",
        "name":"MODIFIER_PROPERTY_FIXED_DAY_VISION",
        "value":131
      },{
        "desc":"GetFixedNightVision",
        "name":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
        "value":132
      },{
        "desc":"GetMinHealth",
        "name":"MODIFIER_PROPERTY_MIN_HEALTH",
        "value":133
      },{
        "desc":"GetAbsoluteNoDamagePhysical",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
        "value":134
      },{
        "desc":"GetAbsoluteNoDamageMagical",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
        "value":135
      },{
        "desc":"GetAbsoluteNoDamagePure",
        "name":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
        "value":136
      },{
        "desc":"GetIsIllusion",
        "name":"MODIFIER_PROPERTY_IS_ILLUSION",
        "value":137
      },{
        "desc":"GetModifierIllusionLabel",
        "name":"MODIFIER_PROPERTY_ILLUSION_LABEL",
        "value":138
      },{
        "desc":"GetModifierStrongIllusion",
        "name":"MODIFIER_PROPERTY_STRONG_ILLUSION",
        "value":139
      },{
        "desc":"GetModifierSuperIllusion",
        "name":"MODIFIER_PROPERTY_SUPER_ILLUSION",
        "value":140
      },{
        "desc":"GetModifierSuperIllusionWithUltimate",
        "name":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
        "value":141
      },{
        "desc":"GetModifierTurnRate_Percentage",
        "name":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
        "value":142
      },{
        "desc":"GetModifierTurnRate_Override",
        "name":"MODIFIER_PROPERTY_TURN_RATE_OVERRIDE",
        "value":143
      },{
        "desc":"GetDisableHealing",
        "name":"MODIFIER_PROPERTY_DISABLE_HEALING",
        "value":144
      },{
        "desc":"GetAlwaysAllowAttack",
        "name":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
        "value":145
      },{
        "desc":"GetAllowEtherealAttack",
        "name":"MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK",
        "value":146
      },{
        "desc":"GetOverrideAttackMagical",
        "name":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
        "value":147
      },{
        "desc":"GetModifierUnitStatsNeedsRefresh",
        "name":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
        "value":148
      },{
        "desc":"Unused",
        "name":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
        "value":149
      },{
        "desc":"Unused",
        "name":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
        "value":150
      },{
        "desc":"GetModifierUnitDisllowUpgrading",
        "name":"MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING",
        "value":151
      },{
        "desc":"GetModifierDodgeProjectile",
        "name":"MODIFIER_PROPERTY_DODGE_PROJECTILE",
        "value":152
      },{
        "desc":"GetTriggerCosmeticAndEndAttack",
        "name":"MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK",
        "value":153
      },{
        "desc":"OnSpellTargetReady",
        "name":"MODIFIER_EVENT_ON_SPELL_TARGET_READY",
        "value":154
      },{
        "desc":"OnAttackRecord",
        "name":"MODIFIER_EVENT_ON_ATTACK_RECORD",
        "value":155
      },{
        "desc":"OnAttackStart",
        "name":"MODIFIER_EVENT_ON_ATTACK_START",
        "value":156
      },{
        "desc":"OnAttack",
        "name":"MODIFIER_EVENT_ON_ATTACK",
        "value":157
      },{
        "desc":"OnAttackLanded",
        "name":"MODIFIER_EVENT_ON_ATTACK_LANDED",
        "value":158
      },{
        "desc":"OnAttackFail",
        "name":"MODIFIER_EVENT_ON_ATTACK_FAIL",
        "value":159
      },{
        "desc":"OnAttackAllied",
        "name":"MODIFIER_EVENT_ON_ATTACK_ALLIED",
        "value":160
      },{
        "desc":"OnProjectileDodge",
        "name":"MODIFIER_EVENT_ON_PROJECTILE_DODGE",
        "value":161
      },{
        "desc":"OnOrder",
        "name":"MODIFIER_EVENT_ON_ORDER",
        "value":162
      },{
        "desc":"OnUnitMoved",
        "name":"MODIFIER_EVENT_ON_UNIT_MOVED",
        "value":163
      },{
        "desc":"OnAbilityStart",
        "name":"MODIFIER_EVENT_ON_ABILITY_START",
        "value":164
      },{
        "desc":"OnAbilityExecuted",
        "name":"MODIFIER_EVENT_ON_ABILITY_EXECUTED",
        "value":165
      },{
        "desc":"OnAbilityFullyCast",
        "name":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
        "value":166
      },{
        "desc":"OnBreakInvisibility",
        "name":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
        "value":167
      },{
        "desc":"OnAbilityEndChannel",
        "name":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
        "value":168
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_PROCESS_UPGRADE",
        "value":169
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_REFRESH",
        "value":170
      },{
        "desc":"OnTakeDamage",
        "name":"MODIFIER_EVENT_ON_TAKEDAMAGE",
        "value":171
      },{
        "desc":"OnDamagePrevented",
        "name":"MODIFIER_EVENT_ON_DEATH_PREVENTED",
        "value":172
      },{
        "desc":"OnStateChanged",
        "name":"MODIFIER_EVENT_ON_STATE_CHANGED",
        "value":173
      },{
        "desc":"Unused",
        "name":"MODIFIER_EVENT_ON_ORB_EFFECT",
        "value":174
      },{
        "desc":"OnProcessCleave",
        "name":"MODIFIER_EVENT_ON_PROCESS_CLEAVE",
        "value":175
      },{
        "desc":"OnDamageCalculated",
        "name":"MODIFIER_EVENT_ON_DAMAGE_CALCULATED",
        "value":176
      },{
        "desc":"OnAttacked",
        "name":"MODIFIER_EVENT_ON_ATTACKED",
        "value":177
      },{
        "desc":"OnDeath",
        "name":"MODIFIER_EVENT_ON_DEATH",
        "value":178
      },{
        "desc":"OnRespawn",
        "name":"MODIFIER_EVENT_ON_RESPAWN",
        "value":179
      },{
        "desc":"OnSpentMana",
        "name":"MODIFIER_EVENT_ON_SPENT_MANA",
        "value":180
      },{
        "desc":"OnTeleporting",
        "name":"MODIFIER_EVENT_ON_TELEPORTING",
        "value":181
      },{
        "desc":"OnTeleported",
        "name":"MODIFIER_EVENT_ON_TELEPORTED",
        "value":182
      },{
        "desc":"OnSetLocation",
        "name":"MODIFIER_EVENT_ON_SET_LOCATION",
        "value":183
      },{
        "desc":"OnHealthGained",
        "name":"MODIFIER_EVENT_ON_HEALTH_GAINED",
        "value":184
      },{
        "desc":"OnManaGained",
        "name":"MODIFIER_EVENT_ON_MANA_GAINED",
        "value":185
      },{
        "desc":"OnTakeDamageKillCredit",
        "name":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
        "value":186
      },{
        "desc":"OnHeroKilled",
        "name":"MODIFIER_EVENT_ON_HERO_KILLED",
        "value":187
      },{
        "desc":"OnHealReceived",
        "name":"MODIFIER_EVENT_ON_HEAL_RECEIVED",
        "value":188
      },{
        "desc":"OnBuildingKilled",
        "name":"MODIFIER_EVENT_ON_BUILDING_KILLED",
        "value":189
      },{
        "desc":"OnModelChanged",
        "name":"MODIFIER_EVENT_ON_MODEL_CHANGED",
        "value":190
      },{
        "desc":"OnModifierAdded",
        "name":"MODIFIER_EVENT_ON_MODIFIER_ADDED",
        "value":191
      },{
        "desc":"OnTooltip",
        "name":"MODIFIER_PROPERTY_TOOLTIP",
        "value":192
      },{
        "desc":"GetModifierModelChange",
        "name":"MODIFIER_PROPERTY_MODEL_CHANGE",
        "value":193
      },{
        "desc":"GetModifierModelScale",
        "name":"MODIFIER_PROPERTY_MODEL_SCALE",
        "value":194
      },{
        "desc":"GetModifierScepter",
        "name":"MODIFIER_PROPERTY_IS_SCEPTER",
        "value":195
      },{
        "desc":"GetModifierRadarCooldownReduction",
        "name":"MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION",
        "value":196
      },{
        "desc":"GetActivityTranslationModifiers",
        "name":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
        "value":197
      },{
        "desc":"GetAttackSound",
        "name":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
        "value":198
      },{
        "desc":"GetUnitLifetimeFraction",
        "name":"MODIFIER_PROPERTY_LIFETIME_FRACTION",
        "value":199
      },{
        "desc":"GetModifierProvidesFOWVision",
        "name":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
        "value":200
      },{
        "desc":"GetModifierSpellsRequireHP",
        "name":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
        "value":201
      },{
        "desc":"GetForceDrawOnMinimap",
        "name":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
        "value":202
      },{
        "desc":"GetModifierDisableTurning",
        "name":"MODIFIER_PROPERTY_DISABLE_TURNING",
        "value":203
      },{
        "desc":"GetModifierIgnoreCastAngle",
        "name":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
        "value":204
      },{
        "desc":"GetModifierChangeAbilityValue",
        "name":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
        "value":205
      },{
        "desc":"GetModifierAbilityLayout",
        "name":"MODIFIER_PROPERTY_ABILITY_LAYOUT",
        "value":206
      },{
        "desc":"OnDominated",
        "name":"MODIFIER_EVENT_ON_DOMINATED",
        "value":207
      },{
        "desc":"GetModifierTempestDouble",
        "name":"MODIFIER_PROPERTY_TEMPEST_DOUBLE",
        "value":208
      },{
        "desc":"PreserveParticlesOnModelChanged",
        "name":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
        "value":209
      },{
        "desc":"OnAttackFinished",
        "name":"MODIFIER_EVENT_ON_ATTACK_FINISHED",
        "value":210
      },{
        "desc":"GetModifierIgnoreCooldown",
        "name":"MODIFIER_PROPERTY_IGNORE_COOLDOWN",
        "value":211
      },{
        "desc":"GetModifierCanAttackTrees",
        "name":"MODIFIER_PROPERTY_CAN_ATTACK_TREES",
        "value":212
      },{
        "desc":"GetVisualZDelta",
        "name":"MODIFIER_PROPERTY_VISUAL_Z_DELTA",
        "value":213
      },{
        "desc":"",
        "name":"MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
        "value":214
      },{
        "desc":"GetModifierNoVisionOfAttacker",
        "name":"MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER",
        "value":215
      },{
        "desc":"OnTooltip2",
        "name":"MODIFIER_PROPERTY_TOOLTIP2",
        "value":216
      },{
        "desc":"OnAttackRecordDestroy",
        "name":"MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY",
        "value":217
      },{
        "desc":"OnProjectileObstructionHit",
        "name":"MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT",
        "value":218
      },{
        "desc":"GetSuppressTeleport",
        "name":"MODIFIER_PROPERTY_SUPPRESS_TELEPORT",
        "value":219
      },{
        "desc":"OnAttackCancelled",
        "name":"MODIFIER_EVENT_ON_ATTACK_CANCELLED",
        "value":220
      },{
        "desc":"GetSuppressCleave",
        "name":"MODIFIER_PROPERTY_SUPPRESS_CLEAVE",
        "value":221
      },{
        "desc":"BotAttackScoreBonus",
        "name":"MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS",
        "value":222
      },{
        "desc":"",
        "name":"MODIFIER_FUNCTION_LAST",
        "value":223
      },{
        "desc":"",
        "name":"MODIFIER_FUNCTION_INVALID",
        "value":255
      }],
    "DOTAModifierAttribute_t":[{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_PERMANENT",
        "value":1
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_MULTIPLE",
        "value":2
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
        "value":4
      },{
        "desc":"",
        "name":"MODIFIER_ATTRIBUTE_AURA_PRIORITY",
        "value":8
      }],
    "DOTA_UNIT_TARGET_TEAM":[{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_FRIENDLY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_ENEMY",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_BOTH",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_UNIT_TARGET_TEAM_CUSTOM",
        "value":4
      }],
    "ABILITY_TYPES":[{
        "desc":"",
        "name":"ABILITY_TYPE_BASIC",
        "value":0
      },{
        "desc":"",
        "name":"ABILITY_TYPE_ULTIMATE",
        "value":1
      },{
        "desc":"",
        "name":"ABILITY_TYPE_ATTRIBUTES",
        "value":2
      },{
        "desc":"",
        "name":"ABILITY_TYPE_HIDDEN",
        "value":3
      }],
    "DOTA_MOTION_CONTROLLER_PRIORITY":[{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
        "value":4
      }],
    "Attributes":[{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_STRENGTH",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_AGILITY",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_INTELLECT",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_ATTRIBUTE_MAX",
        "value":3
      }],
    "DOTA_HeroPickState":[{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_NONE",
        "value":0
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_AP_SELECT",
        "value":1
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_SD_SELECT",
        "value":2
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_INTRO_SELECT_UNUSED",
        "value":3
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_RD_SELECT_UNUSED",
        "value":4
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_INTRO",
        "value":5
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
        "value":6
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN1",
        "value":7
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN2",
        "value":8
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN3",
        "value":9
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN4",
        "value":10
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN5",
        "value":11
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN6",
        "value":12
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN7",
        "value":13
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN8",
        "value":14
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN9",
        "value":15
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN10",
        "value":16
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN11",
        "value":17
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_BAN12",
        "value":18
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT1",
        "value":19
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT2",
        "value":20
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT3",
        "value":21
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT4",
        "value":22
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT5",
        "value":23
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT6",
        "value":24
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT7",
        "value":25
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT8",
        "value":26
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT9",
        "value":27
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_SELECT10",
        "value":28
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CM_PICK",
        "value":29
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_AR_SELECT",
        "value":30
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_MO_SELECT",
        "value":31
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_FH_SELECT",
        "value":32
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_INTRO",
        "value":33
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
        "value":34
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN1",
        "value":35
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN2",
        "value":36
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN3",
        "value":37
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN4",
        "value":38
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN5",
        "value":39
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_BAN6",
        "value":40
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT1",
        "value":41
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT2",
        "value":42
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT3",
        "value":43
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT4",
        "value":44
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT5",
        "value":45
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT6",
        "value":46
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT7",
        "value":47
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT8",
        "value":48
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT9",
        "value":49
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_SELECT10",
        "value":50
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CD_PICK",
        "value":51
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_BD_SELECT",
        "value":52
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
        "value":53
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_ARDM_SELECT",
        "value":54
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
        "value":55
      },{
        "desc":"",
        "name":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
        "value":56
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_SELECT_PENALTY",
        "value":57
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_CUSTOM_PICK_RULES",
        "value":58
      },{
        "desc":"",
        "name":"DOTA_HEROPICK_STATE_COUNT",
        "value":59
      }],
    "ParticleAttachment_t":[{
        "desc":"",
        "name":"PATTACH_INVALID",
        "value":-1
      },{
        "desc":"",
        "name":"PATTACH_ABSORIGIN",
        "value":0
      },{
        "desc":"",
        "name":"PATTACH_ABSORIGIN_FOLLOW",
        "value":1
      },{
        "desc":"",
        "name":"PATTACH_CUSTOMORIGIN",
        "value":2
      },{
        "desc":"",
        "name":"PATTACH_CUSTOMORIGIN_FOLLOW",
        "value":3
      },{
        "desc":"",
        "name":"PATTACH_POINT",
        "value":4
      },{
        "desc":"",
        "name":"PATTACH_POINT_FOLLOW",
        "value":5
      },{
        "desc":"",
        "name":"PATTACH_EYES_FOLLOW",
        "value":6
      },{
        "desc":"",
        "name":"PATTACH_OVERHEAD_FOLLOW",
        "value":7
      },{
        "desc":"",
        "name":"PATTACH_WORLDORIGIN",
        "value":8
      },{
        "desc":"",
        "name":"PATTACH_ROOTBONE_FOLLOW",
        "value":9
      },{
        "desc":"",
        "name":"PATTACH_RENDERORIGIN_FOLLOW",
        "value":10
      },{
        "desc":"",
        "name":"PATTACH_MAIN_VIEW",
        "value":11
      },{
        "desc":"",
        "name":"PATTACH_WATERWAKE",
        "value":12
      },{
        "desc":"",
        "name":"PATTACH_CENTER_FOLLOW",
        "value":13
      },{
        "desc":"",
        "name":"PATTACH_CUSTOM_GAME_STATE_1",
        "value":14
      },{
        "desc":"",
        "name":"MAX_PATTACH_TYPES",
        "value":15
      }]
  },
  "C_DOTA_Item_Lua":[{
      "desc":"Determine whether an issued command with no target is valid.",
      "func":"()",
      "name":"CastFilterResult",
      "return":"int"
    },{
      "desc":"(Vector vLocation) Determine whether an issued command on a location is valid.",
      "func":"( Vector vLocation )",
      "name":"CastFilterResultLocation",
      "return":"int"
    },{
      "desc":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
      "func":"( handle hTarget )",
      "name":"CastFilterResultTarget",
      "return":"int"
    },{
      "desc":"Controls the size of the AOE casting cursor.",
      "func":"()",
      "name":"GetAOERadius",
      "return":"float"
    },{
      "desc":"Allows code overriding of the item texture shown in the HUD.",
      "func":"()",
      "name":"GetAbilityTextureName",
      "return":"string"
    },{
      "desc":"Return cast behavior type of this ability.",
      "func":"()",
      "name":"GetBehavior",
      "return":"int"
    },{
      "desc":"Return cast range of this ability.",
      "func":"( Vector vLocation, handle hTarget )",
      "name":"GetCastRange",
      "return":"int"
    },{
      "desc":"Return the channel time of this ability.",
      "func":"()",
      "name":"GetChannelTime",
      "return":"float"
    },{
      "desc":"Return mana cost at the given level per second while channeling (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetChannelledManaCostPerSecond",
      "return":"int"
    },{
      "desc":"Return cooldown of this ability.",
      "func":"( int iLevel )",
      "name":"GetCooldown",
      "return":"float"
    },{
      "desc":"Return the error string of a failed command with no target.",
      "func":"()",
      "name":"GetCustomCastError",
      "return":"string"
    },{
      "desc":"(Vector vLocation) Return the error string of a failed command on a location.",
      "func":"( Vector vLocation )",
      "name":"GetCustomCastErrorLocation",
      "return":"string"
    },{
      "desc":"(HSCRIPT hTarget) Return the error string of a failed command on a target.",
      "func":"( handle hTarget )",
      "name":"GetCustomCastErrorTarget",
      "return":"string"
    },{
      "desc":"Return gold cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetGoldCost",
      "return":"int"
    },{
      "desc":"Return mana cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetManaCost",
      "return":"int"
    },{
      "desc":"Returns whether this item is muted or not.",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    }],
  "CDOTA_Buff":[{
      "desc":"(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect",
      "func":"( int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect )",
      "name":"AddParticle",
      "return":"void"
    },{
      "desc":"Decrease this modifier's stack count by 1.",
      "func":"()",
      "name":"DecrementStackCount",
      "return":"void"
    },{
      "desc":"Run all associated destroy functions, then remove the modifier.",
      "func":"()",
      "name":"Destroy",
      "return":"void"
    },{
      "desc":"Run all associated refresh functions on this modifier as if it was re-applied.",
      "func":"()",
      "name":"ForceRefresh",
      "return":"void"
    },{
      "desc":"Get the ability that generated the modifier.",
      "func":"()",
      "name":"GetAbility",
      "return":"handle"
    },{
      "desc":"Returns aura stickiness (default 0.5)",
      "func":"()",
      "name":"GetAuraDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetAuraOwner",
      "return":"handle"
    },{
      "desc":"Get the owner of the ability responsible for the modifier.",
      "func":"()",
      "name":"GetCaster",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetClass",
      "return":"string"
    },{
      "desc":"",
      "func":"()",
      "name":"GetCreationTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDieTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetDuration",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetElapsedTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetLastAppliedTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetName",
      "return":"string"
    },{
      "desc":"Get the unit the modifier is parented to.",
      "func":"()",
      "name":"GetParent",
      "return":"handle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetRemainingTime",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSerialNumber",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStackCount",
      "return":"int"
    },{
      "desc":"",
      "func":"( int iFunction )",
      "name":"HasFunction",
      "return":"bool"
    },{
      "desc":"Increase this modifier's stack count by 1.",
      "func":"()",
      "name":"IncrementStackCount",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDebuff",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsHexDebuff",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStunDebuff",
      "return":"bool"
    },{
      "desc":"(flTime, bInformClients)",
      "func":"( float flDuration, bool bInformClient )",
      "name":"SetDuration",
      "return":"void"
    },{
      "desc":"",
      "func":"( int iCount )",
      "name":"SetStackCount",
      "return":"void"
    },{
      "desc":"Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1.",
      "func":"( float flInterval )",
      "name":"StartIntervalThink",
      "return":"void"
    }],
  "CNativeOutputs":[{
      "desc":"Add an output",
      "func":"( string_1, string_2 )",
      "name":"AddOutput",
      "return":"void"
    },{
      "desc":"Initialize with number of outputs",
      "func":"( int_1 )",
      "name":"Init",
      "return":"void"
    }],
  "CEntityInstance":[{
      "desc":"Adds an I/O connection that will call the named function on this entity when the specified output fires.",
      "func":"( string_1, string_2 )",
      "name":"ConnectOutput",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"Destroy",
      "return":"void"
    },{
      "desc":"Removes a connected script function from an I/O event on this entity.",
      "func":"( string_1, string_2 )",
      "name":"DisconnectOutput",
      "return":"void"
    },{
      "desc":"Removes a connected script function from an I/O event on the passed entity.",
      "func":"( string_1, string_2, handle_3 )",
      "name":"DisconnectRedirectedOutput",
      "return":"void"
    },{
      "desc":"Fire an entity output",
      "func":"( string_1, handle_2, handle_3, table_4, float_5 )",
      "name":"FireOutput",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"GetClassname",
      "return":"string"
    },{
      "desc":"Get the entity name w/help if not defined (i.e. classname/etc)",
      "func":"()",
      "name":"GetDebugName",
      "return":"string"
    },{
      "desc":"Get the entity as an EHANDLE",
      "func":"()",
      "name":"GetEntityHandle",
      "return":"ehandle"
    },{
      "desc":"",
      "func":"()",
      "name":"GetEntityIndex",
      "return":"int"
    },{
      "desc":"Get Integer Attribute",
      "func":"( string_1 )",
      "name":"GetIntAttr",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetName",
      "return":"string"
    },{
      "desc":"Retrieve, creating if necessary, the private per-instance script-side data associated with an entity",
      "func":"()",
      "name":"GetOrCreatePrivateScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve, creating if necessary, the public script-side data associated with an entity",
      "func":"()",
      "name":"GetOrCreatePublicScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve the private per-instance script-side data associated with an entity",
      "func":"()",
      "name":"GetPrivateScriptScope",
      "return":"handle"
    },{
      "desc":"Retrieve the public script-side data associated with an entity",
      "func":"()",
      "name":"GetPublicScriptScope",
      "return":"handle"
    },{
      "desc":"Adds an I/O connection that will call the named function on the passed entity when the specified output fires.",
      "func":"( string_1, string_2, handle_3 )",
      "name":"RedirectOutput",
      "return":"void"
    },{
      "desc":"Delete this entity",
      "func":"()",
      "name":"RemoveSelf",
      "return":"void"
    },{
      "desc":"Set Integer Attribute",
      "func":"( string_1, int_2 )",
      "name":"SetIntAttr",
      "return":"void"
    },{
      "desc":"",
      "func":"()",
      "name":"entindex",
      "return":"int"
    }],
  "C_DOTA_BaseNPC_Hero":[{
      "desc":"",
      "func":"()",
      "name":"GetAgility",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetIntellect",
      "return":"float"
    },{
      "desc":"",
      "func":"()",
      "name":"GetStrength",
      "return":"float"
    }],
  "CScriptParticleManager":[{
      "desc":"Creates a new particle effect",
      "func":"( string_1, int_2, handle_3 )",
      "name":"CreateParticle",
      "return":"int"
    },{
      "desc":"Creates a new particle effect that only plays for the specified player",
      "func":"( string_1, int_2, handle_3, handle_4 )",
      "name":"CreateParticleForPlayer",
      "return":"int"
    },{
      "desc":"Creates a new particle effect that only plays for the specified team",
      "func":"( string_1, int_2, handle_3, int_4 )",
      "name":"CreateParticleForTeam",
      "return":"int"
    },{
      "desc":"(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.",
      "func":"( int_1, bool_2 )",
      "name":"DestroyParticle",
      "return":"void"
    },{
      "desc":"",
      "func":"( string_1, handle_2 )",
      "name":"GetParticleReplacement",
      "return":"string"
    },{
      "desc":"Frees the specified particle index",
      "func":"( int_1 )",
      "name":"ReleaseParticleIndex",
      "return":"void"
    },{
      "desc":"",
      "func":"( int_1 )",
      "name":"SetParticleAlwaysSimulate",
      "return":"void"
    },{
      "desc":"Set the control point data for a control on a particle effect",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControl",
      "return":"void"
    },{
      "desc":"",
      "func":"( int_1, int_2, handle_3, int_4, string_5, Vector_6, bool_7 )",
      "name":"SetParticleControlEnt",
      "return":"void"
    },{
      "desc":"(int iIndex, int iPoint, Vector vecPosition)",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControlFallback",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, vForward)",
      "func":"( int_1, int_2, Vector_3 )",
      "name":"SetParticleControlForward",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, vForward, vRight, vUp) - Set the orientation for a control on a particle effect (NOTE: This is left handed -- bad!!)",
      "func":"( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
      "name":"SetParticleControlOrientation",
      "return":"void"
    },{
      "desc":"(int nFXIndex, int nPoint, Vector vecForward, Vector vecLeft, Vector vecUp) - Set the orientation for a control on a particle effect",
      "func":"( int_1, int_2, Vector_3, Vector_4, Vector_5 )",
      "name":"SetParticleControlOrientationFLU",
      "return":"void"
    },{
      "desc":"int nfxindex, int nPoint, int nPoint2, float flRadius",
      "func":"( int_1, int_2, int_3, float_4 )",
      "name":"SetParticleFoWProperties",
      "return":"void"
    },{
      "desc":"int nfxindex, bool bCheckFoW",
      "func":"( int_1, bool_2 )",
      "name":"SetParticleShouldCheckFoW",
      "return":"bool"
    }],
  "CDOTA_Modifier_Lua_Vertical_Motion":[{
      "desc":"Called when the motion gets interrupted.",
      "func":"()",
      "name":"OnVerticalMotionInterrupted",
      "return":"void"
    },{
      "desc":"Perform any motion from the given interval on the NPC.",
      "func":"( handle me, float dt )",
      "name":"UpdateVerticalMotion",
      "return":"void"
    }],
  "CEntities":[{
      "desc":"Begin an iteration over the list of entities",
      "func":"()",
      "name":"First",
      "return":"handle"
    },{
      "desc":"Continue an iteration over the list of entities, providing reference to a previously found entity",
      "func":"( handle_1 )",
      "name":"Next",
      "return":"handle"
    }],
  "C_DOTA_Item":[{
      "desc":"",
      "func":"()",
      "name":"GetCurrentCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetInitialCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetItemSlot",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetSecondaryCharges",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"GetShareability",
      "return":"int"
    },{
      "desc":"",
      "func":"()",
      "name":"IsAlertableItem",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsCastOnPickup",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDisassemblable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsDroppable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsInBackpack",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsItem",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsKillable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsMuted",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPermanent",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsPurchasable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRecipe",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsRecipeGenerated",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsSellable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"IsStackable",
      "return":"bool"
    },{
      "desc":"",
      "func":"()",
      "name":"RequiresCharges",
      "return":"bool"
    }],
  "C_BaseFlex":[],
  "C_BaseAnimating":[],
  "CScriptPrecacheContext":[{
      "desc":"Precaches a specific resource",
      "func":"( string_1 )",
      "name":"AddResource",
      "return":"void"
    },{
      "desc":"Reads a spawn key",
      "func":"( string_1 )",
      "name":"GetValue",
      "return":"table"
    }],
  "CScriptKeyValues":[{
      "desc":"Reads a spawn key",
      "func":"( string_1 )",
      "name":"GetValue",
      "return":"table"
    }],
  "C_DOTA_Ability_Lua":[{
      "desc":"Determine whether an issued command with no target is valid.",
      "func":"()",
      "name":"CastFilterResult",
      "return":"int"
    },{
      "desc":"(Vector vLocation) Determine whether an issued command on a location is valid.",
      "func":"( Vector vLocation )",
      "name":"CastFilterResultLocation",
      "return":"int"
    },{
      "desc":"(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
      "func":"( handle hTarget )",
      "name":"CastFilterResultTarget",
      "return":"int"
    },{
      "desc":"Controls the size of the AOE casting cursor.",
      "func":"()",
      "name":"GetAOERadius",
      "return":"float"
    },{
      "desc":"Allows code overriding of the ability texture shown in the HUD.",
      "func":"()",
      "name":"GetAbilityTextureName",
      "return":"string"
    },{
      "desc":"Return cast behavior type of this ability.",
      "func":"()",
      "name":"GetBehavior",
      "return":"int"
    },{
      "desc":"Return cast point of this ability.",
      "func":"()",
      "name":"GetCastPoint",
      "return":"float"
    },{
      "desc":"Return cast range of this ability.",
      "func":"( Vector vLocation, handle hTarget )",
      "name":"GetCastRange",
      "return":"int"
    },{
      "desc":"Return the channel time of this ability.",
      "func":"()",
      "name":"GetChannelTime",
      "return":"float"
    },{
      "desc":"Return mana cost at the given level per second while channeling (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetChannelledManaCostPerSecond",
      "return":"int"
    },{
      "desc":"Return cooldown of this ability.",
      "func":"( int iLevel )",
      "name":"GetCooldown",
      "return":"float"
    },{
      "desc":"Return the error string of a failed command with no target.",
      "func":"()",
      "name":"GetCustomCastError",
      "return":"string"
    },{
      "desc":"(Vector vLocation) Return the error string of a failed command on a location.",
      "func":"( Vector vLocation )",
      "name":"GetCustomCastErrorLocation",
      "return":"string"
    },{
      "desc":"(HSCRIPT hTarget) Return the error string of a failed command on a target.",
      "func":"( handle hTarget )",
      "name":"GetCustomCastErrorTarget",
      "return":"string"
    },{
      "desc":"Return gold cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetGoldCost",
      "return":"int"
    },{
      "desc":"Return mana cost at the given level (-1 is current).",
      "func":"( int iLevel )",
      "name":"GetManaCost",
      "return":"int"
    }],
  "CInfoWorldLayer":[{
      "desc":"Hides this layer",
      "func":"()",
      "name":"HideWorldLayer",
      "return":"void"
    },{
      "desc":"Shows this layer",
      "func":"()",
      "name":"ShowWorldLayer",
      "return":"void"
    }],
  "CEntityScriptFramework":[]
}